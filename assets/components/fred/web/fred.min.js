(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("Fred", [], factory);
	else if(typeof exports === 'object')
		exports["Fred"] = factory();
	else
		root["Fred"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _EE = __webpack_require__(1);\n\nvar _EE2 = _interopRequireDefault(_EE);\n\nvar _Sidebar = __webpack_require__(3);\n\nvar _Sidebar2 = _interopRequireDefault(_Sidebar);\n\nvar _Launcher = __webpack_require__(33);\n\nvar _Launcher2 = _interopRequireDefault(_Launcher);\n\nvar _isomorphicFetch = __webpack_require__(6);\n\nvar _isomorphicFetch2 = _interopRequireDefault(_isomorphicFetch);\n\nvar _Drake = __webpack_require__(10);\n\nvar _Drake2 = _interopRequireDefault(_Drake);\n\nvar _ImageEditor = __webpack_require__(24);\n\nvar _ImageEditor2 = _interopRequireDefault(_ImageEditor);\n\nvar _IconEditor = __webpack_require__(26);\n\nvar _IconEditor2 = _interopRequireDefault(_IconEditor);\n\nvar _ContentElement = __webpack_require__(23);\n\nvar _ContentElement2 = _interopRequireDefault(_ContentElement);\n\nvar _ElementSettings = __webpack_require__(34);\n\nvar _ElementSettings2 = _interopRequireDefault(_ElementSettings);\n\nvar _RegisterPlugins = __webpack_require__(36);\n\nvar _RegisterPlugins2 = _interopRequireDefault(_RegisterPlugins);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Fred = function () {\n    function Fred() {\n        var _this = this;\n\n        var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        _classCallCheck(this, Fred);\n\n        this.config = config || {};\n        this.drake = null;\n        this.loading = null;\n        this.wrapper = null;\n        this.config.pageSettings = {};\n\n        document.addEventListener(\"DOMContentLoaded\", function () {\n            _this.init();\n        });\n    }\n\n    _createClass(Fred, [{\n        key: 'render',\n        value: function render() {\n            this.wrapper = document.createElement('div');\n            this.wrapper.classList.add('fred');\n\n            this.config.fredWrapper = this.wrapper;\n\n            document.body.appendChild(this.wrapper);\n        }\n    }, {\n        key: 'renderComponents',\n        value: function renderComponents() {\n            new _Launcher2.default(this.config.launcherPosition || 'bottom_left');\n            new _Sidebar2.default(this.config, this.wrapper);\n            new _ElementSettings2.default();\n        }\n    }, {\n        key: 'getDataFromDropZone',\n        value: function getDataFromDropZone(dropZone) {\n            var data = [];\n\n            var _iteratorNormalCompletion = true;\n            var _didIteratorError = false;\n            var _iteratorError = undefined;\n\n            try {\n                for (var _iterator = dropZone.children[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                    var child = _step.value;\n\n                    data.push(child.fredEl.getContent());\n                }\n            } catch (err) {\n                _didIteratorError = true;\n                _iteratorError = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion && _iterator.return) {\n                        _iterator.return();\n                    }\n                } finally {\n                    if (_didIteratorError) {\n                        throw _iteratorError;\n                    }\n                }\n            }\n\n            return data;\n        }\n    }, {\n        key: 'getCleanDropZoneContent',\n        value: function getCleanDropZoneContent(dropZone) {\n            var cleanedContent = '';\n\n            var promises = [];\n            var _iteratorNormalCompletion2 = true;\n            var _didIteratorError2 = false;\n            var _iteratorError2 = undefined;\n\n            try {\n                for (var _iterator2 = dropZone.children[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                    var child = _step2.value;\n\n                    promises.push(child.fredEl.cleanRender());\n                }\n            } catch (err) {\n                _didIteratorError2 = true;\n                _iteratorError2 = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion2 && _iterator2.return) {\n                        _iterator2.return();\n                    }\n                } finally {\n                    if (_didIteratorError2) {\n                        throw _iteratorError2;\n                    }\n                }\n            }\n\n            return Promise.all(promises).then(function (values) {\n                values.forEach(function (el) {\n                    cleanedContent += el.innerHTML;\n                });\n\n                return cleanedContent;\n            });\n        }\n    }, {\n        key: 'save',\n        value: function save() {\n            var _this2 = this;\n\n            _EE2.default.emit('fred-loading', 'Saving Page');\n            var body = {};\n            var data = {};\n\n            var promises = [];\n\n            var _loop = function _loop(i) {\n                data[_this2.dropzones[i].dataset.fredDropzone] = _this2.getDataFromDropZone(_this2.dropzones[i]);\n\n                var targets = _this2.dropzones[i].querySelectorAll('[data-fred-target]:not([data-fred-target=\"\"])');\n                var _iteratorNormalCompletion3 = true;\n                var _didIteratorError3 = false;\n                var _iteratorError3 = undefined;\n\n                try {\n                    for (var _iterator3 = targets[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n                        var target = _step3.value;\n\n                        if (!_this2.config.pageSettings.hasOwnProperty(target.dataset.fredTarget)) {\n                            body[target.dataset.fredTarget] = target.innerHTML;\n                        }\n                    }\n                } catch (err) {\n                    _didIteratorError3 = true;\n                    _iteratorError3 = err;\n                } finally {\n                    try {\n                        if (!_iteratorNormalCompletion3 && _iterator3.return) {\n                            _iterator3.return();\n                        }\n                    } finally {\n                        if (_didIteratorError3) {\n                            throw _iteratorError3;\n                        }\n                    }\n                }\n\n                promises.push(_this2.getCleanDropZoneContent(_this2.dropzones[i]).then(function (content) {\n                    body[_this2.dropzones[i].dataset.fredDropzone] = content;\n                }));\n            };\n\n            for (var i = 0; i < this.dropzones.length; i++) {\n                _loop(i);\n            }\n\n            body.id = this.config.resource.id;\n            body.data = data;\n            body.pageSettings = this.config.pageSettings;\n\n            Promise.all(promises).then(function () {\n                console.log('body: ', body);\n\n                (0, _isomorphicFetch2.default)(_this2.config.assetsUrl + 'endpoints/ajax.php?action=save-content', {\n                    method: \"post\",\n                    credentials: 'same-origin',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify(body)\n                }).then(function (response) {\n                    return response.json();\n                }).then(function (json) {\n                    if (json.url) {\n                        location.href = json.url;\n                    }\n\n                    _EE2.default.emit('fred-loading-hide');\n                });\n            });\n        }\n    }, {\n        key: 'loadContent',\n        value: function loadContent() {\n            var _this3 = this;\n\n            _EE2.default.emit('fred-loading', 'Preparing Content');\n\n            return (0, _isomorphicFetch2.default)(this.config.assetsUrl + 'endpoints/ajax.php?action=load-content&id=' + this.config.resource.id, {\n                credentials: 'same-origin'\n            }).then(function (response) {\n                return response.json();\n            }).then(function (json) {\n                var zones = json.data.data;\n                _this3.config.pageSettings = json.data.pageSettings || {};\n                var dzPromises = [];\n\n                var _loop2 = function _loop2(zoneName) {\n                    if (zones.hasOwnProperty(zoneName)) {\n                        var zoneEl = document.querySelector('[data-fred-dropzone=\"' + zoneName + '\"]');\n                        if (zoneEl) {\n                            var promises = [];\n\n                            zoneEl.innerHTML = '';\n                            zones[zoneName].forEach(function (element) {\n                                var chunk = document.createElement('div');\n                                chunk.classList.add('chunk');\n                                chunk.setAttribute('hidden', 'hidden');\n                                chunk.dataset.fredElementId = element.widget;\n                                chunk.innerHTML = json.data.elements[element.widget].html;\n                                chunk.elementOptions = json.data.elements[element.widget].options;\n\n                                var contentElement = new _ContentElement2.default(_this3.config, chunk, zoneName, null, element.values, element.settings || {});\n                                promises.push(contentElement.render().then(function (wrapper) {\n                                    _this3.loadChildren(element.children, contentElement, json.data.elements);\n                                    return wrapper;\n                                }));\n                            });\n\n                            dzPromises.push(Promise.all(promises).then(function (wrappers) {\n                                wrappers.forEach(function (wrapper) {\n                                    zoneEl.appendChild(wrapper);\n                                });\n                            }));\n                        }\n                    }\n                };\n\n                for (var zoneName in zones) {\n                    _loop2(zoneName);\n                }\n\n                Promise.all(dzPromises).then(function () {\n                    _Drake2.default.reloadContainers();\n\n                    _EE2.default.emit('fred-loading-hide');\n                });\n            });\n        }\n    }, {\n        key: 'loadChildren',\n        value: function loadChildren(zones, parent, elements) {\n            var _this4 = this;\n\n            var _loop3 = function _loop3(zoneName) {\n                if (zones.hasOwnProperty(zoneName)) {\n                    zones[zoneName].forEach(function (element) {\n                        var chunk = document.createElement('div');\n                        chunk.classList.add('chunk');\n                        chunk.setAttribute('hidden', 'hidden');\n                        chunk.dataset.fredElementId = element.widget;\n                        chunk.innerHTML = elements[element.widget].html;\n                        chunk.elementOptions = elements[element.widget].options || {};\n\n                        var contentElement = new _ContentElement2.default(_this4.config, chunk, zoneName, parent, element.values, element.settings || {});\n                        contentElement.render().then(function () {\n                            parent.addElementToDropZone(zoneName, contentElement);\n\n                            _this4.loadChildren(element.children, contentElement, elements);\n                        });\n                    });\n                }\n            };\n\n            for (var zoneName in zones) {\n                _loop3(zoneName);\n            }\n        }\n    }, {\n        key: 'registerListeners',\n        value: function registerListeners() {\n            var _this5 = this;\n\n            _EE2.default.on('fred-save', function () {\n                _this5.save();\n            });\n\n            _EE2.default.on('fred-wrapper-insert', function (el) {\n                _this5.wrapper.appendChild(el);\n            });\n\n            _EE2.default.on('fred-loading', function (text) {\n                if (_this5.loading !== null) return;\n\n                text = text || '';\n\n                _this5.loading = document.createElement('section');\n                _this5.loading.classList.add('fred--modal-bg');\n\n                _this5.loading.innerHTML = '<div class=\"fred--modal\" aria-hidden=\"false\"><div style=\"color:white;text-align:center;\"><span class=\"fred--loading\"></span> ' + text + '</div></div>';\n\n                _this5.wrapper.appendChild(_this5.loading);\n            });\n\n            _EE2.default.on('fred-loading-hide', function () {\n                if (_this5.loading !== null) {\n                    _this5.loading.remove();\n                    _this5.loading = null;\n                }\n            });\n\n            _EE2.default.on('fred-page-setting-change', function (settingName, settingValue, sourceEl) {\n                _this5.dropzones.forEach(function (dz) {\n                    var targets = dz.querySelectorAll('[data-fred-target=\"' + settingName + '\"');\n                    var _iteratorNormalCompletion4 = true;\n                    var _didIteratorError4 = false;\n                    var _iteratorError4 = undefined;\n\n                    try {\n                        for (var _iterator4 = targets[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n                            var target = _step4.value;\n\n                            if (target !== sourceEl) {\n                                target.fredEl.setElValue(target, settingValue);\n                            }\n                        }\n                    } catch (err) {\n                        _didIteratorError4 = true;\n                        _iteratorError4 = err;\n                    } finally {\n                        try {\n                            if (!_iteratorNormalCompletion4 && _iterator4.return) {\n                                _iterator4.return();\n                            }\n                        } finally {\n                            if (_didIteratorError4) {\n                                throw _iteratorError4;\n                            }\n                        }\n                    }\n                });\n            });\n\n            _EE2.default.on('fred-undo', function () {\n                console.log('Undo not yet implemented.');\n            });\n        }\n    }, {\n        key: 'init',\n        value: function init() {\n            var _this6 = this;\n\n            console.log('Hello from Fred!');\n\n            (0, _RegisterPlugins2.default)(this);\n\n            this.registerListeners();\n\n            this.dropzones = document.querySelectorAll('[data-fred-dropzone]:not([data-fred-dropzone=\"\"])');\n            var registeredDropzones = [];\n\n            for (var zoneIndex = 0; zoneIndex < this.dropzones.length; zoneIndex++) {\n                if (registeredDropzones.indexOf(this.dropzones[zoneIndex].dataset.fredDropzone) != -1) {\n                    console.error('There are several dropzones with same name: ' + this.dropzones[zoneIndex].dataset.fredDropzone + '. The name of each dropzone has to be unique.');\n                    return false;\n                }\n\n                registeredDropzones.push(this.dropzones[zoneIndex].dataset.fredDropzone);\n            }\n\n            this.render();\n            _Drake2.default.initDrake(this.config);\n            _ImageEditor2.default.init(this.wrapper);\n            _IconEditor2.default.init(this.wrapper);\n\n            this.loadContent().then(function () {\n                _this6.renderComponents();\n            });\n        }\n    }]);\n\n    return Fred;\n}();\n\nexports.default = Fred;\nmodule.exports = exports['default'];\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.emitter = undefined;\n\nvar _events = __webpack_require__(2);\n\nvar _events2 = _interopRequireDefault(_events);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar emitter = exports.emitter = new _events2.default();\nexports.default = emitter;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9fYnVpbGQvYXNzZXRzL2pzL0VFLmpzPzE5ZjQiXSwibmFtZXMiOlsiZW1pdHRlciJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOzs7Ozs7QUFDTyxJQUFNQSw0QkFBVSxzQkFBaEI7a0JBQ1FBLE8iLCJmaWxlIjoiMS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBFdmVudEVtaXR0ZXIgZnJvbSAnZXZlbnRzJztcbmV4cG9ydCBjb25zdCBlbWl0dGVyID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuZXhwb3J0IGRlZmF1bHQgZW1pdHRlcjtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9fYnVpbGQvYXNzZXRzL2pzL0VFLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 2 */
/***/ (function(module, exports) {

	eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfunction EventEmitter() {\n  this._events = this._events || {};\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function(n) {\n  if (!isNumber(n) || n < 0 || isNaN(n))\n    throw TypeError('n must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nEventEmitter.prototype.emit = function(type) {\n  var er, handler, len, args, i, listeners;\n\n  if (!this._events)\n    this._events = {};\n\n  // If there is no 'error' event listener then throw.\n  if (type === 'error') {\n    if (!this._events.error ||\n        (isObject(this._events.error) && !this._events.error.length)) {\n      er = arguments[1];\n      if (er instanceof Error) {\n        throw er; // Unhandled 'error' event\n      } else {\n        // At least give some kind of context to the user\n        var err = new Error('Uncaught, unspecified \"error\" event. (' + er + ')');\n        err.context = er;\n        throw err;\n      }\n    }\n  }\n\n  handler = this._events[type];\n\n  if (isUndefined(handler))\n    return false;\n\n  if (isFunction(handler)) {\n    switch (arguments.length) {\n      // fast cases\n      case 1:\n        handler.call(this);\n        break;\n      case 2:\n        handler.call(this, arguments[1]);\n        break;\n      case 3:\n        handler.call(this, arguments[1], arguments[2]);\n        break;\n      // slower\n      default:\n        args = Array.prototype.slice.call(arguments, 1);\n        handler.apply(this, args);\n    }\n  } else if (isObject(handler)) {\n    args = Array.prototype.slice.call(arguments, 1);\n    listeners = handler.slice();\n    len = listeners.length;\n    for (i = 0; i < len; i++)\n      listeners[i].apply(this, args);\n  }\n\n  return true;\n};\n\nEventEmitter.prototype.addListener = function(type, listener) {\n  var m;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events)\n    this._events = {};\n\n  // To avoid recursion in the case that type === \"newListener\"! Before\n  // adding it to the listeners, first emit \"newListener\".\n  if (this._events.newListener)\n    this.emit('newListener', type,\n              isFunction(listener.listener) ?\n              listener.listener : listener);\n\n  if (!this._events[type])\n    // Optimize the case of one listener. Don't need the extra array object.\n    this._events[type] = listener;\n  else if (isObject(this._events[type]))\n    // If we've already got an array, just append.\n    this._events[type].push(listener);\n  else\n    // Adding the second element, need to change to array.\n    this._events[type] = [this._events[type], listener];\n\n  // Check for listener leak\n  if (isObject(this._events[type]) && !this._events[type].warned) {\n    if (!isUndefined(this._maxListeners)) {\n      m = this._maxListeners;\n    } else {\n      m = EventEmitter.defaultMaxListeners;\n    }\n\n    if (m && m > 0 && this._events[type].length > m) {\n      this._events[type].warned = true;\n      console.error('(node) warning: possible EventEmitter memory ' +\n                    'leak detected. %d listeners added. ' +\n                    'Use emitter.setMaxListeners() to increase limit.',\n                    this._events[type].length);\n      if (typeof console.trace === 'function') {\n        // not supported in IE 10\n        console.trace();\n      }\n    }\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.once = function(type, listener) {\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  var fired = false;\n\n  function g() {\n    this.removeListener(type, g);\n\n    if (!fired) {\n      fired = true;\n      listener.apply(this, arguments);\n    }\n  }\n\n  g.listener = listener;\n  this.on(type, g);\n\n  return this;\n};\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener = function(type, listener) {\n  var list, position, length, i;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events || !this._events[type])\n    return this;\n\n  list = this._events[type];\n  length = list.length;\n  position = -1;\n\n  if (list === listener ||\n      (isFunction(list.listener) && list.listener === listener)) {\n    delete this._events[type];\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n\n  } else if (isObject(list)) {\n    for (i = length; i-- > 0;) {\n      if (list[i] === listener ||\n          (list[i].listener && list[i].listener === listener)) {\n        position = i;\n        break;\n      }\n    }\n\n    if (position < 0)\n      return this;\n\n    if (list.length === 1) {\n      list.length = 0;\n      delete this._events[type];\n    } else {\n      list.splice(position, 1);\n    }\n\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.removeAllListeners = function(type) {\n  var key, listeners;\n\n  if (!this._events)\n    return this;\n\n  // not listening for removeListener, no need to emit\n  if (!this._events.removeListener) {\n    if (arguments.length === 0)\n      this._events = {};\n    else if (this._events[type])\n      delete this._events[type];\n    return this;\n  }\n\n  // emit removeListener for all listeners on all events\n  if (arguments.length === 0) {\n    for (key in this._events) {\n      if (key === 'removeListener') continue;\n      this.removeAllListeners(key);\n    }\n    this.removeAllListeners('removeListener');\n    this._events = {};\n    return this;\n  }\n\n  listeners = this._events[type];\n\n  if (isFunction(listeners)) {\n    this.removeListener(type, listeners);\n  } else if (listeners) {\n    // LIFO order\n    while (listeners.length)\n      this.removeListener(type, listeners[listeners.length - 1]);\n  }\n  delete this._events[type];\n\n  return this;\n};\n\nEventEmitter.prototype.listeners = function(type) {\n  var ret;\n  if (!this._events || !this._events[type])\n    ret = [];\n  else if (isFunction(this._events[type]))\n    ret = [this._events[type]];\n  else\n    ret = this._events[type].slice();\n  return ret;\n};\n\nEventEmitter.prototype.listenerCount = function(type) {\n  if (this._events) {\n    var evlistener = this._events[type];\n\n    if (isFunction(evlistener))\n      return 1;\n    else if (evlistener)\n      return evlistener.length;\n  }\n  return 0;\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  return emitter.listenerCount(type);\n};\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _EE = __webpack_require__(1);\n\nvar _EE2 = _interopRequireDefault(_EE);\n\nvar _Pages = __webpack_require__(4);\n\nvar _Pages2 = _interopRequireDefault(_Pages);\n\nvar _Elements = __webpack_require__(9);\n\nvar _Elements2 = _interopRequireDefault(_Elements);\n\nvar _PageSettings = __webpack_require__(30);\n\nvar _PageSettings2 = _interopRequireDefault(_PageSettings);\n\nvar _promiseCancel = __webpack_require__(32);\n\nvar _promiseCancel2 = _interopRequireDefault(_promiseCancel);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Sidebar = function () {\n    function Sidebar() {\n        var _this = this;\n\n        var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        var fredWrapper = arguments[1];\n\n        _classCallCheck(this, Sidebar);\n\n        this.lastRequest = null;\n        this.config = config || {};\n        this.components = [];\n        this.visible = false;\n        this.fredWrapper = fredWrapper;\n\n        this.hideSidebar = this.hideSidebar.bind(this);\n        this.globalHideSidebar = this.globalHideSidebar.bind(this);\n\n        _EE2.default.on('fred-sidebar-expand', function (cmp, title, data) {\n            cmp.loading();\n\n            _this.components.forEach(function (component) {\n                component.hide();\n            });\n\n            cmp.expand();\n\n            _this.lastRequest = (0, _promiseCancel2.default)(Promise.resolve(data));\n            _this.lastRequest.promise.then(function (content) {\n                _this.lastRequest = null;\n\n                cmp.setContent(content);\n\n                cmp.afterExpand();\n            }).catch(function (err) {\n                _this.lastRequest = null;\n\n                if (err.type === 'cancel') {\n                    return;\n                }\n\n                cmp.setContent('SOMETHING WRONG HAPPENED');\n            });\n        });\n\n        _EE2.default.on('fred-sidebar-collapse', function (cmp) {\n            if (_this.lastRequest !== null) {\n                _this.lastRequest.cancel();\n                _this.lastRequest = null;\n            }\n\n            _this.components.forEach(function (component) {\n                component.collapse();\n            });\n        });\n\n        _EE2.default.on('fred-sidebar-hide', function (silent) {\n            _this.hideSidebar(silent);\n        });\n\n        _EE2.default.on('fred-sidebar-show', function (silent) {\n            _this.showSidebar(silent);\n        });\n\n        _EE2.default.on('fred-sidebar-toggle', function () {\n            if (_this.wrapper.classList.contains('fred--hidden')) {\n                _EE2.default.emit('fred-sidebar-show');\n            } else {\n                _EE2.default.emit('fred-sidebar-hide');\n            }\n        });\n\n        this.render();\n    }\n\n    _createClass(Sidebar, [{\n        key: 'render',\n        value: function render() {\n            this.wrapper = document.createElement('div');\n            this.wrapper.classList.add('fred--sidebar', 'fred--hidden');\n            this.wrapper.setAttribute('aria-hidden', 'true');\n\n            this.wrapper.appendChild(this.buildCloseButton());\n            this.wrapper.appendChild(this.buildSidebarHeader());\n            this.wrapper.appendChild(this.buildSidebar());\n\n            _EE2.default.emit('fred-wrapper-insert', this.wrapper);\n\n            return this;\n        }\n    }, {\n        key: 'buildCloseButton',\n        value: function buildCloseButton() {\n            var button = document.createElement('button');\n            button.classList.add('fred--sidebar_close');\n            button.setAttribute('role', 'button');\n            button.innerHTML = '<i class=\"fred--angle-left\"></i><i class=\"fred--angle-left\"></i>';\n            button.addEventListener('click', function (e) {\n                e.preventDefault();\n\n                _EE2.default.emit('fred-sidebar-hide');\n            });\n\n            return button;\n        }\n    }, {\n        key: 'buildSidebarHeader',\n        value: function buildSidebarHeader() {\n            var header = document.createElement('div');\n            header.classList.add('fred--sidebar_title');\n\n            var logo = document.createElement('img');\n            logo.setAttribute('alt', 'MODX FRED');\n            logo.classList.add('fred--logo');\n            logo.src = (this.config.assetsUrl || '') + 'images/modx-revo-icon-48.svg';\n\n            var title = document.createElement('h1');\n            title.innerText = 'Fred';\n\n            header.appendChild(logo);\n            header.appendChild(title);\n\n            return header;\n        }\n    }, {\n        key: 'buildSidebar',\n        value: function buildSidebar() {\n            this.sidebar = document.createElement('dl');\n            this.sidebar.classList.add('fred--accordion');\n            this.sidebar.setAttribute('tabindex', '0');\n            this.sidebar.setAttribute('role', 'tablist');\n\n            this.components.push(new _Pages2.default(this.sidebar, this.config));\n            this.components.push(new _Elements2.default(this.sidebar, this.config));\n            this.components.push(new _PageSettings2.default(this.sidebar, this.config));\n\n            return this.sidebar;\n        }\n    }, {\n        key: 'hideSidebar',\n        value: function hideSidebar() {\n            var silent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n            if (silent === false) {\n                this.visible = false;\n            }\n\n            this.wrapper.classList.add('fred--hidden');\n\n            window.removeEventListener('click', this.globalHideSidebar);\n        }\n    }, {\n        key: 'showSidebar',\n        value: function showSidebar() {\n            var _this2 = this;\n\n            var silent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n            if (silent === true) {\n                if (this.visible === false) return;\n            }\n\n            this.visible = true;\n            this.wrapper.classList.remove('fred--hidden');\n            setTimeout(function () {\n                window.addEventListener('click', _this2.globalHideSidebar);\n            }, 50);\n        }\n    }, {\n        key: 'globalHideSidebar',\n        value: function globalHideSidebar(e) {\n            if (!this.fredWrapper.contains(e.target)) {\n                this.hideSidebar(false);\n            }\n        }\n    }]);\n\n    return Sidebar;\n}();\n\nexports.default = Sidebar;\nmodule.exports = exports['default'];\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _Sidebar2 = __webpack_require__(5);\n\nvar _Sidebar3 = _interopRequireDefault(_Sidebar2);\n\nvar _isomorphicFetch = __webpack_require__(6);\n\nvar _isomorphicFetch2 = _interopRequireDefault(_isomorphicFetch);\n\nvar _choices = __webpack_require__(8);\n\nvar _choices2 = _interopRequireDefault(_choices);\n\nvar _EE = __webpack_require__(1);\n\nvar _EE2 = _interopRequireDefault(_EE);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar Pages = function (_Sidebar) {\n    _inherits(Pages, _Sidebar);\n\n    function Pages() {\n        _classCallCheck(this, Pages);\n\n        return _possibleConstructorReturn(this, (Pages.__proto__ || Object.getPrototypeOf(Pages)).apply(this, arguments));\n    }\n\n    _createClass(Pages, [{\n        key: 'init',\n        value: function init() {\n            this.content = null;\n            this.parents = [{\n                id: 0,\n                value: '0',\n                label: 'No Parent'\n            }];\n        }\n    }, {\n        key: 'click',\n        value: function click() {\n            var _this2 = this;\n\n            if (this.content !== null) {\n                return this.buildPanel();\n            }\n\n            return (0, _isomorphicFetch2.default)(this.config.assetsUrl + 'endpoints/ajax.php?action=get-resources').then(function (response) {\n                return response.json();\n            }).then(function (response) {\n                _this2.content = response.data.resources;\n                return _this2.buildPanel();\n            });\n        }\n    }, {\n        key: 'buildPanel',\n        value: function buildPanel() {\n            var content = document.createElement('div');\n            content.classList.add('fred--pages');\n\n            var pageList = document.createElement('dl');\n            pageList.classList.add('fred--pages_list');\n\n            this.buildTree(this.content, pageList);\n\n            content.appendChild(pageList);\n\n            content.appendChild(this.buildCreatePage());\n\n            return content;\n        }\n    }, {\n        key: 'buildCreatePage',\n        value: function buildCreatePage() {\n            var _this3 = this;\n\n            var wrapper = document.createElement('div');\n\n            var form = document.createElement('form');\n            form.classList.add('fred--pages_create', 'fred--hidden');\n\n            var fieldset = document.createElement('fieldset');\n            var legend = document.createElement('legend');\n            legend.innerHTML = 'Create Page';\n\n            var parentLabel = document.createElement('label');\n            parentLabel.setAttribute('for', 'fred_create_page_parent');\n            parentLabel.classList.add('fred--label-choices');\n            parentLabel.innerHTML = 'Parent';\n\n            var parentInput = document.createElement('select');\n            parentInput.setAttribute('id', 'fred_create_page_parent');\n\n            var templateLabel = document.createElement('label');\n            templateLabel.setAttribute('for', 'fred_create_page_template');\n            templateLabel.classList.add('fred--label-choices');\n            templateLabel.innerHTML = 'Template';\n\n            var templateInput = document.createElement('select');\n            templateInput.setAttribute('id', 'fred_create_page_template');\n\n            var pagetitleLabel = document.createElement('label');\n            pagetitleLabel.setAttribute('for', 'fred_create_page_pagetitle');\n            pagetitleLabel.classList.add('fred--label-choices');\n            pagetitleLabel.innerHTML = 'Page Title';\n\n            var pagetitleInput = document.createElement('input');\n            pagetitleInput.setAttribute('id', 'fred_create_page_pagetitle');\n            pagetitleInput.setAttribute('type', 'text');\n\n            var createButton = document.createElement('button');\n            createButton.classList.add('fred--btn-panel', 'fred--btn-apply');\n            createButton.innerHTML = 'Create';\n            createButton.addEventListener('click', function (e) {\n                e.preventDefault();\n                _EE2.default.emit('fred-loading', 'Creating Page');\n\n                (0, _isomorphicFetch2.default)(_this3.config.assetsUrl + 'endpoints/ajax.php?action=create-resource', {\n                    method: \"post\",\n                    credentials: 'same-origin',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify({\n                        parent: parentInput.value,\n                        template: templateInput.value,\n                        pagetitle: pagetitleInput.value\n                    })\n                }).then(function (response) {\n                    return response.json();\n                }).then(function (json) {\n                    location.href = json.url;\n                    _EE2.default.emit('fred-loading-hide');\n                });\n            });\n\n            fieldset.appendChild(legend);\n            fieldset.appendChild(parentLabel);\n            fieldset.appendChild(parentInput);\n            fieldset.appendChild(templateLabel);\n            fieldset.appendChild(templateInput);\n            fieldset.appendChild(pagetitleLabel);\n            fieldset.appendChild(pagetitleInput);\n            fieldset.appendChild(createButton);\n\n            form.appendChild(fieldset);\n\n            var button = document.createElement('button');\n            button.classList.add('fred--btn-sidebar');\n            button.innerHTML = 'Create Page';\n            button.addEventListener('click', function (e) {\n                e.preventDefault();\n                form.classList.toggle('fred--hidden');\n            });\n\n            wrapper.appendChild(button);\n            wrapper.appendChild(form);\n\n            new _choices2.default(parentInput, {\n                choices: this.parents,\n                shouldSort: false\n            });\n\n            var templateInputChoices = new _choices2.default(templateInput);\n            templateInputChoices.ajax(function (callback) {\n                (0, _isomorphicFetch2.default)(_this3.config.assetsUrl + 'endpoints/ajax.php?action=get-templates').then(function (response) {\n                    return response.json();\n                }).then(function (data) {\n                    if (data.data.templates[0]) {\n                        data.data.templates[0].selected = true;\n                    }\n                    callback(data.data.templates, 'value', 'name');\n                }).catch(function (error) {\n                    console.log(error);\n                });\n            });\n\n            window.test = templateInputChoices;\n\n            return wrapper;\n        }\n    }, {\n        key: 'buildTree',\n        value: function buildTree(pages, wrapper) {\n            var _this4 = this;\n\n            pages.forEach(function (page) {\n                _this4.parents.push({\n                    id: page.id,\n                    value: '' + page.id,\n                    label: page.pagetitle\n                });\n\n                var dt = document.createElement('dt');\n                dt.setAttribute('role', 'tab');\n                dt.setAttribute('tabindex', '0');\n                dt.innerHTML = page.pagetitle;\n\n                if (page.published !== true) {\n                    dt.classList.add('fred--pages_unpublished');\n                }\n\n                if (page.deleted === true) {\n                    dt.classList.add('fred--pages_deleted');\n                }\n\n                if (page.hidemenu === true) {\n                    dt.classList.add('fred--pages_hidden');\n                }\n\n                wrapper.append(dt);\n\n                if (page.isFred === true) {\n                    var dd = document.createElement('dd');\n                    dd.appendChild(_this4.createMenu(page));\n\n                    wrapper.append(dd);\n                } else {\n                    dt.classList.add('fred--pages_noedit');\n                }\n\n                if (page.children.length > 0) {\n                    var dl = document.createElement('dl');\n                    dl.classList.add('fred--pages_list', 'fred--hidden');\n                    dl.setAttribute('aria-disabled', 'true');\n\n                    _this4.buildTree(page.children, dl);\n\n                    var expander = document.createElement('button');\n                    expander.classList.add('fred--btn-list', 'fred--btn-list_expand');\n                    expander.addEventListener('click', function (e) {\n                        e.preventDefault();\n\n                        if (expander.classList.contains('fred--btn-list_close')) {\n                            expander.classList.remove('fred--btn-list_close');\n                            dl.classList.add('fred--hidden');\n                            dl.setAttribute('aria-disabled', 'true');\n\n                            return;\n                        }\n\n                        expander.classList.add('fred--btn-list_close');\n                        dl.classList.remove('fred--hidden');\n                        dl.setAttribute('aria-disabled', 'false');\n                    });\n\n                    dt.insertBefore(expander, dt.firstChild);\n\n                    wrapper.append(dl);\n                }\n            });\n        }\n    }, {\n        key: 'createMenu',\n        value: function createMenu(page) {\n            var menu = document.createElement('div');\n            menu.classList.add('fred--pages_menu');\n\n            var header = document.createElement('h3');\n            header.innerHTML = page.pagetitle;\n\n            var edit = document.createElement('button');\n            edit.innerHTML = 'Edit';\n            edit.addEventListener('click', function (e) {\n                e.preventDefault();\n                window.location.href = page.url;\n            });\n\n            var duplicate = document.createElement('button');\n            duplicate.innerHTML = 'Duplicate';\n\n            var publish = document.createElement('button');\n            if (page.published === true) {\n                publish.innerHTML = 'Unpublish';\n            } else {\n                publish.innerHTML = 'Publish';\n            }\n\n            var createChildPage = document.createElement('button');\n            createChildPage.innerHTML = 'Create Child Page';\n\n            var deletePage = document.createElement('button');\n            if (page.deleted === true) {\n                deletePage.innerHTML = 'Undelete';\n            } else {\n                deletePage.innerHTML = 'Delete';\n            }\n\n            menu.appendChild(header);\n            menu.appendChild(edit);\n            menu.appendChild(duplicate);\n            menu.appendChild(publish);\n            menu.appendChild(createChildPage);\n            menu.appendChild(deletePage);\n\n            return menu;\n        }\n    }]);\n\n    return Pages;\n}(_Sidebar3.default);\n\nPages.title = 'Pages';\nPages.expandable = true;\nexports.default = Pages;\nmodule.exports = exports['default'];\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _EE = __webpack_require__(1);\n\nvar _EE2 = _interopRequireDefault(_EE);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Sidebar = function () {\n    function Sidebar(sidebarWrapper) {\n        var _this = this;\n\n        var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n        _classCallCheck(this, Sidebar);\n\n        this.sidebarWrapper = sidebarWrapper;\n        this.config = config || {};\n        this.titleEl = null;\n        this.contentEl = null;\n\n        var render = function render(text) {\n            var expandable = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n            _this.titleEl = document.createElement('dt');\n            _this.titleEl.setAttribute('role', 'tab');\n            _this.titleEl.setAttribute('tabindex', '0');\n            _this.titleEl.classList.add('fred--sidebar_' + _this.constructor.title.toLowerCase().replace(/ /g, '_'));\n\n            _this.titleEl.innerHTML = text + (expandable === true ? '<i class=\"fred--angle-right fred--accordion_toggle\"></i>' : '');\n\n            if (expandable === false) {\n                _this.titleEl.addEventListener('click', _this.click);\n            } else {\n                _this.titleEl.addEventListener('click', function () {\n                    if (_this.titleEl.classList.contains('active')) {\n                        _EE2.default.emit('fred-sidebar-collapse', _this);\n                    } else {\n                        _EE2.default.emit('fred-sidebar-expand', _this, text, _this.click());\n                    }\n                });\n            }\n\n            _this.contentEl = document.createElement('dd');\n\n            _this.sidebarWrapper.appendChild(_this.titleEl);\n            _this.sidebarWrapper.appendChild(_this.contentEl);\n        };\n\n        this.init();\n\n        render(this.constructor.title, this.constructor.expandable);\n    }\n\n    _createClass(Sidebar, [{\n        key: 'init',\n        value: function init() {}\n    }, {\n        key: 'click',\n        value: function click() {}\n    }, {\n        key: 'expand',\n        value: function expand() {\n            this.titleEl.classList.add('active');\n            this.titleEl.classList.remove('fred--hidden');\n        }\n    }, {\n        key: 'collapse',\n        value: function collapse() {\n            this.titleEl.classList.remove('active');\n            this.titleEl.classList.remove('fred--hidden');\n        }\n    }, {\n        key: 'hide',\n        value: function hide() {\n            this.titleEl.classList.remove('active');\n            this.titleEl.classList.add('fred--hidden');\n        }\n    }, {\n        key: 'setContent',\n        value: function setContent(content) {\n            if ((typeof content === 'undefined' ? 'undefined' : _typeof(content)) === 'object' && content.outerHTML !== undefined) {\n                this.contentEl.innerHTML = '';\n                this.contentEl.appendChild(content);\n                return;\n            }\n\n            this.contentEl.innerHTML = content;\n        }\n    }, {\n        key: 'loading',\n        value: function loading() {\n            var text = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n\n            text = text || 'Retrieving ' + this.constructor.title;\n\n            var wrapper = document.createElement('div');\n            wrapper.classList.add('fred--loading_wrapper');\n            wrapper.innerHTML = '<span class=\"fred--loading\"></span> ' + text;\n\n            this.setContent(wrapper);\n        }\n    }, {\n        key: 'afterExpand',\n        value: function afterExpand() {}\n    }]);\n\n    return Sidebar;\n}();\n\nSidebar.title = 'TITLE NOT SET';\nSidebar.expandable = false;\nexports.default = Sidebar;\nmodule.exports = exports['default'];\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9fYnVpbGQvYXNzZXRzL2pzL0NvbXBvbmVudHMvU2lkZWJhci5qcz80NGZmIl0sIm5hbWVzIjpbIlNpZGViYXIiLCJzaWRlYmFyV3JhcHBlciIsImNvbmZpZyIsInRpdGxlRWwiLCJjb250ZW50RWwiLCJyZW5kZXIiLCJ0ZXh0IiwiZXhwYW5kYWJsZSIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsInNldEF0dHJpYnV0ZSIsImNsYXNzTGlzdCIsImFkZCIsImNvbnN0cnVjdG9yIiwidGl0bGUiLCJ0b0xvd2VyQ2FzZSIsInJlcGxhY2UiLCJpbm5lckhUTUwiLCJhZGRFdmVudExpc3RlbmVyIiwiY2xpY2siLCJjb250YWlucyIsImVtaXQiLCJhcHBlbmRDaGlsZCIsImluaXQiLCJyZW1vdmUiLCJjb250ZW50Iiwib3V0ZXJIVE1MIiwidW5kZWZpbmVkIiwid3JhcHBlciIsInNldENvbnRlbnQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQTs7Ozs7Ozs7SUFFcUJBLE87QUFJakIscUJBQVlDLGNBQVosRUFBeUM7QUFBQTs7QUFBQSxZQUFiQyxNQUFhLHVFQUFKLEVBQUk7O0FBQUE7O0FBQ3JDLGFBQUtELGNBQUwsR0FBc0JBLGNBQXRCO0FBQ0EsYUFBS0MsTUFBTCxHQUFjQSxVQUFVLEVBQXhCO0FBQ0EsYUFBS0MsT0FBTCxHQUFlLElBQWY7QUFDQSxhQUFLQyxTQUFMLEdBQWlCLElBQWpCOztBQUVBLFlBQU1DLFNBQVMsU0FBVEEsTUFBUyxDQUFDQyxJQUFELEVBQThCO0FBQUEsZ0JBQXZCQyxVQUF1Qix1RUFBVixLQUFVOztBQUN6QyxrQkFBS0osT0FBTCxHQUFlSyxTQUFTQyxhQUFULENBQXVCLElBQXZCLENBQWY7QUFDQSxrQkFBS04sT0FBTCxDQUFhTyxZQUFiLENBQTBCLE1BQTFCLEVBQWtDLEtBQWxDO0FBQ0Esa0JBQUtQLE9BQUwsQ0FBYU8sWUFBYixDQUEwQixVQUExQixFQUFzQyxHQUF0QztBQUNBLGtCQUFLUCxPQUFMLENBQWFRLFNBQWIsQ0FBdUJDLEdBQXZCLG9CQUE0QyxNQUFLQyxXQUFMLENBQWlCQyxLQUFqQixDQUF1QkMsV0FBdkIsR0FBcUNDLE9BQXJDLENBQTZDLElBQTdDLEVBQW1ELEdBQW5ELENBQTVDOztBQUVBLGtCQUFLYixPQUFMLENBQWFjLFNBQWIsR0FBeUJYLFFBQVNDLGVBQWUsSUFBaEIsR0FBd0IsMERBQXhCLEdBQXFGLEVBQTdGLENBQXpCOztBQUVBLGdCQUFJQSxlQUFlLEtBQW5CLEVBQTBCO0FBQ3RCLHNCQUFLSixPQUFMLENBQWFlLGdCQUFiLENBQThCLE9BQTlCLEVBQXVDLE1BQUtDLEtBQTVDO0FBQ0gsYUFGRCxNQUVPO0FBQ0gsc0JBQUtoQixPQUFMLENBQWFlLGdCQUFiLENBQThCLE9BQTlCLEVBQXVDLFlBQU07QUFDekMsd0JBQUksTUFBS2YsT0FBTCxDQUFhUSxTQUFiLENBQXVCUyxRQUF2QixDQUFnQyxRQUFoQyxDQUFKLEVBQStDO0FBQzNDLHFDQUFRQyxJQUFSLENBQWEsdUJBQWI7QUFDSCxxQkFGRCxNQUVPO0FBQ0gscUNBQVFBLElBQVIsQ0FBYSxxQkFBYixTQUEwQ2YsSUFBMUMsRUFBZ0QsTUFBS2EsS0FBTCxFQUFoRDtBQUNIO0FBQ0osaUJBTkQ7QUFPSDs7QUFFRCxrQkFBS2YsU0FBTCxHQUFpQkksU0FBU0MsYUFBVCxDQUF1QixJQUF2QixDQUFqQjs7QUFFQSxrQkFBS1IsY0FBTCxDQUFvQnFCLFdBQXBCLENBQWdDLE1BQUtuQixPQUFyQztBQUNBLGtCQUFLRixjQUFMLENBQW9CcUIsV0FBcEIsQ0FBZ0MsTUFBS2xCLFNBQXJDO0FBQ0gsU0F4QkQ7O0FBMEJBLGFBQUttQixJQUFMOztBQUVBbEIsZUFBTyxLQUFLUSxXQUFMLENBQWlCQyxLQUF4QixFQUErQixLQUFLRCxXQUFMLENBQWlCTixVQUFoRDtBQUNIOzs7OytCQUVNLENBQUU7OztnQ0FFRCxDQUFFOzs7aUNBRUQ7QUFDTCxpQkFBS0osT0FBTCxDQUFhUSxTQUFiLENBQXVCQyxHQUF2QixDQUEyQixRQUEzQjtBQUNBLGlCQUFLVCxPQUFMLENBQWFRLFNBQWIsQ0FBdUJhLE1BQXZCLENBQThCLGNBQTlCO0FBQ0g7OzttQ0FFVTtBQUNQLGlCQUFLckIsT0FBTCxDQUFhUSxTQUFiLENBQXVCYSxNQUF2QixDQUE4QixRQUE5QjtBQUNBLGlCQUFLckIsT0FBTCxDQUFhUSxTQUFiLENBQXVCYSxNQUF2QixDQUE4QixjQUE5QjtBQUNIOzs7K0JBRU07QUFDSCxpQkFBS3JCLE9BQUwsQ0FBYVEsU0FBYixDQUF1QmEsTUFBdkIsQ0FBOEIsUUFBOUI7QUFDQSxpQkFBS3JCLE9BQUwsQ0FBYVEsU0FBYixDQUF1QkMsR0FBdkIsQ0FBMkIsY0FBM0I7QUFDSDs7O21DQUVVYSxPLEVBQVM7QUFDaEIsZ0JBQUssUUFBT0EsT0FBUCx5Q0FBT0EsT0FBUCxPQUFtQixRQUFwQixJQUFrQ0EsUUFBUUMsU0FBUixLQUFzQkMsU0FBNUQsRUFBd0U7QUFDcEUscUJBQUt2QixTQUFMLENBQWVhLFNBQWYsR0FBMkIsRUFBM0I7QUFDQSxxQkFBS2IsU0FBTCxDQUFla0IsV0FBZixDQUEyQkcsT0FBM0I7QUFDQTtBQUNIOztBQUVELGlCQUFLckIsU0FBTCxDQUFlYSxTQUFmLEdBQTJCUSxPQUEzQjtBQUNIOzs7a0NBRWtCO0FBQUEsZ0JBQVhuQixJQUFXLHVFQUFKLEVBQUk7O0FBQ2ZBLG1CQUFPQSx3QkFBc0IsS0FBS08sV0FBTCxDQUFpQkMsS0FBOUM7O0FBRUEsZ0JBQU1jLFVBQVVwQixTQUFTQyxhQUFULENBQXVCLEtBQXZCLENBQWhCO0FBQ0FtQixvQkFBUWpCLFNBQVIsQ0FBa0JDLEdBQWxCLENBQXNCLHVCQUF0QjtBQUNBZ0Isb0JBQVFYLFNBQVIsNENBQTJEWCxJQUEzRDs7QUFFQSxpQkFBS3VCLFVBQUwsQ0FBZ0JELE9BQWhCO0FBQ0g7OztzQ0FFYSxDQUFFOzs7Ozs7QUFoRkM1QixPLENBQ1ZjLEssR0FBUSxlO0FBREVkLE8sQ0FFVk8sVSxHQUFhLEs7a0JBRkhQLE8iLCJmaWxlIjoiNS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBlbWl0dGVyIGZyb20gJy4uL0VFJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2lkZWJhciB7XG4gICAgc3RhdGljIHRpdGxlID0gJ1RJVExFIE5PVCBTRVQnO1xuICAgIHN0YXRpYyBleHBhbmRhYmxlID0gZmFsc2U7XG5cbiAgICBjb25zdHJ1Y3RvcihzaWRlYmFyV3JhcHBlciwgY29uZmlnID0ge30pIHtcbiAgICAgICAgdGhpcy5zaWRlYmFyV3JhcHBlciA9IHNpZGViYXJXcmFwcGVyO1xuICAgICAgICB0aGlzLmNvbmZpZyA9IGNvbmZpZyB8fCB7fTtcbiAgICAgICAgdGhpcy50aXRsZUVsID0gbnVsbDtcbiAgICAgICAgdGhpcy5jb250ZW50RWwgPSBudWxsO1xuICAgICAgICBcbiAgICAgICAgY29uc3QgcmVuZGVyID0gKHRleHQsIGV4cGFuZGFibGUgPSBmYWxzZSkgPT4ge1xuICAgICAgICAgICAgdGhpcy50aXRsZUVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZHQnKTtcbiAgICAgICAgICAgIHRoaXMudGl0bGVFbC5zZXRBdHRyaWJ1dGUoJ3JvbGUnLCAndGFiJyk7XG4gICAgICAgICAgICB0aGlzLnRpdGxlRWwuc2V0QXR0cmlidXRlKCd0YWJpbmRleCcsICcwJyk7XG4gICAgICAgICAgICB0aGlzLnRpdGxlRWwuY2xhc3NMaXN0LmFkZChgZnJlZC0tc2lkZWJhcl8ke3RoaXMuY29uc3RydWN0b3IudGl0bGUudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC8gL2csICdfJyl9YCk7XG5cbiAgICAgICAgICAgIHRoaXMudGl0bGVFbC5pbm5lckhUTUwgPSB0ZXh0ICsgKChleHBhbmRhYmxlID09PSB0cnVlKSA/ICc8aSBjbGFzcz1cImZyZWQtLWFuZ2xlLXJpZ2h0IGZyZWQtLWFjY29yZGlvbl90b2dnbGVcIj48L2k+JyA6ICcnKTtcblxuICAgICAgICAgICAgaWYgKGV4cGFuZGFibGUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy50aXRsZUVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5jbGljayk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMudGl0bGVFbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMudGl0bGVFbC5jbGFzc0xpc3QuY29udGFpbnMoJ2FjdGl2ZScpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbWl0dGVyLmVtaXQoJ2ZyZWQtc2lkZWJhci1jb2xsYXBzZScsIHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgZW1pdHRlci5lbWl0KCdmcmVkLXNpZGViYXItZXhwYW5kJywgdGhpcywgdGV4dCwgdGhpcy5jbGljaygpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLmNvbnRlbnRFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RkJyk7XG5cbiAgICAgICAgICAgIHRoaXMuc2lkZWJhcldyYXBwZXIuYXBwZW5kQ2hpbGQodGhpcy50aXRsZUVsKTtcbiAgICAgICAgICAgIHRoaXMuc2lkZWJhcldyYXBwZXIuYXBwZW5kQ2hpbGQodGhpcy5jb250ZW50RWwpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMuaW5pdCgpO1xuXG4gICAgICAgIHJlbmRlcih0aGlzLmNvbnN0cnVjdG9yLnRpdGxlLCB0aGlzLmNvbnN0cnVjdG9yLmV4cGFuZGFibGUpO1xuICAgIH1cblxuICAgIGluaXQoKSB7fVxuXG4gICAgY2xpY2soKSB7fVxuICAgIFxuICAgIGV4cGFuZCgpIHtcbiAgICAgICAgdGhpcy50aXRsZUVsLmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScpO1xuICAgICAgICB0aGlzLnRpdGxlRWwuY2xhc3NMaXN0LnJlbW92ZSgnZnJlZC0taGlkZGVuJyk7XG4gICAgfVxuICAgIFxuICAgIGNvbGxhcHNlKCkge1xuICAgICAgICB0aGlzLnRpdGxlRWwuY2xhc3NMaXN0LnJlbW92ZSgnYWN0aXZlJyk7XG4gICAgICAgIHRoaXMudGl0bGVFbC5jbGFzc0xpc3QucmVtb3ZlKCdmcmVkLS1oaWRkZW4nKTtcbiAgICB9XG4gICAgXG4gICAgaGlkZSgpIHtcbiAgICAgICAgdGhpcy50aXRsZUVsLmNsYXNzTGlzdC5yZW1vdmUoJ2FjdGl2ZScpO1xuICAgICAgICB0aGlzLnRpdGxlRWwuY2xhc3NMaXN0LmFkZCgnZnJlZC0taGlkZGVuJyk7XG4gICAgfVxuICAgIFxuICAgIHNldENvbnRlbnQoY29udGVudCkge1xuICAgICAgICBpZiAoKHR5cGVvZiBjb250ZW50ID09PSAnb2JqZWN0JykgJiYgKGNvbnRlbnQub3V0ZXJIVE1MICE9PSB1bmRlZmluZWQpKSB7XG4gICAgICAgICAgICB0aGlzLmNvbnRlbnRFbC5pbm5lckhUTUwgPSAnJztcbiAgICAgICAgICAgIHRoaXMuY29udGVudEVsLmFwcGVuZENoaWxkKGNvbnRlbnQpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICB0aGlzLmNvbnRlbnRFbC5pbm5lckhUTUwgPSBjb250ZW50O1xuICAgIH1cbiAgICBcbiAgICBsb2FkaW5nKHRleHQgPSAnJykge1xuICAgICAgICB0ZXh0ID0gdGV4dCB8fCBgUmV0cmlldmluZyAke3RoaXMuY29uc3RydWN0b3IudGl0bGV9YDtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHdyYXBwZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgd3JhcHBlci5jbGFzc0xpc3QuYWRkKCdmcmVkLS1sb2FkaW5nX3dyYXBwZXInKTtcbiAgICAgICAgd3JhcHBlci5pbm5lckhUTUwgPSBgPHNwYW4gY2xhc3M9XCJmcmVkLS1sb2FkaW5nXCI+PC9zcGFuPiAke3RleHR9YDtcbiAgICAgICAgXG4gICAgICAgIHRoaXMuc2V0Q29udGVudCh3cmFwcGVyKTtcbiAgICB9XG5cbiAgICBhZnRlckV4cGFuZCgpIHt9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9fYnVpbGQvYXNzZXRzL2pzL0NvbXBvbmVudHMvU2lkZWJhci5qcyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

	eval("// the whatwg-fetch polyfill installs the fetch() function\n// on the global object (window or self)\n//\n// Return that as the export for use in Webpack, Browserify etc.\n__webpack_require__(7);\nmodule.exports = self.fetch.bind(self);\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2lzb21vcnBoaWMtZmV0Y2gvZmV0Y2gtbnBtLWJyb3dzZXJpZnkuanM/NzcyMyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiNi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHRoZSB3aGF0d2ctZmV0Y2ggcG9seWZpbGwgaW5zdGFsbHMgdGhlIGZldGNoKCkgZnVuY3Rpb25cbi8vIG9uIHRoZSBnbG9iYWwgb2JqZWN0ICh3aW5kb3cgb3Igc2VsZilcbi8vXG4vLyBSZXR1cm4gdGhhdCBhcyB0aGUgZXhwb3J0IGZvciB1c2UgaW4gV2VicGFjaywgQnJvd3NlcmlmeSBldGMuXG5yZXF1aXJlKCd3aGF0d2ctZmV0Y2gnKTtcbm1vZHVsZS5leHBvcnRzID0gc2VsZi5mZXRjaC5iaW5kKHNlbGYpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2lzb21vcnBoaWMtZmV0Y2gvZmV0Y2gtbnBtLWJyb3dzZXJpZnkuanNcbi8vIG1vZHVsZSBpZCA9IDZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 7 */
/***/ (function(module, exports) {

	eval("(function(self) {\n  'use strict';\n\n  if (self.fetch) {\n    return\n  }\n\n  var support = {\n    searchParams: 'URLSearchParams' in self,\n    iterable: 'Symbol' in self && 'iterator' in Symbol,\n    blob: 'FileReader' in self && 'Blob' in self && (function() {\n      try {\n        new Blob()\n        return true\n      } catch(e) {\n        return false\n      }\n    })(),\n    formData: 'FormData' in self,\n    arrayBuffer: 'ArrayBuffer' in self\n  }\n\n  if (support.arrayBuffer) {\n    var viewClasses = [\n      '[object Int8Array]',\n      '[object Uint8Array]',\n      '[object Uint8ClampedArray]',\n      '[object Int16Array]',\n      '[object Uint16Array]',\n      '[object Int32Array]',\n      '[object Uint32Array]',\n      '[object Float32Array]',\n      '[object Float64Array]'\n    ]\n\n    var isDataView = function(obj) {\n      return obj && DataView.prototype.isPrototypeOf(obj)\n    }\n\n    var isArrayBufferView = ArrayBuffer.isView || function(obj) {\n      return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1\n    }\n  }\n\n  function normalizeName(name) {\n    if (typeof name !== 'string') {\n      name = String(name)\n    }\n    if (/[^a-z0-9\\-#$%&'*+.\\^_`|~]/i.test(name)) {\n      throw new TypeError('Invalid character in header field name')\n    }\n    return name.toLowerCase()\n  }\n\n  function normalizeValue(value) {\n    if (typeof value !== 'string') {\n      value = String(value)\n    }\n    return value\n  }\n\n  // Build a destructive iterator for the value list\n  function iteratorFor(items) {\n    var iterator = {\n      next: function() {\n        var value = items.shift()\n        return {done: value === undefined, value: value}\n      }\n    }\n\n    if (support.iterable) {\n      iterator[Symbol.iterator] = function() {\n        return iterator\n      }\n    }\n\n    return iterator\n  }\n\n  function Headers(headers) {\n    this.map = {}\n\n    if (headers instanceof Headers) {\n      headers.forEach(function(value, name) {\n        this.append(name, value)\n      }, this)\n    } else if (Array.isArray(headers)) {\n      headers.forEach(function(header) {\n        this.append(header[0], header[1])\n      }, this)\n    } else if (headers) {\n      Object.getOwnPropertyNames(headers).forEach(function(name) {\n        this.append(name, headers[name])\n      }, this)\n    }\n  }\n\n  Headers.prototype.append = function(name, value) {\n    name = normalizeName(name)\n    value = normalizeValue(value)\n    var oldValue = this.map[name]\n    this.map[name] = oldValue ? oldValue+','+value : value\n  }\n\n  Headers.prototype['delete'] = function(name) {\n    delete this.map[normalizeName(name)]\n  }\n\n  Headers.prototype.get = function(name) {\n    name = normalizeName(name)\n    return this.has(name) ? this.map[name] : null\n  }\n\n  Headers.prototype.has = function(name) {\n    return this.map.hasOwnProperty(normalizeName(name))\n  }\n\n  Headers.prototype.set = function(name, value) {\n    this.map[normalizeName(name)] = normalizeValue(value)\n  }\n\n  Headers.prototype.forEach = function(callback, thisArg) {\n    for (var name in this.map) {\n      if (this.map.hasOwnProperty(name)) {\n        callback.call(thisArg, this.map[name], name, this)\n      }\n    }\n  }\n\n  Headers.prototype.keys = function() {\n    var items = []\n    this.forEach(function(value, name) { items.push(name) })\n    return iteratorFor(items)\n  }\n\n  Headers.prototype.values = function() {\n    var items = []\n    this.forEach(function(value) { items.push(value) })\n    return iteratorFor(items)\n  }\n\n  Headers.prototype.entries = function() {\n    var items = []\n    this.forEach(function(value, name) { items.push([name, value]) })\n    return iteratorFor(items)\n  }\n\n  if (support.iterable) {\n    Headers.prototype[Symbol.iterator] = Headers.prototype.entries\n  }\n\n  function consumed(body) {\n    if (body.bodyUsed) {\n      return Promise.reject(new TypeError('Already read'))\n    }\n    body.bodyUsed = true\n  }\n\n  function fileReaderReady(reader) {\n    return new Promise(function(resolve, reject) {\n      reader.onload = function() {\n        resolve(reader.result)\n      }\n      reader.onerror = function() {\n        reject(reader.error)\n      }\n    })\n  }\n\n  function readBlobAsArrayBuffer(blob) {\n    var reader = new FileReader()\n    var promise = fileReaderReady(reader)\n    reader.readAsArrayBuffer(blob)\n    return promise\n  }\n\n  function readBlobAsText(blob) {\n    var reader = new FileReader()\n    var promise = fileReaderReady(reader)\n    reader.readAsText(blob)\n    return promise\n  }\n\n  function readArrayBufferAsText(buf) {\n    var view = new Uint8Array(buf)\n    var chars = new Array(view.length)\n\n    for (var i = 0; i < view.length; i++) {\n      chars[i] = String.fromCharCode(view[i])\n    }\n    return chars.join('')\n  }\n\n  function bufferClone(buf) {\n    if (buf.slice) {\n      return buf.slice(0)\n    } else {\n      var view = new Uint8Array(buf.byteLength)\n      view.set(new Uint8Array(buf))\n      return view.buffer\n    }\n  }\n\n  function Body() {\n    this.bodyUsed = false\n\n    this._initBody = function(body) {\n      this._bodyInit = body\n      if (!body) {\n        this._bodyText = ''\n      } else if (typeof body === 'string') {\n        this._bodyText = body\n      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n        this._bodyBlob = body\n      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n        this._bodyFormData = body\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this._bodyText = body.toString()\n      } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n        this._bodyArrayBuffer = bufferClone(body.buffer)\n        // IE 10-11 can't handle a DataView body.\n        this._bodyInit = new Blob([this._bodyArrayBuffer])\n      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n        this._bodyArrayBuffer = bufferClone(body)\n      } else {\n        throw new Error('unsupported BodyInit type')\n      }\n\n      if (!this.headers.get('content-type')) {\n        if (typeof body === 'string') {\n          this.headers.set('content-type', 'text/plain;charset=UTF-8')\n        } else if (this._bodyBlob && this._bodyBlob.type) {\n          this.headers.set('content-type', this._bodyBlob.type)\n        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8')\n        }\n      }\n    }\n\n    if (support.blob) {\n      this.blob = function() {\n        var rejected = consumed(this)\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return Promise.resolve(this._bodyBlob)\n        } else if (this._bodyArrayBuffer) {\n          return Promise.resolve(new Blob([this._bodyArrayBuffer]))\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as blob')\n        } else {\n          return Promise.resolve(new Blob([this._bodyText]))\n        }\n      }\n\n      this.arrayBuffer = function() {\n        if (this._bodyArrayBuffer) {\n          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)\n        } else {\n          return this.blob().then(readBlobAsArrayBuffer)\n        }\n      }\n    }\n\n    this.text = function() {\n      var rejected = consumed(this)\n      if (rejected) {\n        return rejected\n      }\n\n      if (this._bodyBlob) {\n        return readBlobAsText(this._bodyBlob)\n      } else if (this._bodyArrayBuffer) {\n        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))\n      } else if (this._bodyFormData) {\n        throw new Error('could not read FormData body as text')\n      } else {\n        return Promise.resolve(this._bodyText)\n      }\n    }\n\n    if (support.formData) {\n      this.formData = function() {\n        return this.text().then(decode)\n      }\n    }\n\n    this.json = function() {\n      return this.text().then(JSON.parse)\n    }\n\n    return this\n  }\n\n  // HTTP methods whose capitalization should be normalized\n  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']\n\n  function normalizeMethod(method) {\n    var upcased = method.toUpperCase()\n    return (methods.indexOf(upcased) > -1) ? upcased : method\n  }\n\n  function Request(input, options) {\n    options = options || {}\n    var body = options.body\n\n    if (input instanceof Request) {\n      if (input.bodyUsed) {\n        throw new TypeError('Already read')\n      }\n      this.url = input.url\n      this.credentials = input.credentials\n      if (!options.headers) {\n        this.headers = new Headers(input.headers)\n      }\n      this.method = input.method\n      this.mode = input.mode\n      if (!body && input._bodyInit != null) {\n        body = input._bodyInit\n        input.bodyUsed = true\n      }\n    } else {\n      this.url = String(input)\n    }\n\n    this.credentials = options.credentials || this.credentials || 'omit'\n    if (options.headers || !this.headers) {\n      this.headers = new Headers(options.headers)\n    }\n    this.method = normalizeMethod(options.method || this.method || 'GET')\n    this.mode = options.mode || this.mode || null\n    this.referrer = null\n\n    if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n      throw new TypeError('Body not allowed for GET or HEAD requests')\n    }\n    this._initBody(body)\n  }\n\n  Request.prototype.clone = function() {\n    return new Request(this, { body: this._bodyInit })\n  }\n\n  function decode(body) {\n    var form = new FormData()\n    body.trim().split('&').forEach(function(bytes) {\n      if (bytes) {\n        var split = bytes.split('=')\n        var name = split.shift().replace(/\\+/g, ' ')\n        var value = split.join('=').replace(/\\+/g, ' ')\n        form.append(decodeURIComponent(name), decodeURIComponent(value))\n      }\n    })\n    return form\n  }\n\n  function parseHeaders(rawHeaders) {\n    var headers = new Headers()\n    rawHeaders.split(/\\r?\\n/).forEach(function(line) {\n      var parts = line.split(':')\n      var key = parts.shift().trim()\n      if (key) {\n        var value = parts.join(':').trim()\n        headers.append(key, value)\n      }\n    })\n    return headers\n  }\n\n  Body.call(Request.prototype)\n\n  function Response(bodyInit, options) {\n    if (!options) {\n      options = {}\n    }\n\n    this.type = 'default'\n    this.status = 'status' in options ? options.status : 200\n    this.ok = this.status >= 200 && this.status < 300\n    this.statusText = 'statusText' in options ? options.statusText : 'OK'\n    this.headers = new Headers(options.headers)\n    this.url = options.url || ''\n    this._initBody(bodyInit)\n  }\n\n  Body.call(Response.prototype)\n\n  Response.prototype.clone = function() {\n    return new Response(this._bodyInit, {\n      status: this.status,\n      statusText: this.statusText,\n      headers: new Headers(this.headers),\n      url: this.url\n    })\n  }\n\n  Response.error = function() {\n    var response = new Response(null, {status: 0, statusText: ''})\n    response.type = 'error'\n    return response\n  }\n\n  var redirectStatuses = [301, 302, 303, 307, 308]\n\n  Response.redirect = function(url, status) {\n    if (redirectStatuses.indexOf(status) === -1) {\n      throw new RangeError('Invalid status code')\n    }\n\n    return new Response(null, {status: status, headers: {location: url}})\n  }\n\n  self.Headers = Headers\n  self.Request = Request\n  self.Response = Response\n\n  self.fetch = function(input, init) {\n    return new Promise(function(resolve, reject) {\n      var request = new Request(input, init)\n      var xhr = new XMLHttpRequest()\n\n      xhr.onload = function() {\n        var options = {\n          status: xhr.status,\n          statusText: xhr.statusText,\n          headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n        }\n        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL')\n        var body = 'response' in xhr ? xhr.response : xhr.responseText\n        resolve(new Response(body, options))\n      }\n\n      xhr.onerror = function() {\n        reject(new TypeError('Network request failed'))\n      }\n\n      xhr.ontimeout = function() {\n        reject(new TypeError('Network request failed'))\n      }\n\n      xhr.open(request.method, request.url, true)\n\n      if (request.credentials === 'include') {\n        xhr.withCredentials = true\n      }\n\n      if ('responseType' in xhr && support.blob) {\n        xhr.responseType = 'blob'\n      }\n\n      request.headers.forEach(function(value, name) {\n        xhr.setRequestHeader(name, value)\n      })\n\n      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit)\n    })\n  }\n  self.fetch.polyfill = true\n})(typeof self !== 'undefined' ? self : this);\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

	eval("/*! choices.js v3.0.4 | (c) 2018 Josh Johnson | https://github.com/jshjohnson/Choices#readme */ \n!function(e,t){ true?module.exports=t():\"function\"==typeof define&&define.amd?define([],t):\"object\"==typeof exports?exports.Choices=t():e.Choices=t()}(this,function(){return function(e){function t(n){if(i[n])return i[n].exports;var s=i[n]={exports:{},id:n,loaded:!1};return e[n].call(s.exports,s,s.exports,t),s.loaded=!0,s.exports}var i={};return t.m=e,t.c=i,t.p=\"/assets/scripts/dist/\",t(0)}([function(e,t,i){e.exports=i(1)},function(e,t,i){\"use strict\";function n(e){return e&&e.__esModule?e:{default:e}}function s(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function o(e){if(Array.isArray(e)){for(var t=0,i=Array(e.length);t<e.length;t++)i[t]=e[t];return i}return Array.from(e)}function r(e,t){if(!(e instanceof t))throw new TypeError(\"Cannot call a class as a function\")}var a=function(){function e(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,\"value\"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,i,n){return i&&e(t.prototype,i),n&&e(t,n),t}}(),c=i(2),l=n(c),h=i(3),u=n(h),d=i(4),f=n(d),p=i(31),v=i(32);i(33);var m=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:\"[data-choice]\",i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(r(this,e),(0,v.isType)(\"String\",t)){var n=document.querySelectorAll(t);if(n.length>1)for(var s=1;s<n.length;s++){var o=n[s];new e(o,i)}}var a={silent:!1,items:[],choices:[],renderChoiceLimit:-1,maxItemCount:-1,addItems:!0,removeItems:!0,removeItemButton:!1,editItems:!1,duplicateItems:!0,delimiter:\",\",paste:!0,searchEnabled:!0,searchChoices:!0,searchFloor:1,searchResultLimit:4,searchFields:[\"label\",\"value\"],position:\"auto\",resetScrollPosition:!0,regexFilter:null,shouldSort:!0,shouldSortItems:!1,sortFilter:v.sortByAlpha,placeholder:!0,placeholderValue:null,searchPlaceholderValue:null,prependValue:null,appendValue:null,renderSelectedChoices:\"auto\",loadingText:\"Loading...\",noResultsText:\"No results found\",noChoicesText:\"No choices to choose from\",itemSelectText:\"Press to select\",addItemText:function(e){return'Press Enter to add <b>\"'+(0,v.stripHTML)(e)+'\"</b>'},maxItemText:function(e){return\"Only \"+e+\" values can be added.\"},itemComparer:function(e,t){return e===t},uniqueItemText:\"Only unique values can be added.\",classNames:{containerOuter:\"choices\",containerInner:\"choices__inner\",input:\"choices__input\",inputCloned:\"choices__input--cloned\",list:\"choices__list\",listItems:\"choices__list--multiple\",listSingle:\"choices__list--single\",listDropdown:\"choices__list--dropdown\",item:\"choices__item\",itemSelectable:\"choices__item--selectable\",itemDisabled:\"choices__item--disabled\",itemChoice:\"choices__item--choice\",placeholder:\"choices__placeholder\",group:\"choices__group\",groupHeading:\"choices__heading\",button:\"choices__button\",activeState:\"is-active\",focusState:\"is-focused\",openState:\"is-open\",disabledState:\"is-disabled\",highlightedState:\"is-highlighted\",hiddenState:\"is-hidden\",flippedState:\"is-flipped\",loadingState:\"is-loading\",noResults:\"has-no-results\",noChoices:\"has-no-choices\"},fuseOptions:{include:\"score\"},callbackOnInit:null,callbackOnCreateTemplates:null};if(this.idNames={itemChoice:\"item-choice\"},this.config=(0,v.extend)(a,i),\"auto\"!==this.config.renderSelectedChoices&&\"always\"!==this.config.renderSelectedChoices&&(this.config.silent||console.warn(\"renderSelectedChoices: Possible values are 'auto' and 'always'. Falling back to 'auto'.\"),this.config.renderSelectedChoices=\"auto\"),this.store=new f.default(this.render),this.initialised=!1,this.currentState={},this.prevState={},this.currentValue=\"\",this.element=t,this.passedElement=(0,v.isType)(\"String\",t)?document.querySelector(t):t,!this.passedElement)return void(this.config.silent||console.error(\"Passed element not found\"));this.isTextElement=\"text\"===this.passedElement.type,this.isSelectOneElement=\"select-one\"===this.passedElement.type,this.isSelectMultipleElement=\"select-multiple\"===this.passedElement.type,this.isSelectElement=this.isSelectOneElement||this.isSelectMultipleElement,this.isValidElementType=this.isTextElement||this.isSelectElement,this.isIe11=!(!navigator.userAgent.match(/Trident/)||!navigator.userAgent.match(/rv[ :]11/)),this.isScrollingOnIe=!1,this.config.shouldSortItems===!0&&this.isSelectOneElement&&(this.config.silent||console.warn(\"shouldSortElements: Type of passed element is 'select-one', falling back to false.\")),this.highlightPosition=0,this.canSearch=this.config.searchEnabled,this.placeholder=!1,this.isSelectOneElement||(this.placeholder=!!this.config.placeholder&&(this.config.placeholderValue||this.passedElement.getAttribute(\"placeholder\"))),this.presetChoices=this.config.choices,this.presetItems=this.config.items,this.passedElement.value&&(this.presetItems=this.presetItems.concat(this.passedElement.value.split(this.config.delimiter))),this.baseId=(0,v.generateId)(this.passedElement,\"choices-\"),this.render=this.render.bind(this),this._onFocus=this._onFocus.bind(this),this._onBlur=this._onBlur.bind(this),this._onKeyUp=this._onKeyUp.bind(this),this._onKeyDown=this._onKeyDown.bind(this),this._onClick=this._onClick.bind(this),this._onTouchMove=this._onTouchMove.bind(this),this._onTouchEnd=this._onTouchEnd.bind(this),this._onMouseDown=this._onMouseDown.bind(this),this._onMouseOver=this._onMouseOver.bind(this),this._onPaste=this._onPaste.bind(this),this._onInput=this._onInput.bind(this),this.wasTap=!0;var c=\"classList\"in document.documentElement;c||this.config.silent||console.error(\"Choices: Your browser doesn't support Choices\");var l=(0,v.isElement)(this.passedElement)&&this.isValidElementType;if(l){if(\"active\"===this.passedElement.getAttribute(\"data-choice\"))return;this.init()}else this.config.silent||console.error(\"Incompatible input passed\")}return a(e,[{key:\"init\",value:function(){if(this.initialised!==!0){var e=this.config.callbackOnInit;this.initialised=!0,this._createTemplates(),this._createInput(),this.store.subscribe(this.render),this.render(),this._addEventListeners(),e&&(0,v.isType)(\"Function\",e)&&e.call(this)}}},{key:\"destroy\",value:function(){if(this.initialised!==!1){this._removeEventListeners(),this.passedElement.classList.remove(this.config.classNames.input,this.config.classNames.hiddenState),this.passedElement.removeAttribute(\"tabindex\");var e=this.passedElement.getAttribute(\"data-choice-orig-style\");Boolean(e)?(this.passedElement.removeAttribute(\"data-choice-orig-style\"),this.passedElement.setAttribute(\"style\",e)):this.passedElement.removeAttribute(\"style\"),this.passedElement.removeAttribute(\"aria-hidden\"),this.passedElement.removeAttribute(\"data-choice\"),this.passedElement.value=this.passedElement.value,this.containerOuter.parentNode.insertBefore(this.passedElement,this.containerOuter),this.containerOuter.parentNode.removeChild(this.containerOuter),this.clearStore(),this.config.templates=null,this.initialised=!1}}},{key:\"renderGroups\",value:function(e,t,i){var n=this,s=i||document.createDocumentFragment(),o=this.config.sortFilter;return this.config.shouldSort&&e.sort(o),e.forEach(function(e){var i=t.filter(function(t){return n.isSelectOneElement?t.groupId===e.id:t.groupId===e.id&&!t.selected});if(i.length>=1){var o=n._getTemplate(\"choiceGroup\",e);s.appendChild(o),n.renderChoices(i,s,!0)}}),s}},{key:\"renderChoices\",value:function(e,t){var i=this,n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],s=t||document.createDocumentFragment(),r=this.config,a=r.renderSelectedChoices,c=r.searchResultLimit,l=r.renderChoiceLimit,h=this.isSearching?v.sortByScore:this.config.sortFilter,u=function(e){var t=\"auto\"!==a||(i.isSelectOneElement||!e.selected);if(t){var n=i._getTemplate(\"choice\",e);s.appendChild(n)}},d=e;\"auto\"!==a||this.isSelectOneElement||(d=e.filter(function(e){return!e.selected}));var f=d.reduce(function(e,t){return t.placeholder?e.placeholderChoices.push(t):e.normalChoices.push(t),e},{placeholderChoices:[],normalChoices:[]}),p=f.placeholderChoices,m=f.normalChoices;(this.config.shouldSort||this.isSearching)&&m.sort(h);var g=d.length,y=[].concat(o(p),o(m));this.isSearching?g=c:l>0&&!n&&(g=l);for(var b=0;b<g;b++)y[b]&&u(y[b]);return s}},{key:\"renderItems\",value:function(e){var t=this,i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,n=i||document.createDocumentFragment();if(this.config.shouldSortItems&&!this.isSelectOneElement&&e.sort(this.config.sortFilter),this.isTextElement){var s=this.store.getItemsReducedToValues(e),o=s.join(this.config.delimiter);this.passedElement.setAttribute(\"value\",o),this.passedElement.value=o}else{var r=document.createDocumentFragment();e.forEach(function(e){var i=t._getTemplate(\"option\",e);r.appendChild(i)}),this.passedElement.innerHTML=\"\",this.passedElement.appendChild(r)}return e.forEach(function(e){var i=t._getTemplate(\"item\",e);n.appendChild(i)}),n}},{key:\"render\",value:function(){if(!this.store.isLoading()&&(this.currentState=this.store.getState(),this.currentState!==this.prevState)){if((this.currentState.choices!==this.prevState.choices||this.currentState.groups!==this.prevState.groups||this.currentState.items!==this.prevState.items)&&this.isSelectElement){var e=this.store.getGroupsFilteredByActive(),t=this.store.getChoicesFilteredByActive(),i=document.createDocumentFragment();this.choiceList.innerHTML=\"\",this.config.resetScrollPosition&&(this.choiceList.scrollTop=0),e.length>=1&&this.isSearching!==!0?i=this.renderGroups(e,t,i):t.length>=1&&(i=this.renderChoices(t,i));var n=this.store.getItemsFilteredByActive(),s=this._canAddItem(n,this.input.value);if(i.childNodes&&i.childNodes.length>0)s.response?(this.choiceList.appendChild(i),this._highlightChoice()):this.choiceList.appendChild(this._getTemplate(\"notice\",s.notice));else{var o=void 0,r=void 0;this.isSearching?(r=(0,v.isType)(\"Function\",this.config.noResultsText)?this.config.noResultsText():this.config.noResultsText,o=this._getTemplate(\"notice\",r,\"no-results\")):(r=(0,v.isType)(\"Function\",this.config.noChoicesText)?this.config.noChoicesText():this.config.noChoicesText,o=this._getTemplate(\"notice\",r,\"no-choices\")),this.choiceList.appendChild(o)}}if(this.currentState.items!==this.prevState.items){var a=this.store.getItemsFilteredByActive();if(this.itemList.innerHTML=\"\",a&&a){var c=this.renderItems(a);c.childNodes&&this.itemList.appendChild(c)}}this.prevState=this.currentState}}},{key:\"highlightItem\",value:function(e){var t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];if(!e)return this;var i=e.id,n=e.groupId,s=n>=0?this.store.getGroupById(n):null;return this.store.dispatch((0,p.highlightItem)(i,!0)),t&&(s&&s.value?(0,v.triggerEvent)(this.passedElement,\"highlightItem\",{id:i,value:e.value,label:e.label,groupValue:s.value}):(0,v.triggerEvent)(this.passedElement,\"highlightItem\",{id:i,value:e.value,label:e.label})),this}},{key:\"unhighlightItem\",value:function(e){if(!e)return this;var t=e.id,i=e.groupId,n=i>=0?this.store.getGroupById(i):null;return this.store.dispatch((0,p.highlightItem)(t,!1)),n&&n.value?(0,v.triggerEvent)(this.passedElement,\"unhighlightItem\",{id:t,value:e.value,label:e.label,groupValue:n.value}):(0,v.triggerEvent)(this.passedElement,\"unhighlightItem\",{id:t,value:e.value,label:e.label}),this}},{key:\"highlightAll\",value:function(){var e=this,t=this.store.getItems();return t.forEach(function(t){e.highlightItem(t)}),this}},{key:\"unhighlightAll\",value:function(){var e=this,t=this.store.getItems();return t.forEach(function(t){e.unhighlightItem(t)}),this}},{key:\"removeItemsByValue\",value:function(e){var t=this;if(!e||!(0,v.isType)(\"String\",e))return this;var i=this.store.getItemsFilteredByActive();return i.forEach(function(i){i.value===e&&t._removeItem(i)}),this}},{key:\"removeActiveItems\",value:function(e){var t=this,i=this.store.getItemsFilteredByActive();return i.forEach(function(i){i.active&&e!==i.id&&t._removeItem(i)}),this}},{key:\"removeHighlightedItems\",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]&&arguments[0],i=this.store.getItemsFilteredByActive();return i.forEach(function(i){i.highlighted&&i.active&&(e._removeItem(i),t&&e._triggerChange(i.value))}),this}},{key:\"showDropdown\",value:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=document.body,i=document.documentElement,n=Math.max(t.scrollHeight,t.offsetHeight,i.clientHeight,i.scrollHeight,i.offsetHeight);this.containerOuter.classList.add(this.config.classNames.openState),this.containerOuter.setAttribute(\"aria-expanded\",\"true\"),this.dropdown.classList.add(this.config.classNames.activeState),this.dropdown.setAttribute(\"aria-expanded\",\"true\");var s=this.dropdown.getBoundingClientRect(),o=Math.ceil(s.top+window.scrollY+this.dropdown.offsetHeight),r=!1;return\"auto\"===this.config.position?r=o>=n:\"top\"===this.config.position&&(r=!0),r&&this.containerOuter.classList.add(this.config.classNames.flippedState),e&&this.canSearch&&document.activeElement!==this.input&&this.input.focus(),(0,v.triggerEvent)(this.passedElement,\"showDropdown\",{}),this}},{key:\"hideDropdown\",value:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=this.containerOuter.classList.contains(this.config.classNames.flippedState);return this.containerOuter.classList.remove(this.config.classNames.openState),this.containerOuter.setAttribute(\"aria-expanded\",\"false\"),this.dropdown.classList.remove(this.config.classNames.activeState),this.dropdown.setAttribute(\"aria-expanded\",\"false\"),t&&this.containerOuter.classList.remove(this.config.classNames.flippedState),e&&this.canSearch&&document.activeElement===this.input&&this.input.blur(),(0,v.triggerEvent)(this.passedElement,\"hideDropdown\",{}),this}},{key:\"toggleDropdown\",value:function(){var e=this.dropdown.classList.contains(this.config.classNames.activeState);return e?this.hideDropdown():this.showDropdown(!0),this}},{key:\"getValue\",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]&&arguments[0],i=this.store.getItemsFilteredByActive(),n=[];return i.forEach(function(i){e.isTextElement?n.push(t?i.value:i):i.active&&n.push(t?i.value:i)}),this.isSelectOneElement?n[0]:n}},{key:\"setValue\",value:function(e){var t=this;if(this.initialised===!0){var i=[].concat(o(e)),n=function(e){var i=(0,v.getType)(e);if(\"Object\"===i){if(!e.value)return;t.isTextElement?t._addItem(e.value,e.label,e.id,void 0,e.customProperties,e.placeholder):t._addChoice(e.value,e.label,!0,!1,-1,e.customProperties,e.placeholder)}else\"String\"===i&&(t.isTextElement?t._addItem(e):t._addChoice(e,e,!0,!1,-1,null))};i.length>1?i.forEach(function(e){n(e)}):n(i[0])}return this}},{key:\"setValueByChoice\",value:function(e){var t=this;if(!this.isTextElement){var i=this.store.getChoices(),n=(0,v.isType)(\"Array\",e)?e:[e];n.forEach(function(e){var n=i.find(function(i){return t.config.itemComparer(i.value,e)});n?n.selected?t.config.silent||console.warn(\"Attempting to select choice already selected\"):t._addItem(n.value,n.label,n.id,n.groupId,n.customProperties,n.placeholder,n.keyCode):t.config.silent||console.warn(\"Attempting to select choice that does not exist\")})}return this}},{key:\"setChoices\",value:function(e,t,i){var n=this,s=arguments.length>3&&void 0!==arguments[3]&&arguments[3];if(this.initialised===!0&&this.isSelectElement){if(!(0,v.isType)(\"Array\",e)||!t)return this;s&&this._clearChoices(),this._setLoading(!0),e&&e.length&&(this.containerOuter.classList.remove(this.config.classNames.loadingState),e.forEach(function(e){e.choices?n._addGroup(e,e.id||null,t,i):n._addChoice(e[t],e[i],e.selected,e.disabled,void 0,e.customProperties,e.placeholder)})),this._setLoading(!1)}return this}},{key:\"clearStore\",value:function(){return this.store.dispatch((0,p.clearAll)()),this}},{key:\"clearInput\",value:function(){return this.input.value&&(this.input.value=\"\"),this.isSelectOneElement||this._setInputWidth(),!this.isTextElement&&this.config.searchEnabled&&(this.isSearching=!1,this.store.dispatch((0,p.activateChoices)(!0))),this}},{key:\"enable\",value:function(){if(this.initialised){this.passedElement.disabled=!1;var e=this.containerOuter.classList.contains(this.config.classNames.disabledState);e&&(this._addEventListeners(),this.passedElement.removeAttribute(\"disabled\"),this.input.removeAttribute(\"disabled\"),this.containerOuter.classList.remove(this.config.classNames.disabledState),this.containerOuter.removeAttribute(\"aria-disabled\"),this.isSelectOneElement&&this.containerOuter.setAttribute(\"tabindex\",\"0\"))}return this}},{key:\"disable\",value:function(){if(this.initialised){this.passedElement.disabled=!0;var e=!this.containerOuter.classList.contains(this.config.classNames.disabledState);e&&(this._removeEventListeners(),this.passedElement.setAttribute(\"disabled\",\"\"),this.input.setAttribute(\"disabled\",\"\"),this.containerOuter.classList.add(this.config.classNames.disabledState),this.containerOuter.setAttribute(\"aria-disabled\",\"true\"),this.isSelectOneElement&&this.containerOuter.setAttribute(\"tabindex\",\"-1\"))}return this}},{key:\"ajax\",value:function(e){var t=this;return this.initialised===!0&&this.isSelectElement&&(requestAnimationFrame(function(){t._handleLoadingState(!0)}),e(this._ajaxCallback())),this}},{key:\"_triggerChange\",value:function(e){e&&(0,v.triggerEvent)(this.passedElement,\"change\",{value:e})}},{key:\"_handleButtonAction\",value:function(e,t){if(e&&t&&this.config.removeItems&&this.config.removeItemButton){var i=t.parentNode.getAttribute(\"data-id\"),n=e.find(function(e){return e.id===parseInt(i,10)});this._removeItem(n),this._triggerChange(n.value),this.isSelectOneElement&&this._selectPlaceholderChoice()}}},{key:\"_selectPlaceholderChoice\",value:function(){var e=this.store.getPlaceholderChoice();e&&(this._addItem(e.value,e.label,e.id,e.groupId,null,e.placeholder),this._triggerChange(e.value))}},{key:\"_handleItemAction\",value:function(e,t){var i=this,n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];if(e&&t&&this.config.removeItems&&!this.isSelectOneElement){var s=t.getAttribute(\"data-id\");e.forEach(function(e){e.id!==parseInt(s,10)||e.highlighted?n||e.highlighted&&i.unhighlightItem(e):i.highlightItem(e)}),document.activeElement!==this.input&&this.input.focus()}}},{key:\"_handleChoiceAction\",value:function(e,t){if(e&&t){var i=t.getAttribute(\"data-id\"),n=this.store.getChoiceById(i),s=e[0]&&e[0].keyCode?e[0].keyCode:null,o=this.dropdown.classList.contains(this.config.classNames.activeState);if(n.keyCode=s,(0,v.triggerEvent)(this.passedElement,\"choice\",{choice:n}),n&&!n.selected&&!n.disabled){var r=this._canAddItem(e,n.value);r.response&&(this._addItem(n.value,n.label,n.id,n.groupId,n.customProperties,n.placeholder,n.keyCode),this._triggerChange(n.value))}this.clearInput(),o&&this.isSelectOneElement&&(this.hideDropdown(),this.containerOuter.focus())}}},{key:\"_handleBackspace\",value:function(e){if(this.config.removeItems&&e){var t=e[e.length-1],i=e.some(function(e){return e.highlighted});this.config.editItems&&!i&&t?(this.input.value=t.value,this._setInputWidth(),this._removeItem(t),this._triggerChange(t.value)):(i||this.highlightItem(t,!1),this.removeHighlightedItems(!0))}}},{key:\"_canAddItem\",value:function(e,t){var i=!0,n=(0,v.isType)(\"Function\",this.config.addItemText)?this.config.addItemText(t):this.config.addItemText;(this.isSelectMultipleElement||this.isTextElement)&&this.config.maxItemCount>0&&this.config.maxItemCount<=e.length&&(i=!1,n=(0,v.isType)(\"Function\",this.config.maxItemText)?this.config.maxItemText(this.config.maxItemCount):this.config.maxItemText),this.isTextElement&&this.config.addItems&&i&&this.config.regexFilter&&(i=this._regexFilter(t));var s=!e.some(function(e){return(0,v.isType)(\"String\",t)?e.value===t.trim():e.value===t});return s||this.config.duplicateItems||this.isSelectOneElement||!i||(i=!1,n=(0,v.isType)(\"Function\",this.config.uniqueItemText)?this.config.uniqueItemText(t):this.config.uniqueItemText),{response:i,notice:n}}},{key:\"_handleLoadingState\",value:function(){var e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0],t=this.itemList.querySelector(\".\"+this.config.classNames.placeholder);e?(this.containerOuter.classList.add(this.config.classNames.loadingState),this.containerOuter.setAttribute(\"aria-busy\",\"true\"),this.isSelectOneElement?t?t.innerHTML=this.config.loadingText:(t=this._getTemplate(\"placeholder\",this.config.loadingText),this.itemList.appendChild(t)):this.input.placeholder=this.config.loadingText):(this.containerOuter.classList.remove(this.config.classNames.loadingState),this.isSelectOneElement?t.innerHTML=this.placeholder||\"\":this.input.placeholder=this.placeholder||\"\")}},{key:\"_ajaxCallback\",value:function(){var e=this;return function(t,i,n){if(t&&i){var s=(0,v.isType)(\"Object\",t)?[t]:t;s&&(0,v.isType)(\"Array\",s)&&s.length?(e._handleLoadingState(!1),e._setLoading(!0),s.forEach(function(t){if(t.choices){var s=t.id||null;e._addGroup(t,s,i,n)}else e._addChoice(t[i],t[n],t.selected,t.disabled,void 0,t.customProperties,t.placeholder)}),e._setLoading(!1),e.isSelectOneElement&&e._selectPlaceholderChoice()):e._handleLoadingState(!1),e.containerOuter.removeAttribute(\"aria-busy\")}}}},{key:\"_searchChoices\",value:function(e){var t=(0,v.isType)(\"String\",e)?e.trim():e,i=(0,v.isType)(\"String\",this.currentValue)?this.currentValue.trim():this.currentValue;if(t.length>=1&&t!==i+\" \"){var n=this.store.getSearchableChoices(),s=t,o=(0,v.isType)(\"Array\",this.config.searchFields)?this.config.searchFields:[this.config.searchFields],r=Object.assign(this.config.fuseOptions,{keys:o}),a=new l.default(n,r),c=a.search(s);return this.currentValue=t,this.highlightPosition=0,this.isSearching=!0,this.store.dispatch((0,p.filterChoices)(c)),c.length}return 0}},{key:\"_handleSearch\",value:function(e){if(e){var t=this.store.getChoices(),i=t.some(function(e){return!e.active});if(this.input===document.activeElement)if(e&&e.length>=this.config.searchFloor){var n=0;this.config.searchChoices&&(n=this._searchChoices(e)),(0,v.triggerEvent)(this.passedElement,\"search\",{value:e,resultCount:n})}else i&&(this.isSearching=!1,this.store.dispatch((0,p.activateChoices)(!0)))}}},{key:\"_addEventListeners\",value:function(){document.addEventListener(\"keyup\",this._onKeyUp),document.addEventListener(\"keydown\",this._onKeyDown),document.addEventListener(\"click\",this._onClick),document.addEventListener(\"touchmove\",this._onTouchMove),document.addEventListener(\"touchend\",this._onTouchEnd),document.addEventListener(\"mousedown\",this._onMouseDown),document.addEventListener(\"mouseover\",this._onMouseOver),this.isSelectOneElement&&(this.containerOuter.addEventListener(\"focus\",this._onFocus),this.containerOuter.addEventListener(\"blur\",this._onBlur)),this.input.addEventListener(\"input\",this._onInput),this.input.addEventListener(\"paste\",this._onPaste),this.input.addEventListener(\"focus\",this._onFocus),this.input.addEventListener(\"blur\",this._onBlur)}},{key:\"_removeEventListeners\",value:function(){document.removeEventListener(\"keyup\",this._onKeyUp),document.removeEventListener(\"keydown\",this._onKeyDown),document.removeEventListener(\"click\",this._onClick),document.removeEventListener(\"touchmove\",this._onTouchMove),document.removeEventListener(\"touchend\",this._onTouchEnd),document.removeEventListener(\"mousedown\",this._onMouseDown),document.removeEventListener(\"mouseover\",this._onMouseOver),this.isSelectOneElement&&(this.containerOuter.removeEventListener(\"focus\",this._onFocus),this.containerOuter.removeEventListener(\"blur\",this._onBlur)),this.input.removeEventListener(\"input\",this._onInput),this.input.removeEventListener(\"paste\",this._onPaste),this.input.removeEventListener(\"focus\",this._onFocus),this.input.removeEventListener(\"blur\",this._onBlur)}},{key:\"_setInputWidth\",value:function(){this.placeholder?this.input.value&&this.input.value.length>=this.placeholder.length/1.25&&(this.input.style.width=(0,v.getWidthOfInput)(this.input)):this.input.style.width=(0,v.getWidthOfInput)(this.input)}},{key:\"_onKeyDown\",value:function(e){var t,i=this;if(e.target===this.input||this.containerOuter.contains(e.target)){var n=e.target,o=this.store.getItemsFilteredByActive(),r=this.input===document.activeElement,a=this.dropdown.classList.contains(this.config.classNames.activeState),c=this.itemList&&this.itemList.children,l=String.fromCharCode(e.keyCode),h=46,u=8,d=13,f=65,p=27,m=38,g=40,y=33,b=34,E=e.ctrlKey||e.metaKey;this.isTextElement||!/[a-zA-Z0-9-_ ]/.test(l)||a||this.showDropdown(!0),this.canSearch=this.config.searchEnabled;var _=function(){E&&c&&(i.canSearch=!1,i.config.removeItems&&!i.input.value&&i.input===document.activeElement&&i.highlightAll())},S=function(){if(i.isTextElement&&n.value){var t=i.input.value,s=i._canAddItem(o,t);s.response&&(a&&i.hideDropdown(),i._addItem(t),i._triggerChange(t),i.clearInput())}if(n.hasAttribute(\"data-button\")&&(i._handleButtonAction(o,n),e.preventDefault()),a){e.preventDefault();var r=i.dropdown.querySelector(\".\"+i.config.classNames.highlightedState);r&&(o[0]&&(o[0].keyCode=d),i._handleChoiceAction(o,r))}else i.isSelectOneElement&&(a||(i.showDropdown(!0),e.preventDefault()))},I=function(){a&&(i.toggleDropdown(),i.containerOuter.focus())},w=function(){if(a||i.isSelectOneElement){a||i.showDropdown(!0),i.canSearch=!1;var t=e.keyCode===g||e.keyCode===b?1:-1,n=e.metaKey||e.keyCode===b||e.keyCode===y,s=void 0;if(n)s=t>0?Array.from(i.dropdown.querySelectorAll(\"[data-choice-selectable]\")).pop():i.dropdown.querySelector(\"[data-choice-selectable]\");else{var o=i.dropdown.querySelector(\".\"+i.config.classNames.highlightedState);s=o?(0,v.getAdjacentEl)(o,\"[data-choice-selectable]\",t):i.dropdown.querySelector(\"[data-choice-selectable]\")}s&&((0,v.isScrolledIntoView)(s,i.choiceList,t)||i._scrollToChoice(s,t),i._highlightChoice(s)),e.preventDefault()}},T=function(){!r||e.target.value||i.isSelectOneElement||(i._handleBackspace(o),e.preventDefault())},C=(t={},s(t,f,_),s(t,d,S),s(t,p,I),s(t,m,w),s(t,y,w),s(t,g,w),s(t,b,w),s(t,u,T),s(t,h,T),t);C[e.keyCode]&&C[e.keyCode]()}}},{key:\"_onKeyUp\",value:function(e){if(e.target===this.input){var t=this.input.value,i=this.store.getItemsFilteredByActive(),n=this._canAddItem(i,t);if(this.isTextElement){var s=this.dropdown.classList.contains(this.config.classNames.activeState);if(t){if(n.notice){var o=this._getTemplate(\"notice\",n.notice);this.dropdown.innerHTML=o.outerHTML}n.response===!0?s||this.showDropdown():!n.notice&&s&&this.hideDropdown()}else s&&this.hideDropdown()}else{var r=46,a=8;e.keyCode!==r&&e.keyCode!==a||e.target.value?this.canSearch&&n.response&&this._handleSearch(this.input.value):!this.isTextElement&&this.isSearching&&(this.isSearching=!1,this.store.dispatch((0,p.activateChoices)(!0)))}this.canSearch=this.config.searchEnabled}}},{key:\"_onInput\",value:function(){this.isSelectOneElement||this._setInputWidth()}},{key:\"_onTouchMove\",value:function(){this.wasTap===!0&&(this.wasTap=!1)}},{key:\"_onTouchEnd\",value:function(e){var t=e.target||e.touches[0].target,i=this.dropdown.classList.contains(this.config.classNames.activeState);this.wasTap===!0&&this.containerOuter.contains(t)&&(t!==this.containerOuter&&t!==this.containerInner||this.isSelectOneElement||(this.isTextElement?document.activeElement!==this.input&&this.input.focus():i||this.showDropdown(!0)),e.stopPropagation()),this.wasTap=!0}},{key:\"_onMouseDown\",value:function(e){var t=e.target;if(t===this.choiceList&&this.isIe11&&(this.isScrollingOnIe=!0),this.containerOuter.contains(t)&&t!==this.input){var i=void 0,n=this.store.getItemsFilteredByActive(),s=e.shiftKey;(i=(0,v.findAncestorByAttrName)(t,\"data-button\"))?this._handleButtonAction(n,i):(i=(0,v.findAncestorByAttrName)(t,\"data-item\"))?this._handleItemAction(n,i,s):(i=(0,v.findAncestorByAttrName)(t,\"data-choice\"))&&this._handleChoiceAction(n,i),e.preventDefault()}}},{key:\"_onClick\",value:function(e){var t=e.target,i=this.dropdown.classList.contains(this.config.classNames.activeState),n=this.store.getItemsFilteredByActive();if(this.containerOuter.contains(t))t.hasAttribute(\"data-button\")&&this._handleButtonAction(n,t),i?this.isSelectOneElement&&t!==this.input&&!this.dropdown.contains(t)&&this.hideDropdown(!0):this.isTextElement?document.activeElement!==this.input&&this.input.focus():this.canSearch?this.showDropdown(!0):(this.showDropdown(),this.containerOuter.focus());else{var s=n.some(function(e){return e.highlighted});s&&this.unhighlightAll(),this.containerOuter.classList.remove(this.config.classNames.focusState),i&&this.hideDropdown()}}},{key:\"_onMouseOver\",value:function(e){(e.target===this.dropdown||this.dropdown.contains(e.target))&&e.target.hasAttribute(\"data-choice\")&&this._highlightChoice(e.target)}},{key:\"_onPaste\",value:function(e){e.target!==this.input||this.config.paste||e.preventDefault()}},{key:\"_onFocus\",value:function(e){var t=this,i=e.target;if(this.containerOuter.contains(i)){var n=this.dropdown.classList.contains(this.config.classNames.activeState),s={text:function(){i===t.input&&t.containerOuter.classList.add(t.config.classNames.focusState)},\"select-one\":function(){t.containerOuter.classList.add(t.config.classNames.focusState),i===t.input&&(n||t.showDropdown())},\"select-multiple\":function(){i===t.input&&(t.containerOuter.classList.add(t.config.classNames.focusState),n||t.showDropdown(!0))}};s[this.passedElement.type]()}}},{key:\"_onBlur\",value:function(e){var t=this,i=e.target;if(this.containerOuter.contains(i)&&!this.isScrollingOnIe){var n=this.store.getItemsFilteredByActive(),s=this.dropdown.classList.contains(this.config.classNames.activeState),o=n.some(function(e){return e.highlighted}),r={text:function(){i===t.input&&(t.containerOuter.classList.remove(t.config.classNames.focusState),o&&t.unhighlightAll(),s&&t.hideDropdown())},\"select-one\":function(){t.containerOuter.classList.remove(t.config.classNames.focusState),i===t.containerOuter&&s&&!t.canSearch&&t.hideDropdown(),i===t.input&&s&&t.hideDropdown()},\"select-multiple\":function(){i===t.input&&(t.containerOuter.classList.remove(t.config.classNames.focusState),s&&t.hideDropdown(),o&&t.unhighlightAll())}};r[this.passedElement.type]()}else this.isScrollingOnIe=!1,this.input.focus()}},{key:\"_regexFilter\",value:function(e){if(!e)return!1;var t=this.config.regexFilter,i=new RegExp(t.source,\"i\");return i.test(e)}},{key:\"_scrollToChoice\",value:function(e,t){var i=this;if(e){var n=this.choiceList.offsetHeight,s=e.offsetHeight,o=e.offsetTop+s,r=this.choiceList.scrollTop+n,a=t>0?this.choiceList.scrollTop+o-r:e.offsetTop,c=function e(){var n=4,s=i.choiceList.scrollTop,o=!1,r=void 0,c=void 0;t>0?(r=(a-s)/n,c=r>1?r:1,i.choiceList.scrollTop=s+c,s<a&&(o=!0)):(r=(s-a)/n,c=r>1?r:1,i.choiceList.scrollTop=s-c,s>a&&(o=!0)),o&&requestAnimationFrame(function(i){e(i,a,t)})};requestAnimationFrame(function(e){c(e,a,t)})}}},{key:\"_highlightChoice\",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,i=Array.from(this.dropdown.querySelectorAll(\"[data-choice-selectable]\")),n=t;if(i&&i.length){var s=Array.from(this.dropdown.querySelectorAll(\".\"+this.config.classNames.highlightedState));s.forEach(function(t){t.classList.remove(e.config.classNames.highlightedState),t.setAttribute(\"aria-selected\",\"false\")}),n?this.highlightPosition=i.indexOf(n):(n=i.length>this.highlightPosition?i[this.highlightPosition]:i[i.length-1],n||(n=i[0])),n.classList.add(this.config.classNames.highlightedState),n.setAttribute(\"aria-selected\",\"true\"),this.containerOuter.setAttribute(\"aria-activedescendant\",n.id)}}},{key:\"_addItem\",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:-1,n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:-1,s=arguments.length>4&&void 0!==arguments[4]?arguments[4]:null,o=arguments.length>5&&void 0!==arguments[5]&&arguments[5],r=arguments.length>6&&void 0!==arguments[6]?arguments[6]:null,a=(0,v.isType)(\"String\",e)?e.trim():e,c=r,l=this.store.getItems(),h=t||a,u=parseInt(i,10)||-1,d=n>=0?this.store.getGroupById(n):null,f=l?l.length+1:1;return this.config.prependValue&&(a=this.config.prependValue+a.toString()),this.config.appendValue&&(a+=this.config.appendValue.toString()),\nthis.store.dispatch((0,p.addItem)(a,h,f,u,n,s,o,c)),this.isSelectOneElement&&this.removeActiveItems(f),d&&d.value?(0,v.triggerEvent)(this.passedElement,\"addItem\",{id:f,value:a,label:h,groupValue:d.value,keyCode:c}):(0,v.triggerEvent)(this.passedElement,\"addItem\",{id:f,value:a,label:h,keyCode:c}),this}},{key:\"_removeItem\",value:function(e){if(!e||!(0,v.isType)(\"Object\",e))return this;var t=e.id,i=e.value,n=e.label,s=e.choiceId,o=e.groupId,r=o>=0?this.store.getGroupById(o):null;return this.store.dispatch((0,p.removeItem)(t,s)),r&&r.value?(0,v.triggerEvent)(this.passedElement,\"removeItem\",{id:t,value:i,label:n,groupValue:r.value}):(0,v.triggerEvent)(this.passedElement,\"removeItem\",{id:t,value:i,label:n}),this}},{key:\"_addChoice\",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,i=arguments.length>2&&void 0!==arguments[2]&&arguments[2],n=arguments.length>3&&void 0!==arguments[3]&&arguments[3],s=arguments.length>4&&void 0!==arguments[4]?arguments[4]:-1,o=arguments.length>5&&void 0!==arguments[5]?arguments[5]:null,r=arguments.length>6&&void 0!==arguments[6]&&arguments[6],a=arguments.length>7&&void 0!==arguments[7]?arguments[7]:null;if(\"undefined\"!=typeof e&&null!==e){var c=this.store.getChoices(),l=t||e,h=c?c.length+1:1,u=this.baseId+\"-\"+this.idNames.itemChoice+\"-\"+h;this.store.dispatch((0,p.addChoice)(e,l,h,s,n,u,o,r,a)),i&&this._addItem(e,l,h,void 0,o,r,a)}}},{key:\"_clearChoices\",value:function(){this.store.dispatch((0,p.clearChoices)())}},{key:\"_addGroup\",value:function(e,t){var i=this,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:\"value\",s=arguments.length>3&&void 0!==arguments[3]?arguments[3]:\"label\",o=(0,v.isType)(\"Object\",e)?e.choices:Array.from(e.getElementsByTagName(\"OPTION\")),r=t?t:Math.floor((new Date).valueOf()*Math.random()),a=!!e.disabled&&e.disabled;o?(this.store.dispatch((0,p.addGroup)(e.label,r,!0,a)),o.forEach(function(e){var t=e.disabled||e.parentNode&&e.parentNode.disabled;i._addChoice(e[n],(0,v.isType)(\"Object\",e)?e[s]:e.innerHTML,e.selected,t,r,e.customProperties,e.placeholder)})):this.store.dispatch((0,p.addGroup)(e.label,e.id,!1,e.disabled))}},{key:\"_getTemplate\",value:function(e){if(!e)return null;for(var t=this.config.templates,i=arguments.length,n=Array(i>1?i-1:0),s=1;s<i;s++)n[s-1]=arguments[s];return t[e].apply(t,n)}},{key:\"_createTemplates\",value:function(){var e=this,t=this.config.classNames,i={containerOuter:function(i){return(0,v.strToEl)('\\n          <div\\n            class=\"'+t.containerOuter+'\"\\n            '+(e.isSelectElement?e.config.searchEnabled?'role=\"combobox\" aria-autocomplete=\"list\"':'role=\"listbox\"':\"\")+'\\n            data-type=\"'+e.passedElement.type+'\"\\n            '+(e.isSelectOneElement?'tabindex=\"0\"':\"\")+'\\n            aria-haspopup=\"true\"\\n            aria-expanded=\"false\"\\n            dir=\"'+i+'\"\\n            >\\n          </div>\\n        ')},containerInner:function(){return(0,v.strToEl)('\\n          <div class=\"'+t.containerInner+'\"></div>\\n        ')},itemList:function(){var i,n=(0,u.default)(t.list,(i={},s(i,t.listSingle,e.isSelectOneElement),s(i,t.listItems,!e.isSelectOneElement),i));return(0,v.strToEl)('\\n          <div class=\"'+n+'\"></div>\\n        ')},placeholder:function(e){return(0,v.strToEl)('\\n          <div class=\"'+t.placeholder+'\">\\n            '+e+\"\\n          </div>\\n        \")},item:function(i){var n,o=(0,u.default)(t.item,(n={},s(n,t.highlightedState,i.highlighted),s(n,t.itemSelectable,!i.highlighted),s(n,t.placeholder,i.placeholder),n));if(e.config.removeItemButton){var r;return o=(0,u.default)(t.item,(r={},s(r,t.highlightedState,i.highlighted),s(r,t.itemSelectable,!i.disabled),s(r,t.placeholder,i.placeholder),r)),(0,v.strToEl)('\\n            <div\\n              class=\"'+o+'\"\\n              data-item\\n              data-id=\"'+i.id+'\"\\n              data-value=\"'+i.value+'\"\\n              data-deletable\\n              '+(i.active?'aria-selected=\"true\"':\"\")+\"\\n              \"+(i.disabled?'aria-disabled=\"true\"':\"\")+\"\\n              >\\n              \"+i.label+'<!--\\n           --><button\\n                type=\"button\"\\n                class=\"'+t.button+'\"\\n                data-button\\n                aria-label=\"Remove item: \\''+i.value+\"'\\\"\\n                >\\n                Remove item\\n              </button>\\n            </div>\\n          \")}return(0,v.strToEl)('\\n          <div\\n            class=\"'+o+'\"\\n            data-item\\n            data-id=\"'+i.id+'\"\\n            data-value=\"'+i.value+'\"\\n            '+(i.active?'aria-selected=\"true\"':\"\")+\"\\n            \"+(i.disabled?'aria-disabled=\"true\"':\"\")+\"\\n            >\\n            \"+i.label+\"\\n          </div>\\n        \")},choiceList:function(){return(0,v.strToEl)('\\n          <div\\n            class=\"'+t.list+'\"\\n            dir=\"ltr\"\\n            role=\"listbox\"\\n            '+(e.isSelectOneElement?\"\":'aria-multiselectable=\"true\"')+\"\\n            >\\n          </div>\\n        \")},choiceGroup:function(e){var i=(0,u.default)(t.group,s({},t.itemDisabled,e.disabled));return(0,v.strToEl)('\\n          <div\\n            class=\"'+i+'\"\\n            data-group\\n            data-id=\"'+e.id+'\"\\n            data-value=\"'+e.value+'\"\\n            role=\"group\"\\n            '+(e.disabled?'aria-disabled=\"true\"':\"\")+'\\n            >\\n            <div class=\"'+t.groupHeading+'\">'+e.value+\"</div>\\n          </div>\\n        \")},choice:function(i){var n,o=(0,u.default)(t.item,t.itemChoice,(n={},s(n,t.itemDisabled,i.disabled),s(n,t.itemSelectable,!i.disabled),s(n,t.placeholder,i.placeholder),n));return(0,v.strToEl)('\\n          <div\\n            class=\"'+o+'\"\\n            data-select-text=\"'+e.config.itemSelectText+'\"\\n            data-choice\\n            data-id=\"'+i.id+'\"\\n            data-value=\"'+i.value+'\"\\n            '+(i.disabled?'data-choice-disabled aria-disabled=\"true\"':\"data-choice-selectable\")+'\\n            id=\"'+i.elementId+'\"\\n            '+(i.groupId>0?'role=\"treeitem\"':'role=\"option\"')+\"\\n            >\\n            \"+i.label+\"\\n          </div>\\n        \")},input:function(){var e=(0,u.default)(t.input,t.inputCloned);return(0,v.strToEl)('\\n          <input\\n            type=\"text\"\\n            class=\"'+e+'\"\\n            autocomplete=\"off\"\\n            autocapitalize=\"off\"\\n            spellcheck=\"false\"\\n            role=\"textbox\"\\n            aria-autocomplete=\"list\"\\n            >\\n        ')},dropdown:function(){var e=(0,u.default)(t.list,t.listDropdown);return(0,v.strToEl)('\\n          <div\\n            class=\"'+e+'\"\\n            aria-expanded=\"false\"\\n            >\\n          </div>\\n        ')},notice:function(e){var i,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:\"\",o=(0,u.default)(t.item,t.itemChoice,(i={},s(i,t.noResults,\"no-results\"===n),s(i,t.noChoices,\"no-choices\"===n),i));return(0,v.strToEl)('\\n          <div class=\"'+o+'\">\\n            '+e+\"\\n          </div>\\n        \")},option:function(e){return(0,v.strToEl)('\\n          <option value=\"'+e.value+'\" selected>'+e.label+\"</option>\\n        \")}},n=this.config.callbackOnCreateTemplates,o={};n&&(0,v.isType)(\"Function\",n)&&(o=n.call(this,v.strToEl)),this.config.templates=(0,v.extend)(i,o)}},{key:\"_setLoading\",value:function(e){this.store.dispatch((0,p.setIsLoading)(e))}},{key:\"_createInput\",value:function(){var e=this,t=this.passedElement.getAttribute(\"dir\")||\"ltr\",i=this._getTemplate(\"containerOuter\",t),n=this._getTemplate(\"containerInner\"),s=this._getTemplate(\"itemList\"),o=this._getTemplate(\"choiceList\"),r=this._getTemplate(\"input\"),a=this._getTemplate(\"dropdown\");this.containerOuter=i,this.containerInner=n,this.input=r,this.choiceList=o,this.itemList=s,this.dropdown=a,this.passedElement.classList.add(this.config.classNames.input,this.config.classNames.hiddenState),this.passedElement.tabIndex=\"-1\";var c=this.passedElement.getAttribute(\"style\");if(Boolean(c)&&this.passedElement.setAttribute(\"data-choice-orig-style\",c),this.passedElement.setAttribute(\"style\",\"display:none;\"),this.passedElement.setAttribute(\"aria-hidden\",\"true\"),this.passedElement.setAttribute(\"data-choice\",\"active\"),(0,v.wrap)(this.passedElement,n),(0,v.wrap)(n,i),this.isSelectOneElement?r.placeholder=this.config.searchPlaceholderValue||\"\":this.placeholder&&(r.placeholder=this.placeholder,r.style.width=(0,v.getWidthOfInput)(r)),this.config.addItems||this.disable(),i.appendChild(n),i.appendChild(a),n.appendChild(s),this.isTextElement||a.appendChild(o),this.isSelectMultipleElement||this.isTextElement?n.appendChild(r):this.canSearch&&a.insertBefore(r,a.firstChild),this.isSelectElement){var l=Array.from(this.passedElement.getElementsByTagName(\"OPTGROUP\"));if(this.highlightPosition=0,this.isSearching=!1,this._setLoading(!0),l&&l.length)l.forEach(function(t){e._addGroup(t,t.id||null)});else{var h=Array.from(this.passedElement.options),u=this.config.sortFilter,d=this.presetChoices;h.forEach(function(e){d.push({value:e.value,label:e.innerHTML,selected:e.selected,disabled:e.disabled||e.parentNode.disabled,placeholder:e.hasAttribute(\"placeholder\")})}),this.config.shouldSort&&d.sort(u);var f=d.some(function(e){return e.selected});d.forEach(function(t,i){if(e.isSelectOneElement){var n=f||!f&&i>0;e._addChoice(t.value,t.label,!n||t.selected,!!n&&t.disabled,void 0,t.customProperties,t.placeholder)}else e._addChoice(t.value,t.label,t.selected,t.disabled,void 0,t.customProperties,t.placeholder)})}this._setLoading(!1)}else this.isTextElement&&this.presetItems.forEach(function(t){var i=(0,v.getType)(t);if(\"Object\"===i){if(!t.value)return;e._addItem(t.value,t.label,t.id,void 0,t.customProperties,t.placeholder)}else\"String\"===i&&e._addItem(t)})}}]),e}();e.exports=m},function(e,t,i){!function(t){\"use strict\";function i(){console.log.apply(console,arguments)}function n(e,t){var i;this.list=e,this.options=t=t||{};for(i in a)a.hasOwnProperty(i)&&(\"boolean\"==typeof a[i]?this.options[i]=i in t?t[i]:a[i]:this.options[i]=t[i]||a[i])}function s(e,t,i){var n,r,a,c,l,h;if(t){if(a=t.indexOf(\".\"),a!==-1?(n=t.slice(0,a),r=t.slice(a+1)):n=t,c=e[n],null!==c&&void 0!==c)if(r||\"string\"!=typeof c&&\"number\"!=typeof c)if(o(c))for(l=0,h=c.length;l<h;l++)s(c[l],r,i);else r&&s(c,r,i);else i.push(c)}else i.push(e);return i}function o(e){return\"[object Array]\"===Object.prototype.toString.call(e)}function r(e,t){t=t||{},this.options=t,this.options.location=t.location||r.defaultOptions.location,this.options.distance=\"distance\"in t?t.distance:r.defaultOptions.distance,this.options.threshold=\"threshold\"in t?t.threshold:r.defaultOptions.threshold,this.options.maxPatternLength=t.maxPatternLength||r.defaultOptions.maxPatternLength,this.pattern=t.caseSensitive?e:e.toLowerCase(),this.patternLen=e.length,this.patternLen<=this.options.maxPatternLength&&(this.matchmask=1<<this.patternLen-1,this.patternAlphabet=this._calculatePatternAlphabet())}var a={id:null,caseSensitive:!1,include:[],shouldSort:!0,searchFn:r,sortFn:function(e,t){return e.score-t.score},getFn:s,keys:[],verbose:!1,tokenize:!1,matchAllTokens:!1,tokenSeparator:/ +/g,minMatchCharLength:1,findAllMatches:!1};n.VERSION=\"2.7.3\",n.prototype.set=function(e){return this.list=e,e},n.prototype.search=function(e){this.options.verbose&&i(\"\\nSearch term:\",e,\"\\n\"),this.pattern=e,this.results=[],this.resultMap={},this._keyMap=null,this._prepareSearchers(),this._startSearch(),this._computeScore(),this._sort();var t=this._format();return t},n.prototype._prepareSearchers=function(){var e=this.options,t=this.pattern,i=e.searchFn,n=t.split(e.tokenSeparator),s=0,o=n.length;if(this.options.tokenize)for(this.tokenSearchers=[];s<o;s++)this.tokenSearchers.push(new i(n[s],e));this.fullSeacher=new i(t,e)},n.prototype._startSearch=function(){var e,t,i,n,s=this.options,o=s.getFn,r=this.list,a=r.length,c=this.options.keys,l=c.length,h=null;if(\"string\"==typeof r[0])for(i=0;i<a;i++)this._analyze(\"\",r[i],i,i);else for(this._keyMap={},i=0;i<a;i++)for(h=r[i],n=0;n<l;n++){if(e=c[n],\"string\"!=typeof e){if(t=1-e.weight||1,this._keyMap[e.name]={weight:t},e.weight<=0||e.weight>1)throw new Error(\"Key weight has to be > 0 and <= 1\");e=e.name}else this._keyMap[e]={weight:1};this._analyze(e,o(h,e,[]),h,i)}},n.prototype._analyze=function(e,t,n,s){var r,a,c,l,h,u,d,f,p,v,m,g,y,b,E,_=this.options,S=!1;if(void 0!==t&&null!==t){a=[];var I=0;if(\"string\"==typeof t){if(r=t.split(_.tokenSeparator),_.verbose&&i(\"---------\\nKey:\",e),this.options.tokenize){for(b=0;b<this.tokenSearchers.length;b++){for(f=this.tokenSearchers[b],_.verbose&&i(\"Pattern:\",f.pattern),p=[],g=!1,E=0;E<r.length;E++){v=r[E],m=f.search(v);var w={};m.isMatch?(w[v]=m.score,S=!0,g=!0,a.push(m.score)):(w[v]=1,this.options.matchAllTokens||a.push(1)),p.push(w)}g&&I++,_.verbose&&i(\"Token scores:\",p)}for(l=a[0],u=a.length,b=1;b<u;b++)l+=a[b];l/=u,_.verbose&&i(\"Token score average:\",l)}d=this.fullSeacher.search(t),_.verbose&&i(\"Full text score:\",d.score),h=d.score,void 0!==l&&(h=(h+l)/2),_.verbose&&i(\"Score average:\",h),y=!this.options.tokenize||!this.options.matchAllTokens||I>=this.tokenSearchers.length,_.verbose&&i(\"Check Matches\",y),(S||d.isMatch)&&y&&(c=this.resultMap[s],c?c.output.push({key:e,score:h,matchedIndices:d.matchedIndices}):(this.resultMap[s]={item:n,output:[{key:e,score:h,matchedIndices:d.matchedIndices}]},this.results.push(this.resultMap[s])))}else if(o(t))for(b=0;b<t.length;b++)this._analyze(e,t[b],n,s)}},n.prototype._computeScore=function(){var e,t,n,s,o,r,a,c,l,h=this._keyMap,u=this.results;for(this.options.verbose&&i(\"\\n\\nComputing score:\\n\"),e=0;e<u.length;e++){for(n=0,s=u[e].output,o=s.length,c=1,t=0;t<o;t++)r=s[t].score,a=h?h[s[t].key].weight:1,l=r*a,1!==a?c=Math.min(c,l):(n+=l,s[t].nScore=l);1===c?u[e].score=n/o:u[e].score=c,this.options.verbose&&i(u[e])}},n.prototype._sort=function(){var e=this.options;e.shouldSort&&(e.verbose&&i(\"\\n\\nSorting....\"),this.results.sort(e.sortFn))},n.prototype._format=function(){var e,t,n,s,o=this.options,r=o.getFn,a=[],c=this.results,l=o.include;for(o.verbose&&i(\"\\n\\nOutput:\\n\\n\",c),n=o.id?function(e){c[e].item=r(c[e].item,o.id,[])[0]}:function(){},s=function(e){var t,i,n,s,o,r=c[e];if(l.length>0){if(t={item:r.item},l.indexOf(\"matches\")!==-1)for(n=r.output,t.matches=[],i=0;i<n.length;i++)s=n[i],o={indices:s.matchedIndices},s.key&&(o.key=s.key),t.matches.push(o);l.indexOf(\"score\")!==-1&&(t.score=c[e].score)}else t=r.item;return t},e=0,t=c.length;e<t;e++)n(e),a.push(s(e));return a},r.defaultOptions={location:0,distance:100,threshold:.6,maxPatternLength:32},r.prototype._calculatePatternAlphabet=function(){var e={},t=0;for(t=0;t<this.patternLen;t++)e[this.pattern.charAt(t)]=0;for(t=0;t<this.patternLen;t++)e[this.pattern.charAt(t)]|=1<<this.pattern.length-t-1;return e},r.prototype._bitapScore=function(e,t){var i=e/this.patternLen,n=Math.abs(this.options.location-t);return this.options.distance?i+n/this.options.distance:n?1:i},r.prototype.search=function(e){var t,i,n,s,o,r,a,c,l,h,u,d,f,p,v,m,g,y,b,E,_,S,I,w=this.options;if(e=w.caseSensitive?e:e.toLowerCase(),this.pattern===e)return{isMatch:!0,score:0,matchedIndices:[[0,e.length-1]]};if(this.patternLen>w.maxPatternLength){if(y=e.match(new RegExp(this.pattern.replace(w.tokenSeparator,\"|\"))),b=!!y)for(_=[],t=0,S=y.length;t<S;t++)I=y[t],_.push([e.indexOf(I),I.length-1]);return{isMatch:b,score:b?.5:1,matchedIndices:_}}for(s=w.findAllMatches,o=w.location,n=e.length,r=w.threshold,a=e.indexOf(this.pattern,o),E=[],t=0;t<n;t++)E[t]=0;for(a!=-1&&(r=Math.min(this._bitapScore(0,a),r),a=e.lastIndexOf(this.pattern,o+this.patternLen),a!=-1&&(r=Math.min(this._bitapScore(0,a),r))),a=-1,m=1,g=[],h=this.patternLen+n,t=0;t<this.patternLen;t++){for(c=0,l=h;c<l;)this._bitapScore(t,o+l)<=r?c=l:h=l,l=Math.floor((h-c)/2+c);for(h=l,u=Math.max(1,o-l+1),d=s?n:Math.min(o+l,n)+this.patternLen,f=Array(d+2),f[d+1]=(1<<t)-1,i=d;i>=u;i--)if(v=this.patternAlphabet[e.charAt(i-1)],v&&(E[i-1]=1),f[i]=(f[i+1]<<1|1)&v,0!==t&&(f[i]|=(p[i+1]|p[i])<<1|1|p[i+1]),f[i]&this.matchmask&&(m=this._bitapScore(t,i-1),m<=r)){if(r=m,a=i-1,g.push(a),a<=o)break;u=Math.max(1,2*o-a)}if(this._bitapScore(t+1,o)>r)break;p=f}return _=this._getMatchedIndices(E),{isMatch:a>=0,score:0===m?.001:m,matchedIndices:_}},r.prototype._getMatchedIndices=function(e){for(var t,i=[],n=-1,s=-1,o=0,r=e.length;o<r;o++)t=e[o],t&&n===-1?n=o:t||n===-1||(s=o-1,s-n+1>=this.options.minMatchCharLength&&i.push([n,s]),n=-1);return e[o-1]&&o-1-n+1>=this.options.minMatchCharLength&&i.push([n,o-1]),i},e.exports=n}(this)},function(e,t,i){var n,s;!function(){\"use strict\";function i(){for(var e=[],t=0;t<arguments.length;t++){var n=arguments[t];if(n){var s=typeof n;if(\"string\"===s||\"number\"===s)e.push(n);else if(Array.isArray(n))e.push(i.apply(null,n));else if(\"object\"===s)for(var r in n)o.call(n,r)&&n[r]&&e.push(r)}}return e.join(\" \")}var o={}.hasOwnProperty;\"undefined\"!=typeof e&&e.exports?e.exports=i:(n=[],s=function(){return i}.apply(t,n),!(void 0!==s&&(e.exports=s)))}()},function(e,t,i){\"use strict\";function n(e){return e&&e.__esModule?e:{default:e}}function s(e){if(Array.isArray(e)){for(var t=0,i=Array(e.length);t<e.length;t++)i[t]=e[t];return i}return Array.from(e)}function o(e,t){if(!(e instanceof t))throw new TypeError(\"Cannot call a class as a function\")}Object.defineProperty(t,\"__esModule\",{value:!0});var r=function(){function e(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,\"value\"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,i,n){return i&&e(t.prototype,i),n&&e(t,n),t}}(),a=i(5),c=i(26),l=n(c),h=function(){function e(){o(this,e),this.store=(0,a.createStore)(l.default,window.devToolsExtension?window.devToolsExtension():void 0)}return r(e,[{key:\"getState\",value:function(){return this.store.getState()}},{key:\"dispatch\",value:function(e){this.store.dispatch(e)}},{key:\"subscribe\",value:function(e){this.store.subscribe(e)}},{key:\"isLoading\",value:function(){var e=this.store.getState();return e.general.loading}},{key:\"getItems\",value:function(){var e=this.store.getState();return e.items}},{key:\"getItemsFilteredByActive\",value:function(){var e=this.getItems(),t=e.filter(function(e){return e.active===!0},[]);return t}},{key:\"getItemsReducedToValues\",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.getItems(),t=e.reduce(function(e,t){return e.push(t.value),e},[]);return t}},{key:\"getChoices\",value:function(){var e=this.store.getState();return e.choices}},{key:\"getChoicesFilteredByActive\",value:function(){var e=this.getChoices(),t=e.filter(function(e){return e.active===!0});return t}},{key:\"getChoicesFilteredBySelectable\",value:function(){var e=this.getChoices(),t=e.filter(function(e){return e.disabled!==!0});return t}},{key:\"getSearchableChoices\",value:function(){var e=this.getChoicesFilteredBySelectable();return e.filter(function(e){return e.placeholder!==!0})}},{key:\"getChoiceById\",value:function(e){if(e){var t=this.getChoicesFilteredByActive(),i=t.find(function(t){return t.id===parseInt(e,10)});return i}return!1}},{key:\"getGroups\",value:function(){var e=this.store.getState();return e.groups}},{key:\"getGroupsFilteredByActive\",value:function(){var e=this.getGroups(),t=this.getChoices(),i=e.filter(function(e){var i=e.active===!0&&e.disabled===!1,n=t.some(function(e){return e.active===!0&&e.disabled===!1});return i&&n},[]);return i}},{key:\"getGroupById\",value:function(e){var t=this.getGroups(),i=t.find(function(t){return t.id===e});return i}},{key:\"getPlaceholderChoice\",value:function(){var e=this.getChoices(),t=[].concat(s(e)).reverse().find(function(e){return e.placeholder===!0});return t}}]),e}();t.default=h,e.exports=h},function(e,t,i){\"use strict\";function n(e){return e&&e.__esModule?e:{default:e}}t.__esModule=!0,t.compose=t.applyMiddleware=t.bindActionCreators=t.combineReducers=t.createStore=void 0;var s=i(6),o=n(s),r=i(21),a=n(r),c=i(23),l=n(c),h=i(24),u=n(h),d=i(25),f=n(d),p=i(22);n(p);t.createStore=o.default,t.combineReducers=a.default,t.bindActionCreators=l.default,t.applyMiddleware=u.default,t.compose=f.default},function(e,t,i){\"use strict\";function n(e){return e&&e.__esModule?e:{default:e}}function s(e,t,i){function n(){g===m&&(g=m.slice())}function o(){return v}function a(e){if(\"function\"!=typeof e)throw new Error(\"Expected listener to be a function.\");var t=!0;return n(),g.push(e),function(){if(t){t=!1,n();var i=g.indexOf(e);g.splice(i,1)}}}function h(e){if(!(0,r.default)(e))throw new Error(\"Actions must be plain objects. Use custom middleware for async actions.\");if(\"undefined\"==typeof e.type)throw new Error('Actions may not have an undefined \"type\" property. Have you misspelled a constant?');if(y)throw new Error(\"Reducers may not dispatch actions.\");try{y=!0,v=p(v,e)}finally{y=!1}for(var t=m=g,i=0;i<t.length;i++){var n=t[i];n()}return e}function u(e){if(\"function\"!=typeof e)throw new Error(\"Expected the nextReducer to be a function.\");p=e,h({type:l.INIT})}function d(){var e,t=a;return e={subscribe:function(e){function i(){e.next&&e.next(o())}if(\"object\"!=typeof e)throw new TypeError(\"Expected the observer to be an object.\");i();var n=t(i);return{unsubscribe:n}}},e[c.default]=function(){return this},e}var f;if(\"function\"==typeof t&&\"undefined\"==typeof i&&(i=t,t=void 0),\"undefined\"!=typeof i){if(\"function\"!=typeof i)throw new Error(\"Expected the enhancer to be a function.\");return i(s)(e,t)}if(\"function\"!=typeof e)throw new Error(\"Expected the reducer to be a function.\");var p=e,v=t,m=[],g=m,y=!1;return h({type:l.INIT}),f={dispatch:h,subscribe:a,getState:o,replaceReducer:u},f[c.default]=d,f}t.__esModule=!0,t.ActionTypes=void 0,t.default=s;var o=i(7),r=n(o),a=i(17),c=n(a),l=t.ActionTypes={INIT:\"@@redux/INIT\"}},function(e,t,i){function n(e){if(!r(e)||s(e)!=a)return!1;var t=o(e);if(null===t)return!0;var i=u.call(t,\"constructor\")&&t.constructor;return\"function\"==typeof i&&i instanceof i&&h.call(i)==d}var s=i(8),o=i(14),r=i(16),a=\"[object Object]\",c=Function.prototype,l=Object.prototype,h=c.toString,u=l.hasOwnProperty,d=h.call(Object);e.exports=n},function(e,t,i){function n(e){return null==e?void 0===e?c:a:l&&l in Object(e)?o(e):r(e)}var s=i(9),o=i(12),r=i(13),a=\"[object Null]\",c=\"[object Undefined]\",l=s?s.toStringTag:void 0;e.exports=n},function(e,t,i){var n=i(10),s=n.Symbol;e.exports=s},function(e,t,i){var n=i(11),s=\"object\"==typeof self&&self&&self.Object===Object&&self,o=n||s||Function(\"return this\")();e.exports=o},function(e,t){(function(t){var i=\"object\"==typeof t&&t&&t.Object===Object&&t;e.exports=i}).call(t,function(){return this}())},function(e,t,i){function n(e){var t=r.call(e,c),i=e[c];try{e[c]=void 0;var n=!0}catch(e){}var s=a.call(e);return n&&(t?e[c]=i:delete e[c]),s}var s=i(9),o=Object.prototype,r=o.hasOwnProperty,a=o.toString,c=s?s.toStringTag:void 0;e.exports=n},function(e,t){function i(e){return s.call(e)}var n=Object.prototype,s=n.toString;e.exports=i},function(e,t,i){var n=i(15),s=n(Object.getPrototypeOf,Object);e.exports=s},function(e,t){function i(e,t){return function(i){return e(t(i))}}e.exports=i},function(e,t){function i(e){return null!=e&&\"object\"==typeof e}e.exports=i},function(e,t,i){e.exports=i(18)},function(e,t,i){(function(e,n){\"use strict\";function s(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,\"__esModule\",{value:!0});var o,r=i(20),a=s(r);o=\"undefined\"!=typeof self?self:\"undefined\"!=typeof window?window:\"undefined\"!=typeof e?e:n;var c=(0,a.default)(o);t.default=c}).call(t,function(){return this}(),i(19)(e))},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children=[],e.webpackPolyfill=1),e}},function(e,t){\"use strict\";function i(e){var t,i=e.Symbol;return\"function\"==typeof i?i.observable?t=i.observable:(t=i(\"observable\"),i.observable=t):t=\"@@observable\",t}Object.defineProperty(t,\"__esModule\",{value:!0}),t.default=i},function(e,t,i){\"use strict\";function n(e){return e&&e.__esModule?e:{default:e}}function s(e,t){var i=t&&t.type,n=i&&'\"'+i.toString()+'\"'||\"an action\";return\"Given action \"+n+', reducer \"'+e+'\" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.'}function o(e){Object.keys(e).forEach(function(t){var i=e[t],n=i(void 0,{type:a.ActionTypes.INIT});if(\"undefined\"==typeof n)throw new Error('Reducer \"'+t+\"\\\" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.\");var s=\"@@redux/PROBE_UNKNOWN_ACTION_\"+Math.random().toString(36).substring(7).split(\"\").join(\".\");if(\"undefined\"==typeof i(void 0,{type:s}))throw new Error('Reducer \"'+t+'\" returned undefined when probed with a random type. '+(\"Don't try to handle \"+a.ActionTypes.INIT+' or other actions in \"redux/*\" ')+\"namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.\")})}function r(e){for(var t=Object.keys(e),i={},n=0;n<t.length;n++){var r=t[n];\"function\"==typeof e[r]&&(i[r]=e[r])}var a=Object.keys(i),c=void 0;try{o(i)}catch(e){c=e}return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments[1];if(c)throw c;for(var n=!1,o={},r=0;r<a.length;r++){var l=a[r],h=i[l],u=e[l],d=h(u,t);if(\"undefined\"==typeof d){var f=s(l,t);throw new Error(f)}o[l]=d,n=n||d!==u}return n?o:e}}t.__esModule=!0,t.default=r;var a=i(6),c=i(7),l=(n(c),i(22));n(l)},function(e,t){\"use strict\";function i(e){\"undefined\"!=typeof console&&\"function\"==typeof console.error&&console.error(e);try{throw new Error(e)}catch(e){}}t.__esModule=!0,t.default=i},function(e,t){\"use strict\";function i(e,t){return function(){return t(e.apply(void 0,arguments))}}function n(e,t){if(\"function\"==typeof e)return i(e,t);if(\"object\"!=typeof e||null===e)throw new Error(\"bindActionCreators expected an object or a function, instead received \"+(null===e?\"null\":typeof e)+'. Did you write \"import ActionCreators from\" instead of \"import * as ActionCreators from\"?');for(var n=Object.keys(e),s={},o=0;o<n.length;o++){var r=n[o],a=e[r];\"function\"==typeof a&&(s[r]=i(a,t))}return s}t.__esModule=!0,t.default=n},function(e,t,i){\"use strict\";function n(e){return e&&e.__esModule?e:{default:e}}function s(){for(var e=arguments.length,t=Array(e),i=0;i<e;i++)t[i]=arguments[i];return function(e){return function(i,n,s){var r=e(i,n,s),c=r.dispatch,l=[],h={getState:r.getState,dispatch:function(e){return c(e)}};return l=t.map(function(e){return e(h)}),c=a.default.apply(void 0,l)(r.dispatch),o({},r,{dispatch:c})}}}t.__esModule=!0;var o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var i=arguments[t];for(var n in i)Object.prototype.hasOwnProperty.call(i,n)&&(e[n]=i[n])}return e};t.default=s;var r=i(25),a=n(r)},function(e,t){\"use strict\";function i(){for(var e=arguments.length,t=Array(e),i=0;i<e;i++)t[i]=arguments[i];return 0===t.length?function(e){return e}:1===t.length?t[0]:t.reduce(function(e,t){return function(){return e(t.apply(void 0,arguments))}})}t.__esModule=!0,t.default=i},function(e,t,i){\"use strict\";function n(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,\"__esModule\",{value:!0});var s=i(5),o=i(27),r=n(o),a=i(28),c=n(a),l=i(29),h=n(l),u=i(30),d=n(u),f=(0,s.combineReducers)({items:r.default,groups:c.default,choices:h.default,general:d.default}),p=function(e,t){var i=e;return\"CLEAR_ALL\"===t.type&&(i=void 0),f(i,t)};t.default=p},function(e,t){\"use strict\";function i(e){if(Array.isArray(e)){for(var t=0,i=Array(e.length);t<e.length;t++)i[t]=e[t];return i}return Array.from(e)}Object.defineProperty(t,\"__esModule\",{value:!0});var n=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],t=arguments[1];switch(t.type){case\"ADD_ITEM\":var n=[].concat(i(e),[{id:t.id,choiceId:t.choiceId,groupId:t.groupId,value:t.value,label:t.label,active:!0,highlighted:!1,customProperties:t.customProperties,placeholder:t.placeholder||!1,keyCode:null}]);return n.map(function(e){return e.highlighted&&(e.highlighted=!1),e});case\"REMOVE_ITEM\":return e.map(function(e){return e.id===t.id&&(e.active=!1),e});case\"HIGHLIGHT_ITEM\":return e.map(function(e){return e.id===t.id&&(e.highlighted=t.highlighted),e});default:return e}};t.default=n},function(e,t){\"use strict\";function i(e){if(Array.isArray(e)){for(var t=0,i=Array(e.length);t<e.length;t++)i[t]=e[t];return i}return Array.from(e)}Object.defineProperty(t,\"__esModule\",{value:!0});var n=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],t=arguments[1];switch(t.type){case\"ADD_GROUP\":return[].concat(i(e),[{id:t.id,value:t.value,active:t.active,disabled:t.disabled}]);case\"CLEAR_CHOICES\":return e.groups=[];default:return e}};t.default=n},function(e,t){\"use strict\";function i(e){if(Array.isArray(e)){for(var t=0,i=Array(e.length);t<e.length;t++)i[t]=e[t];return i}return Array.from(e)}Object.defineProperty(t,\"__esModule\",{value:!0});var n=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],t=arguments[1];switch(t.type){case\"ADD_CHOICE\":return[].concat(i(e),[{id:t.id,elementId:t.elementId,groupId:t.groupId,value:t.value,label:t.label||t.value,disabled:t.disabled||!1,selected:!1,active:!0,score:9999,customProperties:t.customProperties,placeholder:t.placeholder||!1,keyCode:null}]);case\"ADD_ITEM\":var n=e;return t.activateOptions&&(n=e.map(function(e){return e.active=t.active,e})),t.choiceId>-1&&(n=e.map(function(e){return e.id===parseInt(t.choiceId,10)&&(e.selected=!0),e})),n;case\"REMOVE_ITEM\":return t.choiceId>-1?e.map(function(e){return e.id===parseInt(t.choiceId,10)&&(e.selected=!1),e}):e;case\"FILTER_CHOICES\":var s=t.results,o=e.map(function(e){return e.active=s.some(function(t){return t.item.id===e.id&&(e.score=t.score,!0)}),e});return o;case\"ACTIVATE_CHOICES\":return e.map(function(e){return e.active=t.active,e});case\"CLEAR_CHOICES\":return e.choices=[];default:return e}};t.default=n},function(e,t){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var i=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{loading:!1},t=arguments[1];switch(t.type){case\"LOADING\":return{loading:t.isLoading};default:return e}};t.default=i},function(e,t){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});t.addItem=function(e,t,i,n,s,o,r,a){return{type:\"ADD_ITEM\",value:e,label:t,id:i,choiceId:n,groupId:s,customProperties:o,placeholder:r,keyCode:a}},t.removeItem=function(e,t){return{type:\"REMOVE_ITEM\",id:e,choiceId:t}},t.highlightItem=function(e,t){return{type:\"HIGHLIGHT_ITEM\",id:e,highlighted:t}},t.addChoice=function(e,t,i,n,s,o,r,a,c){return{type:\"ADD_CHOICE\",value:e,label:t,id:i,groupId:n,disabled:s,elementId:o,customProperties:r,placeholder:a,keyCode:c}},t.filterChoices=function(e){return{type:\"FILTER_CHOICES\",results:e}},t.activateChoices=function(){var e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];return{type:\"ACTIVATE_CHOICES\",active:e}},t.clearChoices=function(){return{type:\"CLEAR_CHOICES\"}},t.addGroup=function(e,t,i,n){return{type:\"ADD_GROUP\",value:e,id:t,active:i,disabled:n}},t.clearAll=function(){return{type:\"CLEAR_ALL\"}},t.setIsLoading=function(e){return{type:\"LOADING\",isLoading:e}}},function(e,t){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var i=\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&\"function\"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?\"symbol\":typeof e},n=(t.capitalise=function(e){return e.replace(/\\w\\S*/g,function(e){return e.charAt(0).toUpperCase()+e.substr(1).toLowerCase()})},t.generateChars=function(e){for(var t=\"\",i=0;i<e;i++){var n=c(0,36);t+=n.toString(36)}return t}),s=(t.generateId=function(e,t){var i=e.id||e.name&&e.name+\"-\"+n(2)||n(4);return i=i.replace(/(:|\\.|\\[|\\]|,)/g,\"\"),i=t+i},t.getType=function(e){return Object.prototype.toString.call(e).slice(8,-1);\n}),o=t.isType=function(e,t){var i=s(t);return void 0!==t&&null!==t&&i===e},r=(t.isNode=function(e){return\"object\"===(\"undefined\"==typeof Node?\"undefined\":i(Node))?e instanceof Node:e&&\"object\"===(\"undefined\"==typeof e?\"undefined\":i(e))&&\"number\"==typeof e.nodeType&&\"string\"==typeof e.nodeName},t.isElement=function(e){return\"object\"===(\"undefined\"==typeof HTMLElement?\"undefined\":i(HTMLElement))?e instanceof HTMLElement:e&&\"object\"===(\"undefined\"==typeof e?\"undefined\":i(e))&&null!==e&&1===e.nodeType&&\"string\"==typeof e.nodeName},t.extend=function e(){for(var t={},i=arguments.length,n=function(i){for(var n in i)Object.prototype.hasOwnProperty.call(i,n)&&(o(\"Object\",i[n])?t[n]=e(!0,t[n],i[n]):t[n]=i[n])},s=0;s<i;s++){var r=arguments[s];o(\"Object\",r)&&n(r)}return t},t.whichTransitionEvent=function(){var e,t=document.createElement(\"fakeelement\"),i={transition:\"transitionend\",OTransition:\"oTransitionEnd\",MozTransition:\"transitionend\",WebkitTransition:\"webkitTransitionEnd\"};for(e in i)if(void 0!==t.style[e])return i[e]},t.whichAnimationEvent=function(){var e,t=document.createElement(\"fakeelement\"),i={animation:\"animationend\",OAnimation:\"oAnimationEnd\",MozAnimation:\"animationend\",WebkitAnimation:\"webkitAnimationEnd\"};for(e in i)if(void 0!==t.style[e])return i[e]}),a=(t.getParentsUntil=function(e,t,i){for(var n=[];e&&e!==document;e=e.parentNode){if(t){var s=t.charAt(0);if(\".\"===s&&e.classList.contains(t.substr(1)))break;if(\"#\"===s&&e.id===t.substr(1))break;if(\"[\"===s&&e.hasAttribute(t.substr(1,t.length-1)))break;if(e.tagName.toLowerCase()===t)break}if(i){var o=i.charAt(0);\".\"===o&&e.classList.contains(i.substr(1))&&n.push(e),\"#\"===o&&e.id===i.substr(1)&&n.push(e),\"[\"===o&&e.hasAttribute(i.substr(1,i.length-1))&&n.push(e),e.tagName.toLowerCase()===i&&n.push(e)}else n.push(e)}return 0===n.length?null:n},t.wrap=function(e,t){return t=t||document.createElement(\"div\"),e.nextSibling?e.parentNode.insertBefore(t,e.nextSibling):e.parentNode.appendChild(t),t.appendChild(e)},t.getSiblings=function(e){for(var t=[],i=e.parentNode.firstChild;i;i=i.nextSibling)1===i.nodeType&&i!==e&&t.push(i);return t},t.findAncestor=function(e,t){for(;(e=e.parentElement)&&!e.classList.contains(t););return e},t.findAncestorByAttrName=function(e,t){for(var i=e;i;){if(i.hasAttribute(t))return i;i=i.parentElement}return null},t.debounce=function(e,t,i){var n;return function(){var s=this,o=arguments,r=function(){n=null,i||e.apply(s,o)},a=i&&!n;clearTimeout(n),n=setTimeout(r,t),a&&e.apply(s,o)}},t.getElemDistance=function(e){var t=0;if(e.offsetParent)do t+=e.offsetTop,e=e.offsetParent;while(e);return t>=0?t:0},t.getElementOffset=function(e,t){var i=t;return i>1&&(i=1),i>0&&(i=0),Math.max(e.offsetHeight*i)},t.getAdjacentEl=function(e,t){var i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1;if(e&&t){var n=e.parentNode.parentNode,s=Array.from(n.querySelectorAll(t)),o=s.indexOf(e),r=i>0?1:-1;return s[o+r]}},t.getScrollPosition=function(e){return\"bottom\"===e?Math.max((window.scrollY||window.pageYOffset)+(window.innerHeight||document.documentElement.clientHeight)):window.scrollY||window.pageYOffset},t.isInView=function(e,t,i){return this.getScrollPosition(t)>this.getElemDistance(e)+this.getElementOffset(e,i)},t.isScrolledIntoView=function(e,t){var i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1;if(e){var n=void 0;return n=i>0?t.scrollTop+t.offsetHeight>=e.offsetTop+e.offsetHeight:e.offsetTop>=t.scrollTop}},t.stripHTML=function(e){return e.replace(/&/g,\"&amp;\").replace(/>/g,\"&rt;\").replace(/</g,\"&lt;\").replace(/\"/g,\"&quot;\")}),c=(t.addAnimation=function(e,t){var i=r(),n=function n(){e.classList.remove(t),e.removeEventListener(i,n,!1)};e.classList.add(t),e.addEventListener(i,n,!1)},t.getRandomNumber=function(e,t){return Math.floor(Math.random()*(t-e)+e)}),l=t.strToEl=function(){var e=document.createElement(\"div\");return function(t){var i=t.trim(),n=void 0;for(e.innerHTML=i,n=e.children[0];e.firstChild;)e.removeChild(e.firstChild);return n}}();t.getWidthOfInput=function(e){var t=e.value||e.placeholder,i=e.offsetWidth;if(t){var n=l(\"<span>\"+a(t)+\"</span>\");if(n.style.position=\"absolute\",n.style.padding=\"0\",n.style.top=\"-9999px\",n.style.left=\"-9999px\",n.style.width=\"auto\",n.style.whiteSpace=\"pre\",document.body.contains(e)&&window.getComputedStyle){var s=window.getComputedStyle(e);s&&(n.style.fontSize=s.fontSize,n.style.fontFamily=s.fontFamily,n.style.fontWeight=s.fontWeight,n.style.fontStyle=s.fontStyle,n.style.letterSpacing=s.letterSpacing,n.style.textTransform=s.textTransform,n.style.padding=s.padding)}document.body.appendChild(n),t&&n.offsetWidth!==e.offsetWidth&&(i=n.offsetWidth+4),document.body.removeChild(n)}return i+\"px\"},t.sortByAlpha=function(e,t){var i=(e.label||e.value).toLowerCase(),n=(t.label||t.value).toLowerCase();return i<n?-1:i>n?1:0},t.sortByScore=function(e,t){return e.score-t.score},t.triggerEvent=function(e,t){var i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,n=new CustomEvent(t,{detail:i,bubbles:!0,cancelable:!0});return e.dispatchEvent(n)}},function(e,t){\"use strict\";!function(){function e(e,t){t=t||{bubbles:!1,cancelable:!1,detail:void 0};var i=document.createEvent(\"CustomEvent\");return i.initCustomEvent(e,t.bubbles,t.cancelable,t.detail),i}Array.from||(Array.from=function(){var e=Object.prototype.toString,t=function(t){return\"function\"==typeof t||\"[object Function]\"===e.call(t)},i=function(e){var t=Number(e);return isNaN(t)?0:0!==t&&isFinite(t)?(t>0?1:-1)*Math.floor(Math.abs(t)):t},n=Math.pow(2,53)-1,s=function(e){var t=i(e);return Math.min(Math.max(t,0),n)};return function(e){var i=this,n=Object(e);if(null==e)throw new TypeError(\"Array.from requires an array-like object - not null or undefined\");var o,r=arguments.length>1?arguments[1]:void 0;if(\"undefined\"!=typeof r){if(!t(r))throw new TypeError(\"Array.from: when provided, the second argument must be a function\");arguments.length>2&&(o=arguments[2])}for(var a,c=s(n.length),l=t(i)?Object(new i(c)):new Array(c),h=0;h<c;)a=n[h],r?l[h]=\"undefined\"==typeof o?r(a,h):r.call(o,a,h):l[h]=a,h+=1;return l.length=c,l}}()),Array.prototype.find||(Array.prototype.find=function(e){if(null==this)throw new TypeError(\"Array.prototype.find called on null or undefined\");if(\"function\"!=typeof e)throw new TypeError(\"predicate must be a function\");for(var t,i=Object(this),n=i.length>>>0,s=arguments[1],o=0;o<n;o++)if(t=i[o],e.call(s,t,o,i))return t}),e.prototype=window.Event.prototype,window.CustomEvent=e}()}])});\n//# sourceMappingURL=choices.min.js.map\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _Sidebar2 = __webpack_require__(5);\n\nvar _Sidebar3 = _interopRequireDefault(_Sidebar2);\n\nvar _Drake = __webpack_require__(10);\n\nvar _Drake2 = _interopRequireDefault(_Drake);\n\nvar _isomorphicFetch = __webpack_require__(6);\n\nvar _isomorphicFetch2 = _interopRequireDefault(_isomorphicFetch);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar Elements = function (_Sidebar) {\n    _inherits(Elements, _Sidebar);\n\n    function Elements() {\n        _classCallCheck(this, Elements);\n\n        return _possibleConstructorReturn(this, (Elements.__proto__ || Object.getPrototypeOf(Elements)).apply(this, arguments));\n    }\n\n    _createClass(Elements, [{\n        key: 'init',\n        value: function init() {\n            this.content = null;\n        }\n    }, {\n        key: 'click',\n        value: function click() {\n            var _this2 = this;\n\n            if (this.content !== null) {\n                return this.content;\n            }\n\n            return (0, _isomorphicFetch2.default)(this.config.assetsUrl + 'endpoints/ajax.php?action=get-elements').then(function (response) {\n                return response.json();\n            }).then(function (response) {\n                var content = document.createElement('dl');\n\n                response.data.elements.forEach(function (category) {\n                    var dt = document.createElement('dt');\n                    dt.setAttribute('role', 'tab');\n                    dt.setAttribute('tabindex', '1');\n                    dt.innerHTML = category.category;\n\n                    var dd = document.createElement('dd');\n\n                    var categoryEl = document.createElement('div');\n                    categoryEl.classList.add('fred--thumbs', 'source', 'blueprints-source');\n\n                    category.elements.forEach(function (element) {\n                        categoryEl.appendChild(Elements.elementWrapper(element.id, element.title, element.description, element.image, element.content, element.options || {}));\n                    });\n\n                    dd.appendChild(categoryEl);\n\n                    content.appendChild(dt);\n                    content.appendChild(dd);\n                });\n\n                _this2.content = content;\n\n                return _this2.content;\n            });\n        }\n    }, {\n        key: 'afterExpand',\n        value: function afterExpand() {\n            _Drake2.default.reloadContainers();\n        }\n    }], [{\n        key: 'elementWrapper',\n        value: function elementWrapper(id, title, description, image, content, options) {\n            var figure = document.createElement('figure');\n            figure.classList.add('fred--thumb');\n\n            var div = document.createElement('div');\n            var img = document.createElement('img');\n            img.src = image;\n            img.alt = title;\n\n            div.appendChild(img);\n\n            var figCaption = document.createElement('figcaption');\n            figCaption.innerHTML = '<strong>' + title + '</strong><em>' + description + '</em>';\n\n            var chunk = document.createElement('div');\n            chunk.classList.add('chunk');\n            chunk.dataset.fredElementId = id;\n            chunk.setAttribute('hidden', 'hidden');\n            chunk.innerHTML = content;\n            chunk.elementOptions = options;\n\n            figure.appendChild(div);\n            figure.appendChild(figCaption);\n            figure.appendChild(chunk);\n\n            return figure;\n        }\n    }]);\n\n    return Elements;\n}(_Sidebar3.default);\n\nElements.title = 'Elements';\nElements.expandable = true;\nexports.default = Elements;\nmodule.exports = exports['default'];\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9fYnVpbGQvYXNzZXRzL2pzL0NvbXBvbmVudHMvU2lkZWJhci9FbGVtZW50cy5qcz9mYWUyIl0sIm5hbWVzIjpbIkVsZW1lbnRzIiwiY29udGVudCIsImNvbmZpZyIsImFzc2V0c1VybCIsInRoZW4iLCJyZXNwb25zZSIsImpzb24iLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJkYXRhIiwiZWxlbWVudHMiLCJmb3JFYWNoIiwiZHQiLCJzZXRBdHRyaWJ1dGUiLCJpbm5lckhUTUwiLCJjYXRlZ29yeSIsImRkIiwiY2F0ZWdvcnlFbCIsImNsYXNzTGlzdCIsImFkZCIsImFwcGVuZENoaWxkIiwiZWxlbWVudFdyYXBwZXIiLCJlbGVtZW50IiwiaWQiLCJ0aXRsZSIsImRlc2NyaXB0aW9uIiwiaW1hZ2UiLCJvcHRpb25zIiwicmVsb2FkQ29udGFpbmVycyIsImZpZ3VyZSIsImRpdiIsImltZyIsInNyYyIsImFsdCIsImZpZ0NhcHRpb24iLCJjaHVuayIsImRhdGFzZXQiLCJmcmVkRWxlbWVudElkIiwiZWxlbWVudE9wdGlvbnMiLCJleHBhbmRhYmxlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBOzs7O0FBQ0E7Ozs7QUFDQTs7Ozs7Ozs7Ozs7O0lBRXFCQSxROzs7Ozs7Ozs7OzsrQkFJVjtBQUNILGlCQUFLQyxPQUFMLEdBQWUsSUFBZjtBQUNIOzs7Z0NBRU87QUFBQTs7QUFDSixnQkFBSSxLQUFLQSxPQUFMLEtBQWlCLElBQXJCLEVBQTJCO0FBQ3ZCLHVCQUFPLEtBQUtBLE9BQVo7QUFDSDs7QUFFRCxtQkFBTywrQkFBUyxLQUFLQyxNQUFMLENBQVlDLFNBQXJCLDZDQUNGQyxJQURFLENBQ0csb0JBQVk7QUFDZCx1QkFBT0MsU0FBU0MsSUFBVCxFQUFQO0FBQ0gsYUFIRSxFQUlGRixJQUpFLENBSUcsb0JBQVk7QUFDZCxvQkFBTUgsVUFBVU0sU0FBU0MsYUFBVCxDQUF1QixJQUF2QixDQUFoQjs7QUFHQUgseUJBQVNJLElBQVQsQ0FBY0MsUUFBZCxDQUF1QkMsT0FBdkIsQ0FBK0Isb0JBQVk7QUFDdkMsd0JBQU1DLEtBQUtMLFNBQVNDLGFBQVQsQ0FBdUIsSUFBdkIsQ0FBWDtBQUNBSSx1QkFBR0MsWUFBSCxDQUFnQixNQUFoQixFQUF3QixLQUF4QjtBQUNBRCx1QkFBR0MsWUFBSCxDQUFnQixVQUFoQixFQUE0QixHQUE1QjtBQUNBRCx1QkFBR0UsU0FBSCxHQUFlQyxTQUFTQSxRQUF4Qjs7QUFFQSx3QkFBTUMsS0FBS1QsU0FBU0MsYUFBVCxDQUF1QixJQUF2QixDQUFYOztBQUVBLHdCQUFNUyxhQUFhVixTQUFTQyxhQUFULENBQXVCLEtBQXZCLENBQW5CO0FBQ0FTLCtCQUFXQyxTQUFYLENBQXFCQyxHQUFyQixDQUF5QixjQUF6QixFQUF5QyxRQUF6QyxFQUFtRCxtQkFBbkQ7O0FBRUFKLDZCQUFTTCxRQUFULENBQWtCQyxPQUFsQixDQUEwQixtQkFBVztBQUNqQ00sbUNBQVdHLFdBQVgsQ0FBdUJwQixTQUFTcUIsY0FBVCxDQUF3QkMsUUFBUUMsRUFBaEMsRUFBb0NELFFBQVFFLEtBQTVDLEVBQW1ERixRQUFRRyxXQUEzRCxFQUF3RUgsUUFBUUksS0FBaEYsRUFBdUZKLFFBQVFyQixPQUEvRixFQUF3R3FCLFFBQVFLLE9BQVIsSUFBbUIsRUFBM0gsQ0FBdkI7QUFDSCxxQkFGRDs7QUFJQVgsdUJBQUdJLFdBQUgsQ0FBZUgsVUFBZjs7QUFFQWhCLDRCQUFRbUIsV0FBUixDQUFvQlIsRUFBcEI7QUFDQVgsNEJBQVFtQixXQUFSLENBQW9CSixFQUFwQjtBQUNILGlCQW5CRDs7QUFxQkEsdUJBQUtmLE9BQUwsR0FBZUEsT0FBZjs7QUFFQSx1QkFBTyxPQUFLQSxPQUFaO0FBQ0gsYUFoQ0UsQ0FBUDtBQWlDSDs7O3NDQThCYTtBQUNWLDRCQUFNMkIsZ0JBQU47QUFDSDs7O3VDQTlCcUJMLEUsRUFBSUMsSyxFQUFPQyxXLEVBQWFDLEssRUFBT3pCLE8sRUFBUzBCLE8sRUFBUztBQUNuRSxnQkFBTUUsU0FBU3RCLFNBQVNDLGFBQVQsQ0FBdUIsUUFBdkIsQ0FBZjtBQUNBcUIsbUJBQU9YLFNBQVAsQ0FBaUJDLEdBQWpCLENBQXFCLGFBQXJCOztBQUVBLGdCQUFNVyxNQUFNdkIsU0FBU0MsYUFBVCxDQUF1QixLQUF2QixDQUFaO0FBQ0EsZ0JBQU11QixNQUFNeEIsU0FBU0MsYUFBVCxDQUF1QixLQUF2QixDQUFaO0FBQ0F1QixnQkFBSUMsR0FBSixHQUFVTixLQUFWO0FBQ0FLLGdCQUFJRSxHQUFKLEdBQVVULEtBQVY7O0FBRUFNLGdCQUFJVixXQUFKLENBQWdCVyxHQUFoQjs7QUFFQSxnQkFBTUcsYUFBYTNCLFNBQVNDLGFBQVQsQ0FBdUIsWUFBdkIsQ0FBbkI7QUFDQTBCLHVCQUFXcEIsU0FBWCxnQkFBa0NVLEtBQWxDLHFCQUF1REMsV0FBdkQ7O0FBRUEsZ0JBQU1VLFFBQVE1QixTQUFTQyxhQUFULENBQXVCLEtBQXZCLENBQWQ7QUFDQTJCLGtCQUFNakIsU0FBTixDQUFnQkMsR0FBaEIsQ0FBb0IsT0FBcEI7QUFDQWdCLGtCQUFNQyxPQUFOLENBQWNDLGFBQWQsR0FBOEJkLEVBQTlCO0FBQ0FZLGtCQUFNdEIsWUFBTixDQUFtQixRQUFuQixFQUE2QixRQUE3QjtBQUNBc0Isa0JBQU1yQixTQUFOLEdBQWtCYixPQUFsQjtBQUNBa0Msa0JBQU1HLGNBQU4sR0FBdUJYLE9BQXZCOztBQUVBRSxtQkFBT1QsV0FBUCxDQUFtQlUsR0FBbkI7QUFDQUQsbUJBQU9ULFdBQVAsQ0FBbUJjLFVBQW5CO0FBQ0FMLG1CQUFPVCxXQUFQLENBQW1CZSxLQUFuQjs7QUFFQSxtQkFBT04sTUFBUDtBQUNIOzs7Ozs7QUExRWdCN0IsUSxDQUNWd0IsSyxHQUFRLFU7QUFERXhCLFEsQ0FFVnVDLFUsR0FBYSxJO2tCQUZIdkMsUSIsImZpbGUiOiI5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFNpZGViYXIgZnJvbSAnLi4vU2lkZWJhcic7XG5pbXBvcnQgZHJha2UgZnJvbSAnLi4vLi4vRHJha2UnO1xuaW1wb3J0IGZldGNoIGZyb20gJ2lzb21vcnBoaWMtZmV0Y2gnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBFbGVtZW50cyBleHRlbmRzIFNpZGViYXIge1xuICAgIHN0YXRpYyB0aXRsZSA9ICdFbGVtZW50cyc7XG4gICAgc3RhdGljIGV4cGFuZGFibGUgPSB0cnVlO1xuXG4gICAgaW5pdCgpIHtcbiAgICAgICAgdGhpcy5jb250ZW50ID0gbnVsbDtcbiAgICB9XG5cbiAgICBjbGljaygpIHtcbiAgICAgICAgaWYgKHRoaXMuY29udGVudCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29udGVudDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmZXRjaChgJHt0aGlzLmNvbmZpZy5hc3NldHNVcmx9ZW5kcG9pbnRzL2FqYXgucGhwP2FjdGlvbj1nZXQtZWxlbWVudHNgKVxuICAgICAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZS5qc29uKCk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNvbnRlbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkbCcpO1xuICAgICAgICAgICAgICAgIFxuXG4gICAgICAgICAgICAgICAgcmVzcG9uc2UuZGF0YS5lbGVtZW50cy5mb3JFYWNoKGNhdGVnb3J5ID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkdCcpO1xuICAgICAgICAgICAgICAgICAgICBkdC5zZXRBdHRyaWJ1dGUoJ3JvbGUnLCAndGFiJyk7XG4gICAgICAgICAgICAgICAgICAgIGR0LnNldEF0dHJpYnV0ZSgndGFiaW5kZXgnLCAnMScpO1xuICAgICAgICAgICAgICAgICAgICBkdC5pbm5lckhUTUwgPSBjYXRlZ29yeS5jYXRlZ29yeTtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGRkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGQnKTtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNhdGVnb3J5RWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgICAgICAgICAgY2F0ZWdvcnlFbC5jbGFzc0xpc3QuYWRkKCdmcmVkLS10aHVtYnMnLCAnc291cmNlJywgJ2JsdWVwcmludHMtc291cmNlJyk7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBjYXRlZ29yeS5lbGVtZW50cy5mb3JFYWNoKGVsZW1lbnQgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2F0ZWdvcnlFbC5hcHBlbmRDaGlsZChFbGVtZW50cy5lbGVtZW50V3JhcHBlcihlbGVtZW50LmlkLCBlbGVtZW50LnRpdGxlLCBlbGVtZW50LmRlc2NyaXB0aW9uLCBlbGVtZW50LmltYWdlLCBlbGVtZW50LmNvbnRlbnQsIGVsZW1lbnQub3B0aW9ucyB8fCB7fSkpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICBkZC5hcHBlbmRDaGlsZChjYXRlZ29yeUVsKTtcblxuICAgICAgICAgICAgICAgICAgICBjb250ZW50LmFwcGVuZENoaWxkKGR0KTtcbiAgICAgICAgICAgICAgICAgICAgY29udGVudC5hcHBlbmRDaGlsZChkZCk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRlbnQgPSBjb250ZW50O1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29udGVudDtcbiAgICAgICAgICAgIH0pO1xuICAgIH1cblxuICAgIHN0YXRpYyBlbGVtZW50V3JhcHBlcihpZCwgdGl0bGUsIGRlc2NyaXB0aW9uLCBpbWFnZSwgY29udGVudCwgb3B0aW9ucykge1xuICAgICAgICBjb25zdCBmaWd1cmUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdmaWd1cmUnKTtcbiAgICAgICAgZmlndXJlLmNsYXNzTGlzdC5hZGQoJ2ZyZWQtLXRodW1iJyk7XG5cbiAgICAgICAgY29uc3QgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIGNvbnN0IGltZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2ltZycpO1xuICAgICAgICBpbWcuc3JjID0gaW1hZ2U7XG4gICAgICAgIGltZy5hbHQgPSB0aXRsZTtcblxuICAgICAgICBkaXYuYXBwZW5kQ2hpbGQoaW1nKTtcblxuICAgICAgICBjb25zdCBmaWdDYXB0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZmlnY2FwdGlvbicpO1xuICAgICAgICBmaWdDYXB0aW9uLmlubmVySFRNTCA9IGA8c3Ryb25nPiR7dGl0bGV9PC9zdHJvbmc+PGVtPiR7ZGVzY3JpcHRpb259PC9lbT5gO1xuXG4gICAgICAgIGNvbnN0IGNodW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIGNodW5rLmNsYXNzTGlzdC5hZGQoJ2NodW5rJyk7XG4gICAgICAgIGNodW5rLmRhdGFzZXQuZnJlZEVsZW1lbnRJZCA9IGlkO1xuICAgICAgICBjaHVuay5zZXRBdHRyaWJ1dGUoJ2hpZGRlbicsICdoaWRkZW4nKTtcbiAgICAgICAgY2h1bmsuaW5uZXJIVE1MID0gY29udGVudDtcbiAgICAgICAgY2h1bmsuZWxlbWVudE9wdGlvbnMgPSBvcHRpb25zO1xuXG4gICAgICAgIGZpZ3VyZS5hcHBlbmRDaGlsZChkaXYpO1xuICAgICAgICBmaWd1cmUuYXBwZW5kQ2hpbGQoZmlnQ2FwdGlvbik7XG4gICAgICAgIGZpZ3VyZS5hcHBlbmRDaGlsZChjaHVuayk7XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gZmlndXJlO1xuICAgIH1cblxuICAgIGFmdGVyRXhwYW5kKCkge1xuICAgICAgICBkcmFrZS5yZWxvYWRDb250YWluZXJzKCk7XG4gICAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vX2J1aWxkL2Fzc2V0cy9qcy9Db21wb25lbnRzL1NpZGViYXIvRWxlbWVudHMuanMiXSwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _EE = __webpack_require__(1);\n\nvar _EE2 = _interopRequireDefault(_EE);\n\nvar _dragula = __webpack_require__(11);\n\nvar _dragula2 = _interopRequireDefault(_dragula);\n\nvar _ContentElement = __webpack_require__(23);\n\nvar _ContentElement2 = _interopRequireDefault(_ContentElement);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Drake = function () {\n    function Drake() {\n        _classCallCheck(this, Drake);\n\n        this.drake = null;\n\n        this.topScroll = null;\n        this.bottomScroll = null;\n        this.scrollSpeed = null;\n        this.lastPosition = null;\n\n        this.scrollHandler = this.scrollHandler.bind(this);\n    }\n\n    _createClass(Drake, [{\n        key: 'initDrake',\n        value: function initDrake(config) {\n            var _this = this;\n\n            this.config = config;\n\n            var containers = [].concat(_toConsumableArray(document.querySelectorAll('[data-fred-dropzone]:not([data-fred-dropzone=\"\"])')));\n            containers.unshift.apply(containers, _toConsumableArray(document.querySelectorAll('.source')));\n\n            var contains = function contains(a, b) {\n                return a.contains ? a != b && a.contains(b) : !!(a.compareDocumentPosition(b) & Node.DOCUMENT_POSITION_CONTAINED_BY);\n            };\n\n            try {\n                this.drake = (0, _dragula2.default)(containers, {\n                    copy: function copy(el, source) {\n                        return source.classList.contains('source');\n                    },\n                    accepts: function accepts(el, target) {\n                        if (!contains(el, target) === false) {\n                            return false;\n                        }\n\n                        return !target.classList.contains('source');\n                    },\n                    moves: function moves(el, source, handle, sibling) {\n                        if (source.dataset.fredDropzone !== undefined && source.dataset.fredDropzone !== '') {\n                            return handle.classList.contains('handle');\n                        }\n\n                        return true;\n                    }\n                });\n            } catch (err) {}\n\n            this.drake.on('cloned', function (clone, original, type) {\n                if (type === 'copy') {\n                    clone.lastChild.elementOptions = original.lastChild.elementOptions;\n                }\n            });\n\n            this.drake.on('drop', function (el, target, source, sibling) {\n                //emitter.emit('fred-dragula-drop', el, target, source, sibling);\n\n                if (source.classList.contains('blueprints-source') && el.parentNode) {\n                    var parent = target.fredEl || null;\n                    var contentElement = new _ContentElement2.default(_this.config, el.lastChild, target.dataset.fredDropzone, parent);\n                    contentElement.render().then(function () {\n                        if (parent) {\n                            if (sibling === null) {\n                                parent.dzs[target.dataset.fredDropzone].children.push(contentElement.wrapper);\n                            } else {\n                                parent.dzs[target.dataset.fredDropzone].children.splice(parent.dzs[target.dataset.fredDropzone].children.indexOf(sibling), 0, contentElement.wrapper);\n                            }\n                        }\n\n                        el.parentNode.replaceChild(contentElement.wrapper, el);\n                    });\n                } else {\n                    if (target && el.fredEl) {\n                        if (el.fredEl.parent) {\n                            el.fredEl.parent.dzs[source.dataset.fredDropzone].children.splice(el.fredEl.parent.dzs[source.dataset.fredDropzone].children.indexOf(el), 1);\n                        }\n\n                        var _parent = target.fredEl || null;\n                        if (_parent) {\n                            if (sibling === null) {\n                                _parent.dzs[target.dataset.fredDropzone].children.push(el);\n                            } else {\n                                _parent.dzs[target.dataset.fredDropzone].children.splice(_parent.dzs[target.dataset.fredDropzone].children.indexOf(sibling), 0, el);\n                            }\n                        }\n                        el.fredEl.parent = _parent;\n                        el.fredEl.dzName = target.dataset.fredDropzone;\n                    }\n                }\n\n                _this.reloadContainers();\n            });\n\n            this.drake.on('drag', function (el, source) {\n                _this.registerScroller();\n\n                var dropZones = document.querySelectorAll('[data-fred-dropzone]');\n                var _iteratorNormalCompletion = true;\n                var _didIteratorError = false;\n                var _iteratorError = undefined;\n\n                try {\n                    for (var _iterator = dropZones[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                        var zone = _step.value;\n\n                        zone.classList.add('fred--dropzone_highlight');\n                    }\n                } catch (err) {\n                    _didIteratorError = true;\n                    _iteratorError = err;\n                } finally {\n                    try {\n                        if (!_iteratorNormalCompletion && _iterator.return) {\n                            _iterator.return();\n                        }\n                    } finally {\n                        if (_didIteratorError) {\n                            throw _iteratorError;\n                        }\n                    }\n                }\n\n                _EE2.default.emit('fred-sidebar-hide', true);\n            });\n\n            this.drake.on('dragend', function (el) {\n                _this.removeScroller();\n\n                var dropZones = document.querySelectorAll('[data-fred-dropzone]');\n                var _iteratorNormalCompletion2 = true;\n                var _didIteratorError2 = false;\n                var _iteratorError2 = undefined;\n\n                try {\n                    for (var _iterator2 = dropZones[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                        var zone = _step2.value;\n\n                        zone.classList.remove('fred--dropzone_highlight');\n                    }\n                } catch (err) {\n                    _didIteratorError2 = true;\n                    _iteratorError2 = err;\n                } finally {\n                    try {\n                        if (!_iteratorNormalCompletion2 && _iterator2.return) {\n                            _iterator2.return();\n                        }\n                    } finally {\n                        if (_didIteratorError2) {\n                            throw _iteratorError2;\n                        }\n                    }\n                }\n\n                _EE2.default.emit('fred-sidebar-show', true);\n            });\n        }\n    }, {\n        key: 'cancelScroll',\n        value: function cancelScroll(type) {\n            if (this[type + 'Scroll']) {\n                clearInterval(this[type + 'Scroll']);\n                this[type + 'Scroll'] = null;\n                this.scrollSpeed = null;\n                this.lastPosition = null;\n            }\n        }\n    }, {\n        key: 'scrollWindow',\n        value: function scrollWindow(e, type, breakpoints) {\n            var _this2 = this;\n\n            var start = false;\n            var speed = null;\n\n            breakpoints.forEach(function (breakpoint) {\n                if (type === 'top') {\n                    var currentBreakpoint = e.y > window.innerHeight - breakpoint.offset;\n                    start = start || currentBreakpoint;\n\n                    if (currentBreakpoint) {\n                        speed = breakpoint.speed;\n                    }\n                } else {\n                    var _currentBreakpoint = e.y < breakpoint.offset;\n                    start = start || _currentBreakpoint;\n\n                    if (_currentBreakpoint) {\n                        speed = -1 * breakpoint.speed;\n                    }\n                }\n            });\n\n            if (start) {\n                if (this[type + 'Scroll'] && speed !== this.scrollSpeed) {\n                    clearInterval(this[type + 'Scroll']);\n                    this[type + 'Scroll'] = null;\n                }\n\n                if (this[type + 'Scroll'] === null) {\n                    this.lastPosition = window.innerHeight + window.scrollY;\n\n                    this[type + 'Scroll'] = setInterval(function () {\n                        _this2.scrollSpeed = speed;\n                        window.scrollBy(0, speed);\n                        var newPosition = window.innerHeight + window.scrollY;\n\n                        if (_this2.lastPosition === newPosition) {\n                            _this2.cancelScroll(type);\n                        }\n\n                        _this2.lastPosition = newPosition;\n                    }, 5);\n                }\n            } else {\n                this.cancelScroll(type);\n            }\n        }\n    }, {\n        key: 'scrollHandler',\n        value: function scrollHandler(e) {\n            this.scrollWindow(e, 'top', [{ offset: 60, speed: 2 }, { offset: 30, speed: 8 }]);\n            this.scrollWindow(e, 'bottom', [{ offset: 60, speed: 2 }, { offset: 30, speed: 8 }]);\n        }\n    }, {\n        key: 'registerScroller',\n        value: function registerScroller() {\n            this.topScroll = null;\n            this.bottomScroll = null;\n            this.scrollSpeed = null;\n            this.lastPosition = null;\n\n            document.addEventListener('mousemove', this.scrollHandler);\n        }\n    }, {\n        key: 'removeScroller',\n        value: function removeScroller() {\n            document.removeEventListener('mousemove', this.scrollHandler);\n        }\n    }, {\n        key: 'reloadContainers',\n        value: function reloadContainers() {\n            var initContainer = document.querySelectorAll('[data-fred-dropzone]:not([data-fred-dropzone=\"\"])');\n            var containers = [].concat(_toConsumableArray(initContainer));\n\n            for (var i = 0; i < initContainer.length; i++) {\n                containers.push.apply(containers, _toConsumableArray(initContainer[i].querySelectorAll('[data-fred-dropzone]:not([data-fred-dropzone=\"\"])')));\n            }\n\n            containers.unshift.apply(containers, _toConsumableArray(document.querySelectorAll('.source')));\n\n            this.drake.containers = containers;\n        }\n    }]);\n\n    return Drake;\n}();\n\nvar drake = new Drake();\n\nexports.default = drake;\nmodule.exports = exports['default'];\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9fYnVpbGQvYXNzZXRzL2pzL0RyYWtlLmpzP2IwNTgiXSwibmFtZXMiOlsiRHJha2UiLCJkcmFrZSIsInRvcFNjcm9sbCIsImJvdHRvbVNjcm9sbCIsInNjcm9sbFNwZWVkIiwibGFzdFBvc2l0aW9uIiwic2Nyb2xsSGFuZGxlciIsImJpbmQiLCJjb25maWciLCJjb250YWluZXJzIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yQWxsIiwidW5zaGlmdCIsImNvbnRhaW5zIiwiYSIsImIiLCJjb21wYXJlRG9jdW1lbnRQb3NpdGlvbiIsIk5vZGUiLCJET0NVTUVOVF9QT1NJVElPTl9DT05UQUlORURfQlkiLCJjb3B5IiwiZWwiLCJzb3VyY2UiLCJjbGFzc0xpc3QiLCJhY2NlcHRzIiwidGFyZ2V0IiwibW92ZXMiLCJoYW5kbGUiLCJzaWJsaW5nIiwiZGF0YXNldCIsImZyZWREcm9wem9uZSIsInVuZGVmaW5lZCIsImVyciIsIm9uIiwiY2xvbmUiLCJvcmlnaW5hbCIsInR5cGUiLCJsYXN0Q2hpbGQiLCJlbGVtZW50T3B0aW9ucyIsInBhcmVudE5vZGUiLCJwYXJlbnQiLCJmcmVkRWwiLCJjb250ZW50RWxlbWVudCIsInJlbmRlciIsInRoZW4iLCJkenMiLCJjaGlsZHJlbiIsInB1c2giLCJ3cmFwcGVyIiwic3BsaWNlIiwiaW5kZXhPZiIsInJlcGxhY2VDaGlsZCIsImR6TmFtZSIsInJlbG9hZENvbnRhaW5lcnMiLCJyZWdpc3RlclNjcm9sbGVyIiwiZHJvcFpvbmVzIiwiem9uZSIsImFkZCIsImVtaXQiLCJyZW1vdmVTY3JvbGxlciIsInJlbW92ZSIsImNsZWFySW50ZXJ2YWwiLCJlIiwiYnJlYWtwb2ludHMiLCJzdGFydCIsInNwZWVkIiwiZm9yRWFjaCIsImN1cnJlbnRCcmVha3BvaW50IiwieSIsIndpbmRvdyIsImlubmVySGVpZ2h0IiwiYnJlYWtwb2ludCIsIm9mZnNldCIsInNjcm9sbFkiLCJzZXRJbnRlcnZhbCIsInNjcm9sbEJ5IiwibmV3UG9zaXRpb24iLCJjYW5jZWxTY3JvbGwiLCJzY3JvbGxXaW5kb3ciLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImluaXRDb250YWluZXIiLCJpIiwibGVuZ3RoIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBOzs7O0FBQ0E7Ozs7QUFDQTs7Ozs7Ozs7OztJQUVNQSxLO0FBQ0YscUJBQWM7QUFBQTs7QUFDVixhQUFLQyxLQUFMLEdBQWEsSUFBYjs7QUFFQSxhQUFLQyxTQUFMLEdBQWlCLElBQWpCO0FBQ0EsYUFBS0MsWUFBTCxHQUFvQixJQUFwQjtBQUNBLGFBQUtDLFdBQUwsR0FBbUIsSUFBbkI7QUFDQSxhQUFLQyxZQUFMLEdBQW9CLElBQXBCOztBQUVBLGFBQUtDLGFBQUwsR0FBcUIsS0FBS0EsYUFBTCxDQUFtQkMsSUFBbkIsQ0FBd0IsSUFBeEIsQ0FBckI7QUFDSDs7OztrQ0FFU0MsTSxFQUFRO0FBQUE7O0FBQ2QsaUJBQUtBLE1BQUwsR0FBY0EsTUFBZDs7QUFFQSxnQkFBTUMsMENBQWlCQyxTQUFTQyxnQkFBVCxDQUEwQixtREFBMUIsQ0FBakIsRUFBTjtBQUNBRix1QkFBV0csT0FBWCxzQ0FBdUJGLFNBQVNDLGdCQUFULENBQTBCLFNBQTFCLENBQXZCOztBQUVBLGdCQUFNRSxXQUFXLFNBQVhBLFFBQVcsQ0FBQ0MsQ0FBRCxFQUFJQyxDQUFKLEVBQVU7QUFDdkIsdUJBQU9ELEVBQUVELFFBQUYsR0FBYUMsS0FBS0MsQ0FBTCxJQUFVRCxFQUFFRCxRQUFGLENBQVdFLENBQVgsQ0FBdkIsR0FBdUMsQ0FBQyxFQUFFRCxFQUFFRSx1QkFBRixDQUEwQkQsQ0FBMUIsSUFBK0JFLEtBQUtDLDhCQUF0QyxDQUEvQztBQUNILGFBRkQ7O0FBSUEsZ0JBQUk7QUFDQSxxQkFBS2pCLEtBQUwsR0FBYSx1QkFBUVEsVUFBUixFQUFvQjtBQUM3QlUsMEJBQU0sY0FBVUMsRUFBVixFQUFjQyxNQUFkLEVBQXNCO0FBQ3hCLCtCQUFPQSxPQUFPQyxTQUFQLENBQWlCVCxRQUFqQixDQUEwQixRQUExQixDQUFQO0FBQ0gscUJBSDRCO0FBSTdCVSw2QkFBUyxpQkFBVUgsRUFBVixFQUFjSSxNQUFkLEVBQXNCO0FBQzNCLDRCQUFJLENBQUNYLFNBQVNPLEVBQVQsRUFBYUksTUFBYixDQUFELEtBQTBCLEtBQTlCLEVBQXFDO0FBQ2pDLG1DQUFPLEtBQVA7QUFDSDs7QUFFRCwrQkFBTyxDQUFDQSxPQUFPRixTQUFQLENBQWlCVCxRQUFqQixDQUEwQixRQUExQixDQUFSO0FBQ0gscUJBVjRCO0FBVzdCWSwyQkFBTyxlQUFVTCxFQUFWLEVBQWNDLE1BQWQsRUFBc0JLLE1BQXRCLEVBQThCQyxPQUE5QixFQUF1QztBQUMxQyw0QkFBS04sT0FBT08sT0FBUCxDQUFlQyxZQUFmLEtBQWdDQyxTQUFqQyxJQUFnRFQsT0FBT08sT0FBUCxDQUFlQyxZQUFmLEtBQWdDLEVBQXBGLEVBQXlGO0FBQ3JGLG1DQUFPSCxPQUFPSixTQUFQLENBQWlCVCxRQUFqQixDQUEwQixRQUExQixDQUFQO0FBQ0g7O0FBRUQsK0JBQU8sSUFBUDtBQUNIO0FBakI0QixpQkFBcEIsQ0FBYjtBQW1CSCxhQXBCRCxDQW9CRSxPQUFPa0IsR0FBUCxFQUFZLENBQ2I7O0FBRUQsaUJBQUs5QixLQUFMLENBQVcrQixFQUFYLENBQWMsUUFBZCxFQUF3QixVQUFDQyxLQUFELEVBQVFDLFFBQVIsRUFBa0JDLElBQWxCLEVBQTJCO0FBQy9DLG9CQUFJQSxTQUFTLE1BQWIsRUFBcUI7QUFDakJGLDBCQUFNRyxTQUFOLENBQWdCQyxjQUFoQixHQUFpQ0gsU0FBU0UsU0FBVCxDQUFtQkMsY0FBcEQ7QUFDSDtBQUNKLGFBSkQ7O0FBTUEsaUJBQUtwQyxLQUFMLENBQVcrQixFQUFYLENBQWMsTUFBZCxFQUFzQixVQUFDWixFQUFELEVBQUtJLE1BQUwsRUFBYUgsTUFBYixFQUFxQk0sT0FBckIsRUFBaUM7QUFDbkQ7O0FBRUEsb0JBQUlOLE9BQU9DLFNBQVAsQ0FBaUJULFFBQWpCLENBQTBCLG1CQUExQixLQUFrRE8sR0FBR2tCLFVBQXpELEVBQXFFO0FBQ2pFLHdCQUFNQyxTQUFTZixPQUFPZ0IsTUFBUCxJQUFpQixJQUFoQztBQUNBLHdCQUFNQyxpQkFBaUIsNkJBQW1CLE1BQUtqQyxNQUF4QixFQUFnQ1ksR0FBR2dCLFNBQW5DLEVBQThDWixPQUFPSSxPQUFQLENBQWVDLFlBQTdELEVBQTJFVSxNQUEzRSxDQUF2QjtBQUNBRSxtQ0FBZUMsTUFBZixHQUF3QkMsSUFBeEIsQ0FBNkIsWUFBTTtBQUMvQiw0QkFBSUosTUFBSixFQUFZO0FBQ1IsZ0NBQUlaLFlBQVksSUFBaEIsRUFBc0I7QUFDbEJZLHVDQUFPSyxHQUFQLENBQVdwQixPQUFPSSxPQUFQLENBQWVDLFlBQTFCLEVBQXdDZ0IsUUFBeEMsQ0FBaURDLElBQWpELENBQXNETCxlQUFlTSxPQUFyRTtBQUNILDZCQUZELE1BRU87QUFDSFIsdUNBQU9LLEdBQVAsQ0FBV3BCLE9BQU9JLE9BQVAsQ0FBZUMsWUFBMUIsRUFBd0NnQixRQUF4QyxDQUFpREcsTUFBakQsQ0FBd0RULE9BQU9LLEdBQVAsQ0FBV3BCLE9BQU9JLE9BQVAsQ0FBZUMsWUFBMUIsRUFBd0NnQixRQUF4QyxDQUFpREksT0FBakQsQ0FBeUR0QixPQUF6RCxDQUF4RCxFQUEySCxDQUEzSCxFQUE4SGMsZUFBZU0sT0FBN0k7QUFDSDtBQUNKOztBQUVEM0IsMkJBQUdrQixVQUFILENBQWNZLFlBQWQsQ0FBMkJULGVBQWVNLE9BQTFDLEVBQW1EM0IsRUFBbkQ7QUFDSCxxQkFWRDtBQVdILGlCQWRELE1BY087QUFDSCx3QkFBSUksVUFBVUosR0FBR29CLE1BQWpCLEVBQXlCO0FBQ3JCLDRCQUFJcEIsR0FBR29CLE1BQUgsQ0FBVUQsTUFBZCxFQUFzQjtBQUNsQm5CLCtCQUFHb0IsTUFBSCxDQUFVRCxNQUFWLENBQWlCSyxHQUFqQixDQUFxQnZCLE9BQU9PLE9BQVAsQ0FBZUMsWUFBcEMsRUFBa0RnQixRQUFsRCxDQUEyREcsTUFBM0QsQ0FBa0U1QixHQUFHb0IsTUFBSCxDQUFVRCxNQUFWLENBQWlCSyxHQUFqQixDQUFxQnZCLE9BQU9PLE9BQVAsQ0FBZUMsWUFBcEMsRUFBa0RnQixRQUFsRCxDQUEyREksT0FBM0QsQ0FBbUU3QixFQUFuRSxDQUFsRSxFQUEwSSxDQUExSTtBQUNIOztBQUVELDRCQUFNbUIsVUFBU2YsT0FBT2dCLE1BQVAsSUFBaUIsSUFBaEM7QUFDQSw0QkFBSUQsT0FBSixFQUFZO0FBQ1IsZ0NBQUlaLFlBQVksSUFBaEIsRUFBc0I7QUFDbEJZLHdDQUFPSyxHQUFQLENBQVdwQixPQUFPSSxPQUFQLENBQWVDLFlBQTFCLEVBQXdDZ0IsUUFBeEMsQ0FBaURDLElBQWpELENBQXNEMUIsRUFBdEQ7QUFDSCw2QkFGRCxNQUVPO0FBQ0htQix3Q0FBT0ssR0FBUCxDQUFXcEIsT0FBT0ksT0FBUCxDQUFlQyxZQUExQixFQUF3Q2dCLFFBQXhDLENBQWlERyxNQUFqRCxDQUF3RFQsUUFBT0ssR0FBUCxDQUFXcEIsT0FBT0ksT0FBUCxDQUFlQyxZQUExQixFQUF3Q2dCLFFBQXhDLENBQWlESSxPQUFqRCxDQUF5RHRCLE9BQXpELENBQXhELEVBQTJILENBQTNILEVBQThIUCxFQUE5SDtBQUNIO0FBQ0o7QUFDREEsMkJBQUdvQixNQUFILENBQVVELE1BQVYsR0FBbUJBLE9BQW5CO0FBQ0FuQiwyQkFBR29CLE1BQUgsQ0FBVVcsTUFBVixHQUFtQjNCLE9BQU9JLE9BQVAsQ0FBZUMsWUFBbEM7QUFDSDtBQUNKOztBQUVELHNCQUFLdUIsZ0JBQUw7QUFDSCxhQXJDRDs7QUF1Q0EsaUJBQUtuRCxLQUFMLENBQVcrQixFQUFYLENBQWMsTUFBZCxFQUFzQixVQUFDWixFQUFELEVBQUtDLE1BQUwsRUFBZ0I7QUFDbEMsc0JBQUtnQyxnQkFBTDs7QUFFQSxvQkFBTUMsWUFBWTVDLFNBQVNDLGdCQUFULENBQTBCLHNCQUExQixDQUFsQjtBQUhrQztBQUFBO0FBQUE7O0FBQUE7QUFJbEMseUNBQWlCMkMsU0FBakIsOEhBQTRCO0FBQUEsNEJBQW5CQyxJQUFtQjs7QUFDeEJBLDZCQUFLakMsU0FBTCxDQUFla0MsR0FBZixDQUFtQiwwQkFBbkI7QUFDSDtBQU5pQztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQVFsQyw2QkFBUUMsSUFBUixDQUFhLG1CQUFiLEVBQWtDLElBQWxDO0FBQ0gsYUFURDs7QUFXQSxpQkFBS3hELEtBQUwsQ0FBVytCLEVBQVgsQ0FBYyxTQUFkLEVBQXlCLGNBQU07QUFDM0Isc0JBQUswQixjQUFMOztBQUVBLG9CQUFNSixZQUFZNUMsU0FBU0MsZ0JBQVQsQ0FBMEIsc0JBQTFCLENBQWxCO0FBSDJCO0FBQUE7QUFBQTs7QUFBQTtBQUkzQiwwQ0FBaUIyQyxTQUFqQixtSUFBNEI7QUFBQSw0QkFBbkJDLElBQW1COztBQUN4QkEsNkJBQUtqQyxTQUFMLENBQWVxQyxNQUFmLENBQXNCLDBCQUF0QjtBQUNIO0FBTjBCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBUTNCLDZCQUFRRixJQUFSLENBQWEsbUJBQWIsRUFBa0MsSUFBbEM7QUFDSCxhQVREO0FBV0g7OztxQ0FFWXRCLEksRUFBTTtBQUNmLGdCQUFJLEtBQUtBLE9BQU8sUUFBWixDQUFKLEVBQTJCO0FBQ3ZCeUIsOEJBQWMsS0FBS3pCLE9BQU8sUUFBWixDQUFkO0FBQ0EscUJBQUtBLE9BQU8sUUFBWixJQUF3QixJQUF4QjtBQUNBLHFCQUFLL0IsV0FBTCxHQUFtQixJQUFuQjtBQUNBLHFCQUFLQyxZQUFMLEdBQW9CLElBQXBCO0FBQ0g7QUFDSjs7O3FDQUVZd0QsQyxFQUFHMUIsSSxFQUFNMkIsVyxFQUFhO0FBQUE7O0FBQy9CLGdCQUFJQyxRQUFRLEtBQVo7QUFDQSxnQkFBSUMsUUFBUSxJQUFaOztBQUVBRix3QkFBWUcsT0FBWixDQUFvQixzQkFBYztBQUM5QixvQkFBSTlCLFNBQVMsS0FBYixFQUFvQjtBQUNoQix3QkFBTStCLG9CQUFvQkwsRUFBRU0sQ0FBRixHQUFPQyxPQUFPQyxXQUFQLEdBQXFCQyxXQUFXQyxNQUFqRTtBQUNBUiw0QkFBUUEsU0FBU0csaUJBQWpCOztBQUVBLHdCQUFJQSxpQkFBSixFQUF1QjtBQUNuQkYsZ0NBQVFNLFdBQVdOLEtBQW5CO0FBQ0g7QUFDSixpQkFQRCxNQU9RO0FBQ0osd0JBQU1FLHFCQUFvQkwsRUFBRU0sQ0FBRixHQUFNRyxXQUFXQyxNQUEzQztBQUNBUiw0QkFBUUEsU0FBU0csa0JBQWpCOztBQUVBLHdCQUFJQSxrQkFBSixFQUF1QjtBQUNuQkYsZ0NBQVEsQ0FBQyxDQUFELEdBQUtNLFdBQVdOLEtBQXhCO0FBQ0g7QUFDSjtBQUNKLGFBaEJEOztBQWtCQSxnQkFBSUQsS0FBSixFQUFXO0FBQ1Asb0JBQUksS0FBSzVCLE9BQU8sUUFBWixLQUEwQjZCLFVBQVUsS0FBSzVELFdBQTdDLEVBQTJEO0FBQ3ZEd0Qsa0NBQWMsS0FBS3pCLE9BQU8sUUFBWixDQUFkO0FBQ0EseUJBQUtBLE9BQU8sUUFBWixJQUF3QixJQUF4QjtBQUNIOztBQUVELG9CQUFJLEtBQUtBLE9BQU8sUUFBWixNQUEwQixJQUE5QixFQUFvQztBQUNoQyx5QkFBSzlCLFlBQUwsR0FBb0IrRCxPQUFPQyxXQUFQLEdBQXFCRCxPQUFPSSxPQUFoRDs7QUFFQSx5QkFBS3JDLE9BQU8sUUFBWixJQUF3QnNDLFlBQVksWUFBTTtBQUN0QywrQkFBS3JFLFdBQUwsR0FBbUI0RCxLQUFuQjtBQUNBSSwrQkFBT00sUUFBUCxDQUFnQixDQUFoQixFQUFtQlYsS0FBbkI7QUFDQSw0QkFBTVcsY0FBY1AsT0FBT0MsV0FBUCxHQUFxQkQsT0FBT0ksT0FBaEQ7O0FBRUEsNEJBQUcsT0FBS25FLFlBQUwsS0FBc0JzRSxXQUF6QixFQUFzQztBQUNsQyxtQ0FBS0MsWUFBTCxDQUFrQnpDLElBQWxCO0FBQ0g7O0FBRUQsK0JBQUs5QixZQUFMLEdBQW9Cc0UsV0FBcEI7QUFDSCxxQkFWdUIsRUFVckIsQ0FWcUIsQ0FBeEI7QUFXSDtBQUNKLGFBckJELE1BcUJPO0FBQ0gscUJBQUtDLFlBQUwsQ0FBa0J6QyxJQUFsQjtBQUNIO0FBQ0o7OztzQ0FFYTBCLEMsRUFBRztBQUNiLGlCQUFLZ0IsWUFBTCxDQUFrQmhCLENBQWxCLEVBQXFCLEtBQXJCLEVBQTRCLENBQUMsRUFBQ1UsUUFBUSxFQUFULEVBQWFQLE9BQU8sQ0FBcEIsRUFBRCxFQUF3QixFQUFDTyxRQUFPLEVBQVIsRUFBWVAsT0FBTyxDQUFuQixFQUF4QixDQUE1QjtBQUNBLGlCQUFLYSxZQUFMLENBQWtCaEIsQ0FBbEIsRUFBcUIsUUFBckIsRUFBK0IsQ0FBQyxFQUFDVSxRQUFRLEVBQVQsRUFBYVAsT0FBTyxDQUFwQixFQUFELEVBQXdCLEVBQUNPLFFBQU8sRUFBUixFQUFZUCxPQUFPLENBQW5CLEVBQXhCLENBQS9CO0FBQ0g7OzsyQ0FFa0I7QUFDZixpQkFBSzlELFNBQUwsR0FBaUIsSUFBakI7QUFDQSxpQkFBS0MsWUFBTCxHQUFvQixJQUFwQjtBQUNBLGlCQUFLQyxXQUFMLEdBQW1CLElBQW5CO0FBQ0EsaUJBQUtDLFlBQUwsR0FBb0IsSUFBcEI7O0FBRUFLLHFCQUFTb0UsZ0JBQVQsQ0FBMEIsV0FBMUIsRUFBdUMsS0FBS3hFLGFBQTVDO0FBQ0g7Ozt5Q0FFZ0I7QUFDYkkscUJBQVNxRSxtQkFBVCxDQUE2QixXQUE3QixFQUEwQyxLQUFLekUsYUFBL0M7QUFDSDs7OzJDQUVrQjtBQUNmLGdCQUFNMEUsZ0JBQWdCdEUsU0FBU0MsZ0JBQVQsQ0FBMEIsbURBQTFCLENBQXRCO0FBQ0EsZ0JBQU1GLDBDQUFpQnVFLGFBQWpCLEVBQU47O0FBRUEsaUJBQUssSUFBSUMsSUFBSSxDQUFiLEVBQWdCQSxJQUFJRCxjQUFjRSxNQUFsQyxFQUEwQ0QsR0FBMUMsRUFBK0M7QUFDM0N4RSwyQkFBV3FDLElBQVgsc0NBQW9Ca0MsY0FBY0MsQ0FBZCxFQUFpQnRFLGdCQUFqQixDQUFrQyxtREFBbEMsQ0FBcEI7QUFDSDs7QUFFREYsdUJBQVdHLE9BQVgsc0NBQXVCRixTQUFTQyxnQkFBVCxDQUEwQixTQUExQixDQUF2Qjs7QUFFQSxpQkFBS1YsS0FBTCxDQUFXUSxVQUFYLEdBQXdCQSxVQUF4QjtBQUNIOzs7Ozs7QUFHTCxJQUFNUixRQUFRLElBQUlELEtBQUosRUFBZDs7a0JBRWVDLEsiLCJmaWxlIjoiMTAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZW1pdHRlciBmcm9tICcuL0VFJztcbmltcG9ydCBkcmFndWxhIGZyb20gJ2RyYWd1bGEnO1xuaW1wb3J0IENvbnRlbnRFbGVtZW50IGZyb20gJy4vQ29tcG9uZW50cy9TaWRlYmFyL0VsZW1lbnRzL0NvbnRlbnRFbGVtZW50JztcblxuY2xhc3MgRHJha2Uge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmRyYWtlID0gbnVsbDtcblxuICAgICAgICB0aGlzLnRvcFNjcm9sbCA9IG51bGw7XG4gICAgICAgIHRoaXMuYm90dG9tU2Nyb2xsID0gbnVsbDtcbiAgICAgICAgdGhpcy5zY3JvbGxTcGVlZCA9IG51bGw7XG4gICAgICAgIHRoaXMubGFzdFBvc2l0aW9uID0gbnVsbDtcblxuICAgICAgICB0aGlzLnNjcm9sbEhhbmRsZXIgPSB0aGlzLnNjcm9sbEhhbmRsZXIuYmluZCh0aGlzKTtcbiAgICB9XG5cbiAgICBpbml0RHJha2UoY29uZmlnKSB7XG4gICAgICAgIHRoaXMuY29uZmlnID0gY29uZmlnO1xuXG4gICAgICAgIGNvbnN0IGNvbnRhaW5lcnMgPSBbLi4uZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnW2RhdGEtZnJlZC1kcm9wem9uZV06bm90KFtkYXRhLWZyZWQtZHJvcHpvbmU9XCJcIl0pJyldO1xuICAgICAgICBjb250YWluZXJzLnVuc2hpZnQoLi4uKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5zb3VyY2UnKSkpO1xuXG4gICAgICAgIGNvbnN0IGNvbnRhaW5zID0gKGEsIGIpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBhLmNvbnRhaW5zID8gYSAhPSBiICYmIGEuY29udGFpbnMoYikgOiAhIShhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGIpICYgTm9kZS5ET0NVTUVOVF9QT1NJVElPTl9DT05UQUlORURfQlkpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aGlzLmRyYWtlID0gZHJhZ3VsYShjb250YWluZXJzLCB7XG4gICAgICAgICAgICAgICAgY29weTogZnVuY3Rpb24gKGVsLCBzb3VyY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNvdXJjZS5jbGFzc0xpc3QuY29udGFpbnMoJ3NvdXJjZScpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgYWNjZXB0czogZnVuY3Rpb24gKGVsLCB0YXJnZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFjb250YWlucyhlbCwgdGFyZ2V0KSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAhdGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnc291cmNlJyk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBtb3ZlczogZnVuY3Rpb24gKGVsLCBzb3VyY2UsIGhhbmRsZSwgc2libGluZykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoKHNvdXJjZS5kYXRhc2V0LmZyZWREcm9wem9uZSAhPT0gdW5kZWZpbmVkKSAmJiAoc291cmNlLmRhdGFzZXQuZnJlZERyb3B6b25lICE9PSAnJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBoYW5kbGUuY2xhc3NMaXN0LmNvbnRhaW5zKCdoYW5kbGUnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuZHJha2Uub24oJ2Nsb25lZCcsIChjbG9uZSwgb3JpZ2luYWwsIHR5cGUpID0+IHtcbiAgICAgICAgICAgIGlmICh0eXBlID09PSAnY29weScpIHtcbiAgICAgICAgICAgICAgICBjbG9uZS5sYXN0Q2hpbGQuZWxlbWVudE9wdGlvbnMgPSBvcmlnaW5hbC5sYXN0Q2hpbGQuZWxlbWVudE9wdGlvbnM7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuZHJha2Uub24oJ2Ryb3AnLCAoZWwsIHRhcmdldCwgc291cmNlLCBzaWJsaW5nKSA9PiB7XG4gICAgICAgICAgICAvL2VtaXR0ZXIuZW1pdCgnZnJlZC1kcmFndWxhLWRyb3AnLCBlbCwgdGFyZ2V0LCBzb3VyY2UsIHNpYmxpbmcpO1xuXG4gICAgICAgICAgICBpZiAoc291cmNlLmNsYXNzTGlzdC5jb250YWlucygnYmx1ZXByaW50cy1zb3VyY2UnKSAmJiBlbC5wYXJlbnROb2RlKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcGFyZW50ID0gdGFyZ2V0LmZyZWRFbCB8fCBudWxsO1xuICAgICAgICAgICAgICAgIGNvbnN0IGNvbnRlbnRFbGVtZW50ID0gbmV3IENvbnRlbnRFbGVtZW50KHRoaXMuY29uZmlnLCBlbC5sYXN0Q2hpbGQsIHRhcmdldC5kYXRhc2V0LmZyZWREcm9wem9uZSwgcGFyZW50KTtcbiAgICAgICAgICAgICAgICBjb250ZW50RWxlbWVudC5yZW5kZXIoKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBhcmVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNpYmxpbmcgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnQuZHpzW3RhcmdldC5kYXRhc2V0LmZyZWREcm9wem9uZV0uY2hpbGRyZW4ucHVzaChjb250ZW50RWxlbWVudC53cmFwcGVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50LmR6c1t0YXJnZXQuZGF0YXNldC5mcmVkRHJvcHpvbmVdLmNoaWxkcmVuLnNwbGljZShwYXJlbnQuZHpzW3RhcmdldC5kYXRhc2V0LmZyZWREcm9wem9uZV0uY2hpbGRyZW4uaW5kZXhPZihzaWJsaW5nKSwgMCwgY29udGVudEVsZW1lbnQud3JhcHBlcik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIGVsLnBhcmVudE5vZGUucmVwbGFjZUNoaWxkKGNvbnRlbnRFbGVtZW50LndyYXBwZXIsIGVsKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKHRhcmdldCAmJiBlbC5mcmVkRWwpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVsLmZyZWRFbC5wYXJlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsLmZyZWRFbC5wYXJlbnQuZHpzW3NvdXJjZS5kYXRhc2V0LmZyZWREcm9wem9uZV0uY2hpbGRyZW4uc3BsaWNlKGVsLmZyZWRFbC5wYXJlbnQuZHpzW3NvdXJjZS5kYXRhc2V0LmZyZWREcm9wem9uZV0uY2hpbGRyZW4uaW5kZXhPZihlbCksIDEpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcGFyZW50ID0gdGFyZ2V0LmZyZWRFbCB8fCBudWxsO1xuICAgICAgICAgICAgICAgICAgICBpZiAocGFyZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2libGluZyA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudC5kenNbdGFyZ2V0LmRhdGFzZXQuZnJlZERyb3B6b25lXS5jaGlsZHJlbi5wdXNoKGVsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50LmR6c1t0YXJnZXQuZGF0YXNldC5mcmVkRHJvcHpvbmVdLmNoaWxkcmVuLnNwbGljZShwYXJlbnQuZHpzW3RhcmdldC5kYXRhc2V0LmZyZWREcm9wem9uZV0uY2hpbGRyZW4uaW5kZXhPZihzaWJsaW5nKSwgMCwgZWwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsLmZyZWRFbC5wYXJlbnQgPSBwYXJlbnQ7XG4gICAgICAgICAgICAgICAgICAgIGVsLmZyZWRFbC5kek5hbWUgPSB0YXJnZXQuZGF0YXNldC5mcmVkRHJvcHpvbmU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLnJlbG9hZENvbnRhaW5lcnMoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5kcmFrZS5vbignZHJhZycsIChlbCwgc291cmNlKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnJlZ2lzdGVyU2Nyb2xsZXIoKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY29uc3QgZHJvcFpvbmVzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnW2RhdGEtZnJlZC1kcm9wem9uZV0nKTtcbiAgICAgICAgICAgIGZvciAobGV0IHpvbmUgb2YgZHJvcFpvbmVzKSB7XG4gICAgICAgICAgICAgICAgem9uZS5jbGFzc0xpc3QuYWRkKCdmcmVkLS1kcm9wem9uZV9oaWdobGlnaHQnKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZW1pdHRlci5lbWl0KCdmcmVkLXNpZGViYXItaGlkZScsIHRydWUpO1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLmRyYWtlLm9uKCdkcmFnZW5kJywgZWwgPT4ge1xuICAgICAgICAgICAgdGhpcy5yZW1vdmVTY3JvbGxlcigpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zdCBkcm9wWm9uZXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS1mcmVkLWRyb3B6b25lXScpO1xuICAgICAgICAgICAgZm9yIChsZXQgem9uZSBvZiBkcm9wWm9uZXMpIHtcbiAgICAgICAgICAgICAgICB6b25lLmNsYXNzTGlzdC5yZW1vdmUoJ2ZyZWQtLWRyb3B6b25lX2hpZ2hsaWdodCcpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBlbWl0dGVyLmVtaXQoJ2ZyZWQtc2lkZWJhci1zaG93JywgdHJ1ZSk7XG4gICAgICAgIH0pO1xuXG4gICAgfTtcbiAgICBcbiAgICBjYW5jZWxTY3JvbGwodHlwZSkge1xuICAgICAgICBpZiAodGhpc1t0eXBlICsgJ1Njcm9sbCddKSB7XG4gICAgICAgICAgICBjbGVhckludGVydmFsKHRoaXNbdHlwZSArICdTY3JvbGwnXSk7XG4gICAgICAgICAgICB0aGlzW3R5cGUgKyAnU2Nyb2xsJ10gPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5zY3JvbGxTcGVlZCA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLmxhc3RQb3NpdGlvbiA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgc2Nyb2xsV2luZG93KGUsIHR5cGUsIGJyZWFrcG9pbnRzKSB7XG4gICAgICAgIGxldCBzdGFydCA9IGZhbHNlO1xuICAgICAgICBsZXQgc3BlZWQgPSBudWxsO1xuICAgICAgICBcbiAgICAgICAgYnJlYWtwb2ludHMuZm9yRWFjaChicmVha3BvaW50ID0+IHtcbiAgICAgICAgICAgIGlmICh0eXBlID09PSAndG9wJykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRCcmVha3BvaW50ID0gZS55ID4gKHdpbmRvdy5pbm5lckhlaWdodCAtIGJyZWFrcG9pbnQub2Zmc2V0KTtcbiAgICAgICAgICAgICAgICBzdGFydCA9IHN0YXJ0IHx8IGN1cnJlbnRCcmVha3BvaW50O1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50QnJlYWtwb2ludCkge1xuICAgICAgICAgICAgICAgICAgICBzcGVlZCA9IGJyZWFrcG9pbnQuc3BlZWQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY3VycmVudEJyZWFrcG9pbnQgPSBlLnkgPCBicmVha3BvaW50Lm9mZnNldDtcbiAgICAgICAgICAgICAgICBzdGFydCA9IHN0YXJ0IHx8IGN1cnJlbnRCcmVha3BvaW50O1xuXG4gICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRCcmVha3BvaW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHNwZWVkID0gLTEgKiBicmVha3BvaW50LnNwZWVkO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIFxuICAgICAgICBpZiAoc3RhcnQpIHtcbiAgICAgICAgICAgIGlmICh0aGlzW3R5cGUgKyAnU2Nyb2xsJ10gJiYgKHNwZWVkICE9PSB0aGlzLnNjcm9sbFNwZWVkKSkge1xuICAgICAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwodGhpc1t0eXBlICsgJ1Njcm9sbCddKTtcbiAgICAgICAgICAgICAgICB0aGlzW3R5cGUgKyAnU2Nyb2xsJ10gPSBudWxsO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodGhpc1t0eXBlICsgJ1Njcm9sbCddID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5sYXN0UG9zaXRpb24gPSB3aW5kb3cuaW5uZXJIZWlnaHQgKyB3aW5kb3cuc2Nyb2xsWTtcblxuICAgICAgICAgICAgICAgIHRoaXNbdHlwZSArICdTY3JvbGwnXSA9IHNldEludGVydmFsKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zY3JvbGxTcGVlZCA9IHNwZWVkO1xuICAgICAgICAgICAgICAgICAgICB3aW5kb3cuc2Nyb2xsQnkoMCwgc3BlZWQpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXdQb3NpdGlvbiA9IHdpbmRvdy5pbm5lckhlaWdodCArIHdpbmRvdy5zY3JvbGxZO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmKHRoaXMubGFzdFBvc2l0aW9uID09PSBuZXdQb3NpdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jYW5jZWxTY3JvbGwodHlwZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB0aGlzLmxhc3RQb3NpdGlvbiA9IG5ld1Bvc2l0aW9uO1xuICAgICAgICAgICAgICAgIH0sIDUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5jYW5jZWxTY3JvbGwodHlwZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgc2Nyb2xsSGFuZGxlcihlKSB7XG4gICAgICAgIHRoaXMuc2Nyb2xsV2luZG93KGUsICd0b3AnLCBbe29mZnNldDogNjAsIHNwZWVkOiAyfSx7b2Zmc2V0OjMwLCBzcGVlZDogOH1dKTtcbiAgICAgICAgdGhpcy5zY3JvbGxXaW5kb3coZSwgJ2JvdHRvbScsIFt7b2Zmc2V0OiA2MCwgc3BlZWQ6IDJ9LHtvZmZzZXQ6MzAsIHNwZWVkOiA4fV0pO1xuICAgIH1cbiAgICBcbiAgICByZWdpc3RlclNjcm9sbGVyKCkge1xuICAgICAgICB0aGlzLnRvcFNjcm9sbCA9IG51bGw7XG4gICAgICAgIHRoaXMuYm90dG9tU2Nyb2xsID0gbnVsbDtcbiAgICAgICAgdGhpcy5zY3JvbGxTcGVlZCA9IG51bGw7XG4gICAgICAgIHRoaXMubGFzdFBvc2l0aW9uID0gbnVsbDtcblxuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCB0aGlzLnNjcm9sbEhhbmRsZXIpO1xuICAgIH1cbiAgICBcbiAgICByZW1vdmVTY3JvbGxlcigpIHtcbiAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgdGhpcy5zY3JvbGxIYW5kbGVyKTtcbiAgICB9XG5cbiAgICByZWxvYWRDb250YWluZXJzKCkge1xuICAgICAgICBjb25zdCBpbml0Q29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnW2RhdGEtZnJlZC1kcm9wem9uZV06bm90KFtkYXRhLWZyZWQtZHJvcHpvbmU9XCJcIl0pJyk7XG4gICAgICAgIGNvbnN0IGNvbnRhaW5lcnMgPSBbLi4uaW5pdENvbnRhaW5lcl07XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbml0Q29udGFpbmVyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb250YWluZXJzLnB1c2goLi4uKGluaXRDb250YWluZXJbaV0ucXVlcnlTZWxlY3RvckFsbCgnW2RhdGEtZnJlZC1kcm9wem9uZV06bm90KFtkYXRhLWZyZWQtZHJvcHpvbmU9XCJcIl0pJykpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnRhaW5lcnMudW5zaGlmdCguLi4oZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnNvdXJjZScpKSk7XG5cbiAgICAgICAgdGhpcy5kcmFrZS5jb250YWluZXJzID0gY29udGFpbmVycztcbiAgICB9XG59XG5cbmNvbnN0IGRyYWtlID0gbmV3IERyYWtlKCk7XG5cbmV4cG9ydCBkZWZhdWx0IGRyYWtlO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL19idWlsZC9hc3NldHMvanMvRHJha2UuanMiXSwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

	eval("/* WEBPACK VAR INJECTION */(function(global) {'use strict';\n\nvar emitter = __webpack_require__(12);\nvar crossvent = __webpack_require__(19);\nvar classes = __webpack_require__(22);\nvar doc = document;\nvar documentElement = doc.documentElement;\n\nfunction dragula (initialContainers, options) {\n  var len = arguments.length;\n  if (len === 1 && Array.isArray(initialContainers) === false) {\n    options = initialContainers;\n    initialContainers = [];\n  }\n  var _mirror; // mirror image\n  var _source; // source container\n  var _item; // item being dragged\n  var _offsetX; // reference x\n  var _offsetY; // reference y\n  var _moveX; // reference move x\n  var _moveY; // reference move y\n  var _initialSibling; // reference sibling when grabbed\n  var _currentSibling; // reference sibling now\n  var _copy; // item used for copying\n  var _renderTimer; // timer for setTimeout renderMirrorImage\n  var _lastDropTarget = null; // last container item was over\n  var _grabbed; // holds mousedown context until first mousemove\n\n  var o = options || {};\n  if (o.moves === void 0) { o.moves = always; }\n  if (o.accepts === void 0) { o.accepts = always; }\n  if (o.invalid === void 0) { o.invalid = invalidTarget; }\n  if (o.containers === void 0) { o.containers = initialContainers || []; }\n  if (o.isContainer === void 0) { o.isContainer = never; }\n  if (o.copy === void 0) { o.copy = false; }\n  if (o.copySortSource === void 0) { o.copySortSource = false; }\n  if (o.revertOnSpill === void 0) { o.revertOnSpill = false; }\n  if (o.removeOnSpill === void 0) { o.removeOnSpill = false; }\n  if (o.direction === void 0) { o.direction = 'vertical'; }\n  if (o.ignoreInputTextSelection === void 0) { o.ignoreInputTextSelection = true; }\n  if (o.mirrorContainer === void 0) { o.mirrorContainer = doc.body; }\n\n  var drake = emitter({\n    containers: o.containers,\n    start: manualStart,\n    end: end,\n    cancel: cancel,\n    remove: remove,\n    destroy: destroy,\n    canMove: canMove,\n    dragging: false\n  });\n\n  if (o.removeOnSpill === true) {\n    drake.on('over', spillOver).on('out', spillOut);\n  }\n\n  events();\n\n  return drake;\n\n  function isContainer (el) {\n    return drake.containers.indexOf(el) !== -1 || o.isContainer(el);\n  }\n\n  function events (remove) {\n    var op = remove ? 'remove' : 'add';\n    touchy(documentElement, op, 'mousedown', grab);\n    touchy(documentElement, op, 'mouseup', release);\n  }\n\n  function eventualMovements (remove) {\n    var op = remove ? 'remove' : 'add';\n    touchy(documentElement, op, 'mousemove', startBecauseMouseMoved);\n  }\n\n  function movements (remove) {\n    var op = remove ? 'remove' : 'add';\n    crossvent[op](documentElement, 'selectstart', preventGrabbed); // IE8\n    crossvent[op](documentElement, 'click', preventGrabbed);\n  }\n\n  function destroy () {\n    events(true);\n    release({});\n  }\n\n  function preventGrabbed (e) {\n    if (_grabbed) {\n      e.preventDefault();\n    }\n  }\n\n  function grab (e) {\n    _moveX = e.clientX;\n    _moveY = e.clientY;\n\n    var ignore = whichMouseButton(e) !== 1 || e.metaKey || e.ctrlKey;\n    if (ignore) {\n      return; // we only care about honest-to-god left clicks and touch events\n    }\n    var item = e.target;\n    var context = canStart(item);\n    if (!context) {\n      return;\n    }\n    _grabbed = context;\n    eventualMovements();\n    if (e.type === 'mousedown') {\n      if (isInput(item)) { // see also: https://github.com/bevacqua/dragula/issues/208\n        item.focus(); // fixes https://github.com/bevacqua/dragula/issues/176\n      } else {\n        e.preventDefault(); // fixes https://github.com/bevacqua/dragula/issues/155\n      }\n    }\n  }\n\n  function startBecauseMouseMoved (e) {\n    if (!_grabbed) {\n      return;\n    }\n    if (whichMouseButton(e) === 0) {\n      release({});\n      return; // when text is selected on an input and then dragged, mouseup doesn't fire. this is our only hope\n    }\n    // truthy check fixes #239, equality fixes #207\n    if (e.clientX !== void 0 && e.clientX === _moveX && e.clientY !== void 0 && e.clientY === _moveY) {\n      return;\n    }\n    if (o.ignoreInputTextSelection) {\n      var clientX = getCoord('clientX', e);\n      var clientY = getCoord('clientY', e);\n      var elementBehindCursor = doc.elementFromPoint(clientX, clientY);\n      if (isInput(elementBehindCursor)) {\n        return;\n      }\n    }\n\n    var grabbed = _grabbed; // call to end() unsets _grabbed\n    eventualMovements(true);\n    movements();\n    end();\n    start(grabbed);\n\n    var offset = getOffset(_item);\n    _offsetX = getCoord('pageX', e) - offset.left;\n    _offsetY = getCoord('pageY', e) - offset.top;\n\n    classes.add(_copy || _item, 'gu-transit');\n    renderMirrorImage();\n    drag(e);\n  }\n\n  function canStart (item) {\n    if (drake.dragging && _mirror) {\n      return;\n    }\n    if (isContainer(item)) {\n      return; // don't drag container itself\n    }\n    var handle = item;\n    while (getParent(item) && isContainer(getParent(item)) === false) {\n      if (o.invalid(item, handle)) {\n        return;\n      }\n      item = getParent(item); // drag target should be a top element\n      if (!item) {\n        return;\n      }\n    }\n    var source = getParent(item);\n    if (!source) {\n      return;\n    }\n    if (o.invalid(item, handle)) {\n      return;\n    }\n\n    var movable = o.moves(item, source, handle, nextEl(item));\n    if (!movable) {\n      return;\n    }\n\n    return {\n      item: item,\n      source: source\n    };\n  }\n\n  function canMove (item) {\n    return !!canStart(item);\n  }\n\n  function manualStart (item) {\n    var context = canStart(item);\n    if (context) {\n      start(context);\n    }\n  }\n\n  function start (context) {\n    if (isCopy(context.item, context.source)) {\n      _copy = context.item.cloneNode(true);\n      drake.emit('cloned', _copy, context.item, 'copy');\n    }\n\n    _source = context.source;\n    _item = context.item;\n    _initialSibling = _currentSibling = nextEl(context.item);\n\n    drake.dragging = true;\n    drake.emit('drag', _item, _source);\n  }\n\n  function invalidTarget () {\n    return false;\n  }\n\n  function end () {\n    if (!drake.dragging) {\n      return;\n    }\n    var item = _copy || _item;\n    drop(item, getParent(item));\n  }\n\n  function ungrab () {\n    _grabbed = false;\n    eventualMovements(true);\n    movements(true);\n  }\n\n  function release (e) {\n    ungrab();\n\n    if (!drake.dragging) {\n      return;\n    }\n    var item = _copy || _item;\n    var clientX = getCoord('clientX', e);\n    var clientY = getCoord('clientY', e);\n    var elementBehindCursor = getElementBehindPoint(_mirror, clientX, clientY);\n    var dropTarget = findDropTarget(elementBehindCursor, clientX, clientY);\n    if (dropTarget && ((_copy && o.copySortSource) || (!_copy || dropTarget !== _source))) {\n      drop(item, dropTarget);\n    } else if (o.removeOnSpill) {\n      remove();\n    } else {\n      cancel();\n    }\n  }\n\n  function drop (item, target) {\n    var parent = getParent(item);\n    if (_copy && o.copySortSource && target === _source) {\n      parent.removeChild(_item);\n    }\n    if (isInitialPlacement(target)) {\n      drake.emit('cancel', item, _source, _source);\n    } else {\n      drake.emit('drop', item, target, _source, _currentSibling);\n    }\n    cleanup();\n  }\n\n  function remove () {\n    if (!drake.dragging) {\n      return;\n    }\n    var item = _copy || _item;\n    var parent = getParent(item);\n    if (parent) {\n      parent.removeChild(item);\n    }\n    drake.emit(_copy ? 'cancel' : 'remove', item, parent, _source);\n    cleanup();\n  }\n\n  function cancel (revert) {\n    if (!drake.dragging) {\n      return;\n    }\n    var reverts = arguments.length > 0 ? revert : o.revertOnSpill;\n    var item = _copy || _item;\n    var parent = getParent(item);\n    var initial = isInitialPlacement(parent);\n    if (initial === false && reverts) {\n      if (_copy) {\n        if (parent) {\n          parent.removeChild(_copy);\n        }\n      } else {\n        _source.insertBefore(item, _initialSibling);\n      }\n    }\n    if (initial || reverts) {\n      drake.emit('cancel', item, _source, _source);\n    } else {\n      drake.emit('drop', item, parent, _source, _currentSibling);\n    }\n    cleanup();\n  }\n\n  function cleanup () {\n    var item = _copy || _item;\n    ungrab();\n    removeMirrorImage();\n    if (item) {\n      classes.rm(item, 'gu-transit');\n    }\n    if (_renderTimer) {\n      clearTimeout(_renderTimer);\n    }\n    drake.dragging = false;\n    if (_lastDropTarget) {\n      drake.emit('out', item, _lastDropTarget, _source);\n    }\n    drake.emit('dragend', item);\n    _source = _item = _copy = _initialSibling = _currentSibling = _renderTimer = _lastDropTarget = null;\n  }\n\n  function isInitialPlacement (target, s) {\n    var sibling;\n    if (s !== void 0) {\n      sibling = s;\n    } else if (_mirror) {\n      sibling = _currentSibling;\n    } else {\n      sibling = nextEl(_copy || _item);\n    }\n    return target === _source && sibling === _initialSibling;\n  }\n\n  function findDropTarget (elementBehindCursor, clientX, clientY) {\n    var target = elementBehindCursor;\n    while (target && !accepted()) {\n      target = getParent(target);\n    }\n    return target;\n\n    function accepted () {\n      var droppable = isContainer(target);\n      if (droppable === false) {\n        return false;\n      }\n\n      var immediate = getImmediateChild(target, elementBehindCursor);\n      var reference = getReference(target, immediate, clientX, clientY);\n      var initial = isInitialPlacement(target, reference);\n      if (initial) {\n        return true; // should always be able to drop it right back where it was\n      }\n      return o.accepts(_item, target, _source, reference);\n    }\n  }\n\n  function drag (e) {\n    if (!_mirror) {\n      return;\n    }\n    e.preventDefault();\n\n    var clientX = getCoord('clientX', e);\n    var clientY = getCoord('clientY', e);\n    var x = clientX - _offsetX;\n    var y = clientY - _offsetY;\n\n    _mirror.style.left = x + 'px';\n    _mirror.style.top = y + 'px';\n\n    var item = _copy || _item;\n    var elementBehindCursor = getElementBehindPoint(_mirror, clientX, clientY);\n    var dropTarget = findDropTarget(elementBehindCursor, clientX, clientY);\n    var changed = dropTarget !== null && dropTarget !== _lastDropTarget;\n    if (changed || dropTarget === null) {\n      out();\n      _lastDropTarget = dropTarget;\n      over();\n    }\n    var parent = getParent(item);\n    if (dropTarget === _source && _copy && !o.copySortSource) {\n      if (parent) {\n        parent.removeChild(item);\n      }\n      return;\n    }\n    var reference;\n    var immediate = getImmediateChild(dropTarget, elementBehindCursor);\n    if (immediate !== null) {\n      reference = getReference(dropTarget, immediate, clientX, clientY);\n    } else if (o.revertOnSpill === true && !_copy) {\n      reference = _initialSibling;\n      dropTarget = _source;\n    } else {\n      if (_copy && parent) {\n        parent.removeChild(item);\n      }\n      return;\n    }\n    if (\n      (reference === null && changed) ||\n      reference !== item &&\n      reference !== nextEl(item)\n    ) {\n      _currentSibling = reference;\n      dropTarget.insertBefore(item, reference);\n      drake.emit('shadow', item, dropTarget, _source);\n    }\n    function moved (type) { drake.emit(type, item, _lastDropTarget, _source); }\n    function over () { if (changed) { moved('over'); } }\n    function out () { if (_lastDropTarget) { moved('out'); } }\n  }\n\n  function spillOver (el) {\n    classes.rm(el, 'gu-hide');\n  }\n\n  function spillOut (el) {\n    if (drake.dragging) { classes.add(el, 'gu-hide'); }\n  }\n\n  function renderMirrorImage () {\n    if (_mirror) {\n      return;\n    }\n    var rect = _item.getBoundingClientRect();\n    _mirror = _item.cloneNode(true);\n    _mirror.style.width = getRectWidth(rect) + 'px';\n    _mirror.style.height = getRectHeight(rect) + 'px';\n    classes.rm(_mirror, 'gu-transit');\n    classes.add(_mirror, 'gu-mirror');\n    o.mirrorContainer.appendChild(_mirror);\n    touchy(documentElement, 'add', 'mousemove', drag);\n    classes.add(o.mirrorContainer, 'gu-unselectable');\n    drake.emit('cloned', _mirror, _item, 'mirror');\n  }\n\n  function removeMirrorImage () {\n    if (_mirror) {\n      classes.rm(o.mirrorContainer, 'gu-unselectable');\n      touchy(documentElement, 'remove', 'mousemove', drag);\n      getParent(_mirror).removeChild(_mirror);\n      _mirror = null;\n    }\n  }\n\n  function getImmediateChild (dropTarget, target) {\n    var immediate = target;\n    while (immediate !== dropTarget && getParent(immediate) !== dropTarget) {\n      immediate = getParent(immediate);\n    }\n    if (immediate === documentElement) {\n      return null;\n    }\n    return immediate;\n  }\n\n  function getReference (dropTarget, target, x, y) {\n    var horizontal = o.direction === 'horizontal';\n    var reference = target !== dropTarget ? inside() : outside();\n    return reference;\n\n    function outside () { // slower, but able to figure out any position\n      var len = dropTarget.children.length;\n      var i;\n      var el;\n      var rect;\n      for (i = 0; i < len; i++) {\n        el = dropTarget.children[i];\n        rect = el.getBoundingClientRect();\n        if (horizontal && (rect.left + rect.width / 2) > x) { return el; }\n        if (!horizontal && (rect.top + rect.height / 2) > y) { return el; }\n      }\n      return null;\n    }\n\n    function inside () { // faster, but only available if dropped inside a child element\n      var rect = target.getBoundingClientRect();\n      if (horizontal) {\n        return resolve(x > rect.left + getRectWidth(rect) / 2);\n      }\n      return resolve(y > rect.top + getRectHeight(rect) / 2);\n    }\n\n    function resolve (after) {\n      return after ? nextEl(target) : target;\n    }\n  }\n\n  function isCopy (item, container) {\n    return typeof o.copy === 'boolean' ? o.copy : o.copy(item, container);\n  }\n}\n\nfunction touchy (el, op, type, fn) {\n  var touch = {\n    mouseup: 'touchend',\n    mousedown: 'touchstart',\n    mousemove: 'touchmove'\n  };\n  var pointers = {\n    mouseup: 'pointerup',\n    mousedown: 'pointerdown',\n    mousemove: 'pointermove'\n  };\n  var microsoft = {\n    mouseup: 'MSPointerUp',\n    mousedown: 'MSPointerDown',\n    mousemove: 'MSPointerMove'\n  };\n  if (global.navigator.pointerEnabled) {\n    crossvent[op](el, pointers[type], fn);\n  } else if (global.navigator.msPointerEnabled) {\n    crossvent[op](el, microsoft[type], fn);\n  } else {\n    crossvent[op](el, touch[type], fn);\n    crossvent[op](el, type, fn);\n  }\n}\n\nfunction whichMouseButton (e) {\n  if (e.touches !== void 0) { return e.touches.length; }\n  if (e.which !== void 0 && e.which !== 0) { return e.which; } // see https://github.com/bevacqua/dragula/issues/261\n  if (e.buttons !== void 0) { return e.buttons; }\n  var button = e.button;\n  if (button !== void 0) { // see https://github.com/jquery/jquery/blob/99e8ff1baa7ae341e94bb89c3e84570c7c3ad9ea/src/event.js#L573-L575\n    return button & 1 ? 1 : button & 2 ? 3 : (button & 4 ? 2 : 0);\n  }\n}\n\nfunction getOffset (el) {\n  var rect = el.getBoundingClientRect();\n  return {\n    left: rect.left + getScroll('scrollLeft', 'pageXOffset'),\n    top: rect.top + getScroll('scrollTop', 'pageYOffset')\n  };\n}\n\nfunction getScroll (scrollProp, offsetProp) {\n  if (typeof global[offsetProp] !== 'undefined') {\n    return global[offsetProp];\n  }\n  if (documentElement.clientHeight) {\n    return documentElement[scrollProp];\n  }\n  return doc.body[scrollProp];\n}\n\nfunction getElementBehindPoint (point, x, y) {\n  var p = point || {};\n  var state = p.className;\n  var el;\n  p.className += ' gu-hide';\n  el = doc.elementFromPoint(x, y);\n  p.className = state;\n  return el;\n}\n\nfunction never () { return false; }\nfunction always () { return true; }\nfunction getRectWidth (rect) { return rect.width || (rect.right - rect.left); }\nfunction getRectHeight (rect) { return rect.height || (rect.bottom - rect.top); }\nfunction getParent (el) { return el.parentNode === doc ? null : el.parentNode; }\nfunction isInput (el) { return el.tagName === 'INPUT' || el.tagName === 'TEXTAREA' || el.tagName === 'SELECT' || isEditable(el); }\nfunction isEditable (el) {\n  if (!el) { return false; } // no parents were editable\n  if (el.contentEditable === 'false') { return false; } // stop the lookup\n  if (el.contentEditable === 'true') { return true; } // found a contentEditable element in the chain\n  return isEditable(getParent(el)); // contentEditable is set to 'inherit'\n}\n\nfunction nextEl (el) {\n  return el.nextElementSibling || manually();\n  function manually () {\n    var sibling = el;\n    do {\n      sibling = sibling.nextSibling;\n    } while (sibling && sibling.nodeType !== 1);\n    return sibling;\n  }\n}\n\nfunction getEventHost (e) {\n  // on touchend event, we have to use `e.changedTouches`\n  // see http://stackoverflow.com/questions/7192563/touchend-event-properties\n  // see https://github.com/bevacqua/dragula/issues/34\n  if (e.targetTouches && e.targetTouches.length) {\n    return e.targetTouches[0];\n  }\n  if (e.changedTouches && e.changedTouches.length) {\n    return e.changedTouches[0];\n  }\n  return e;\n}\n\nfunction getCoord (coord, e) {\n  var host = getEventHost(e);\n  var missMap = {\n    pageX: 'clientX', // IE8\n    pageY: 'clientY' // IE8\n  };\n  if (coord in missMap && !(coord in host) && missMap[coord] in host) {\n    coord = missMap[coord];\n  }\n  return host[coord];\n}\n\nmodule.exports = dragula;\n\n/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nvar atoa = __webpack_require__(13);\nvar debounce = __webpack_require__(14);\n\nmodule.exports = function emitter (thing, options) {\n  var opts = options || {};\n  var evt = {};\n  if (thing === undefined) { thing = {}; }\n  thing.on = function (type, fn) {\n    if (!evt[type]) {\n      evt[type] = [fn];\n    } else {\n      evt[type].push(fn);\n    }\n    return thing;\n  };\n  thing.once = function (type, fn) {\n    fn._once = true; // thing.off(fn) still works!\n    thing.on(type, fn);\n    return thing;\n  };\n  thing.off = function (type, fn) {\n    var c = arguments.length;\n    if (c === 1) {\n      delete evt[type];\n    } else if (c === 0) {\n      evt = {};\n    } else {\n      var et = evt[type];\n      if (!et) { return thing; }\n      et.splice(et.indexOf(fn), 1);\n    }\n    return thing;\n  };\n  thing.emit = function () {\n    var args = atoa(arguments);\n    return thing.emitterSnapshot(args.shift()).apply(this, args);\n  };\n  thing.emitterSnapshot = function (type) {\n    var et = (evt[type] || []).slice(0);\n    return function () {\n      var args = atoa(arguments);\n      var ctx = this || thing;\n      if (type === 'error' && opts.throws !== false && !et.length) { throw args.length === 1 ? args[0] : args; }\n      et.forEach(function emitter (listen) {\n        if (opts.async) { debounce(listen, args, ctx); } else { listen.apply(ctx, args); }\n        if (listen._once) { thing.off(type, listen); }\n      });\n      return thing;\n    };\n  };\n  return thing;\n};\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvbnRyYS9lbWl0dGVyLmpzP2I0MjEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsWUFBWTtBQUN4QztBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQjtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLEtBQUs7QUFDTDtBQUNBLGdCQUFnQixjQUFjO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0VBQW9FLDBDQUEwQztBQUM5RztBQUNBLHlCQUF5Qiw2QkFBNkIsRUFBRSxPQUFPLHlCQUF5QjtBQUN4RiwyQkFBMkIseUJBQXlCO0FBQ3BELE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjEyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYXRvYSA9IHJlcXVpcmUoJ2F0b2EnKTtcbnZhciBkZWJvdW5jZSA9IHJlcXVpcmUoJy4vZGVib3VuY2UnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBlbWl0dGVyICh0aGluZywgb3B0aW9ucykge1xuICB2YXIgb3B0cyA9IG9wdGlvbnMgfHwge307XG4gIHZhciBldnQgPSB7fTtcbiAgaWYgKHRoaW5nID09PSB1bmRlZmluZWQpIHsgdGhpbmcgPSB7fTsgfVxuICB0aGluZy5vbiA9IGZ1bmN0aW9uICh0eXBlLCBmbikge1xuICAgIGlmICghZXZ0W3R5cGVdKSB7XG4gICAgICBldnRbdHlwZV0gPSBbZm5dO1xuICAgIH0gZWxzZSB7XG4gICAgICBldnRbdHlwZV0ucHVzaChmbik7XG4gICAgfVxuICAgIHJldHVybiB0aGluZztcbiAgfTtcbiAgdGhpbmcub25jZSA9IGZ1bmN0aW9uICh0eXBlLCBmbikge1xuICAgIGZuLl9vbmNlID0gdHJ1ZTsgLy8gdGhpbmcub2ZmKGZuKSBzdGlsbCB3b3JrcyFcbiAgICB0aGluZy5vbih0eXBlLCBmbik7XG4gICAgcmV0dXJuIHRoaW5nO1xuICB9O1xuICB0aGluZy5vZmYgPSBmdW5jdGlvbiAodHlwZSwgZm4pIHtcbiAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgaWYgKGMgPT09IDEpIHtcbiAgICAgIGRlbGV0ZSBldnRbdHlwZV07XG4gICAgfSBlbHNlIGlmIChjID09PSAwKSB7XG4gICAgICBldnQgPSB7fTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGV0ID0gZXZ0W3R5cGVdO1xuICAgICAgaWYgKCFldCkgeyByZXR1cm4gdGhpbmc7IH1cbiAgICAgIGV0LnNwbGljZShldC5pbmRleE9mKGZuKSwgMSk7XG4gICAgfVxuICAgIHJldHVybiB0aGluZztcbiAgfTtcbiAgdGhpbmcuZW1pdCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgYXJncyA9IGF0b2EoYXJndW1lbnRzKTtcbiAgICByZXR1cm4gdGhpbmcuZW1pdHRlclNuYXBzaG90KGFyZ3Muc2hpZnQoKSkuYXBwbHkodGhpcywgYXJncyk7XG4gIH07XG4gIHRoaW5nLmVtaXR0ZXJTbmFwc2hvdCA9IGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgdmFyIGV0ID0gKGV2dFt0eXBlXSB8fCBbXSkuc2xpY2UoMCk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBhcmdzID0gYXRvYShhcmd1bWVudHMpO1xuICAgICAgdmFyIGN0eCA9IHRoaXMgfHwgdGhpbmc7XG4gICAgICBpZiAodHlwZSA9PT0gJ2Vycm9yJyAmJiBvcHRzLnRocm93cyAhPT0gZmFsc2UgJiYgIWV0Lmxlbmd0aCkgeyB0aHJvdyBhcmdzLmxlbmd0aCA9PT0gMSA/IGFyZ3NbMF0gOiBhcmdzOyB9XG4gICAgICBldC5mb3JFYWNoKGZ1bmN0aW9uIGVtaXR0ZXIgKGxpc3Rlbikge1xuICAgICAgICBpZiAob3B0cy5hc3luYykgeyBkZWJvdW5jZShsaXN0ZW4sIGFyZ3MsIGN0eCk7IH0gZWxzZSB7IGxpc3Rlbi5hcHBseShjdHgsIGFyZ3MpOyB9XG4gICAgICAgIGlmIChsaXN0ZW4uX29uY2UpIHsgdGhpbmcub2ZmKHR5cGUsIGxpc3Rlbik7IH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHRoaW5nO1xuICAgIH07XG4gIH07XG4gIHJldHVybiB0aGluZztcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29udHJhL2VtaXR0ZXIuanNcbi8vIG1vZHVsZSBpZCA9IDEyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 13 */
/***/ (function(module, exports) {

	eval("module.exports = function atoa (a, n) { return Array.prototype.slice.call(a, n); }\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2F0b2EvYXRvYS5qcz81MzJiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHVDQUF1Qyx5Q0FBeUMiLCJmaWxlIjoiMTMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGF0b2EgKGEsIG4pIHsgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGEsIG4pOyB9XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vYXRvYS9hdG9hLmpzXG4vLyBtb2R1bGUgaWQgPSAxM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nvar ticky = __webpack_require__(15);\n\nmodule.exports = function debounce (fn, args, ctx) {\n  if (!fn) { return; }\n  ticky(function run () {\n    fn.apply(ctx || null, args || []);\n  });\n};\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvbnRyYS9kZWJvdW5jZS5qcz9hZWMyIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBOztBQUVBO0FBQ0EsWUFBWSxRQUFRO0FBQ3BCO0FBQ0E7QUFDQSxHQUFHO0FBQ0giLCJmaWxlIjoiMTQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciB0aWNreSA9IHJlcXVpcmUoJ3RpY2t5Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZGVib3VuY2UgKGZuLCBhcmdzLCBjdHgpIHtcbiAgaWYgKCFmbikgeyByZXR1cm47IH1cbiAgdGlja3koZnVuY3Rpb24gcnVuICgpIHtcbiAgICBmbi5hcHBseShjdHggfHwgbnVsbCwgYXJncyB8fCBbXSk7XG4gIH0pO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb250cmEvZGVib3VuY2UuanNcbi8vIG1vZHVsZSBpZCA9IDE0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

	eval("/* WEBPACK VAR INJECTION */(function(setImmediate) {var si = typeof setImmediate === 'function', tick;\nif (si) {\n  tick = function (fn) { setImmediate(fn); };\n} else {\n  tick = function (fn) { setTimeout(fn, 0); };\n}\n\nmodule.exports = tick;\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(16).setImmediate))\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3RpY2t5L3RpY2t5LWJyb3dzZXIuanM/MDFmZiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0Esd0JBQXdCLGtCQUFrQjtBQUMxQyxDQUFDO0FBQ0Qsd0JBQXdCLG1CQUFtQjtBQUMzQzs7QUFFQSxzQiIsImZpbGUiOiIxNS5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBzaSA9IHR5cGVvZiBzZXRJbW1lZGlhdGUgPT09ICdmdW5jdGlvbicsIHRpY2s7XG5pZiAoc2kpIHtcbiAgdGljayA9IGZ1bmN0aW9uIChmbikgeyBzZXRJbW1lZGlhdGUoZm4pOyB9O1xufSBlbHNlIHtcbiAgdGljayA9IGZ1bmN0aW9uIChmbikgeyBzZXRUaW1lb3V0KGZuLCAwKTsgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB0aWNrO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi90aWNreS90aWNreS1icm93c2VyLmpzXG4vLyBtb2R1bGUgaWQgPSAxNVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

	eval("/* WEBPACK VAR INJECTION */(function(global) {var apply = Function.prototype.apply;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) {\n  if (timeout) {\n    timeout.close();\n  }\n};\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(window, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// setimmediate attaches itself to the global object\n__webpack_require__(17);\n// On some exotic environments, it's not clear which object `setimmeidate` was\n// able to install onto.  Search each possibility in the same order as the\n// `setimmediate` library.\nexports.setImmediate = (typeof self !== \"undefined\" && self.setImmediate) ||\n                       (typeof global !== \"undefined\" && global.setImmediate) ||\n                       (this && this.setImmediate);\nexports.clearImmediate = (typeof self !== \"undefined\" && self.clearImmediate) ||\n                         (typeof global !== \"undefined\" && global.clearImmediate) ||\n                         (this && this.clearImmediate);\n\n/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3RpbWVycy1icm93c2VyaWZ5L21haW4uanM/YjA4OCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiMTYuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgYXBwbHkgPSBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHk7XG5cbi8vIERPTSBBUElzLCBmb3IgY29tcGxldGVuZXNzXG5cbmV4cG9ydHMuc2V0VGltZW91dCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFRpbWVvdXQoYXBwbHkuY2FsbChzZXRUaW1lb3V0LCB3aW5kb3csIGFyZ3VtZW50cyksIGNsZWFyVGltZW91dCk7XG59O1xuZXhwb3J0cy5zZXRJbnRlcnZhbCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFRpbWVvdXQoYXBwbHkuY2FsbChzZXRJbnRlcnZhbCwgd2luZG93LCBhcmd1bWVudHMpLCBjbGVhckludGVydmFsKTtcbn07XG5leHBvcnRzLmNsZWFyVGltZW91dCA9XG5leHBvcnRzLmNsZWFySW50ZXJ2YWwgPSBmdW5jdGlvbih0aW1lb3V0KSB7XG4gIGlmICh0aW1lb3V0KSB7XG4gICAgdGltZW91dC5jbG9zZSgpO1xuICB9XG59O1xuXG5mdW5jdGlvbiBUaW1lb3V0KGlkLCBjbGVhckZuKSB7XG4gIHRoaXMuX2lkID0gaWQ7XG4gIHRoaXMuX2NsZWFyRm4gPSBjbGVhckZuO1xufVxuVGltZW91dC5wcm90b3R5cGUudW5yZWYgPSBUaW1lb3V0LnByb3RvdHlwZS5yZWYgPSBmdW5jdGlvbigpIHt9O1xuVGltZW91dC5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5fY2xlYXJGbi5jYWxsKHdpbmRvdywgdGhpcy5faWQpO1xufTtcblxuLy8gRG9lcyBub3Qgc3RhcnQgdGhlIHRpbWUsIGp1c3Qgc2V0cyB1cCB0aGUgbWVtYmVycyBuZWVkZWQuXG5leHBvcnRzLmVucm9sbCA9IGZ1bmN0aW9uKGl0ZW0sIG1zZWNzKSB7XG4gIGNsZWFyVGltZW91dChpdGVtLl9pZGxlVGltZW91dElkKTtcbiAgaXRlbS5faWRsZVRpbWVvdXQgPSBtc2Vjcztcbn07XG5cbmV4cG9ydHMudW5lbnJvbGwgPSBmdW5jdGlvbihpdGVtKSB7XG4gIGNsZWFyVGltZW91dChpdGVtLl9pZGxlVGltZW91dElkKTtcbiAgaXRlbS5faWRsZVRpbWVvdXQgPSAtMTtcbn07XG5cbmV4cG9ydHMuX3VucmVmQWN0aXZlID0gZXhwb3J0cy5hY3RpdmUgPSBmdW5jdGlvbihpdGVtKSB7XG4gIGNsZWFyVGltZW91dChpdGVtLl9pZGxlVGltZW91dElkKTtcblxuICB2YXIgbXNlY3MgPSBpdGVtLl9pZGxlVGltZW91dDtcbiAgaWYgKG1zZWNzID49IDApIHtcbiAgICBpdGVtLl9pZGxlVGltZW91dElkID0gc2V0VGltZW91dChmdW5jdGlvbiBvblRpbWVvdXQoKSB7XG4gICAgICBpZiAoaXRlbS5fb25UaW1lb3V0KVxuICAgICAgICBpdGVtLl9vblRpbWVvdXQoKTtcbiAgICB9LCBtc2Vjcyk7XG4gIH1cbn07XG5cbi8vIHNldGltbWVkaWF0ZSBhdHRhY2hlcyBpdHNlbGYgdG8gdGhlIGdsb2JhbCBvYmplY3RcbnJlcXVpcmUoXCJzZXRpbW1lZGlhdGVcIik7XG4vLyBPbiBzb21lIGV4b3RpYyBlbnZpcm9ubWVudHMsIGl0J3Mgbm90IGNsZWFyIHdoaWNoIG9iamVjdCBgc2V0aW1tZWlkYXRlYCB3YXNcbi8vIGFibGUgdG8gaW5zdGFsbCBvbnRvLiAgU2VhcmNoIGVhY2ggcG9zc2liaWxpdHkgaW4gdGhlIHNhbWUgb3JkZXIgYXMgdGhlXG4vLyBgc2V0aW1tZWRpYXRlYCBsaWJyYXJ5LlxuZXhwb3J0cy5zZXRJbW1lZGlhdGUgPSAodHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgJiYgc2VsZi5zZXRJbW1lZGlhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICh0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiICYmIGdsb2JhbC5zZXRJbW1lZGlhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICh0aGlzICYmIHRoaXMuc2V0SW1tZWRpYXRlKTtcbmV4cG9ydHMuY2xlYXJJbW1lZGlhdGUgPSAodHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgJiYgc2VsZi5jbGVhckltbWVkaWF0ZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAodHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBnbG9iYWwuY2xlYXJJbW1lZGlhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMgJiYgdGhpcy5jbGVhckltbWVkaWF0ZSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vdGltZXJzLWJyb3dzZXJpZnkvbWFpbi5qc1xuLy8gbW9kdWxlIGlkID0gMTZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

	eval("/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {\n    \"use strict\";\n\n    if (global.setImmediate) {\n        return;\n    }\n\n    var nextHandle = 1; // Spec says greater than zero\n    var tasksByHandle = {};\n    var currentlyRunningATask = false;\n    var doc = global.document;\n    var registerImmediate;\n\n    function setImmediate(callback) {\n      // Callback can either be a function or a string\n      if (typeof callback !== \"function\") {\n        callback = new Function(\"\" + callback);\n      }\n      // Copy function arguments\n      var args = new Array(arguments.length - 1);\n      for (var i = 0; i < args.length; i++) {\n          args[i] = arguments[i + 1];\n      }\n      // Store and register the task\n      var task = { callback: callback, args: args };\n      tasksByHandle[nextHandle] = task;\n      registerImmediate(nextHandle);\n      return nextHandle++;\n    }\n\n    function clearImmediate(handle) {\n        delete tasksByHandle[handle];\n    }\n\n    function run(task) {\n        var callback = task.callback;\n        var args = task.args;\n        switch (args.length) {\n        case 0:\n            callback();\n            break;\n        case 1:\n            callback(args[0]);\n            break;\n        case 2:\n            callback(args[0], args[1]);\n            break;\n        case 3:\n            callback(args[0], args[1], args[2]);\n            break;\n        default:\n            callback.apply(undefined, args);\n            break;\n        }\n    }\n\n    function runIfPresent(handle) {\n        // From the spec: \"Wait until any invocations of this algorithm started before this one have completed.\"\n        // So if we're currently running a task, we'll need to delay this invocation.\n        if (currentlyRunningATask) {\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n            // \"too much recursion\" error.\n            setTimeout(runIfPresent, 0, handle);\n        } else {\n            var task = tasksByHandle[handle];\n            if (task) {\n                currentlyRunningATask = true;\n                try {\n                    run(task);\n                } finally {\n                    clearImmediate(handle);\n                    currentlyRunningATask = false;\n                }\n            }\n        }\n    }\n\n    function installNextTickImplementation() {\n        registerImmediate = function(handle) {\n            process.nextTick(function () { runIfPresent(handle); });\n        };\n    }\n\n    function canUsePostMessage() {\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n        // where `global.postMessage` means something completely different and can't be used for this purpose.\n        if (global.postMessage && !global.importScripts) {\n            var postMessageIsAsynchronous = true;\n            var oldOnMessage = global.onmessage;\n            global.onmessage = function() {\n                postMessageIsAsynchronous = false;\n            };\n            global.postMessage(\"\", \"*\");\n            global.onmessage = oldOnMessage;\n            return postMessageIsAsynchronous;\n        }\n    }\n\n    function installPostMessageImplementation() {\n        // Installs an event handler on `global` for the `message` event: see\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n\n        var messagePrefix = \"setImmediate$\" + Math.random() + \"$\";\n        var onGlobalMessage = function(event) {\n            if (event.source === global &&\n                typeof event.data === \"string\" &&\n                event.data.indexOf(messagePrefix) === 0) {\n                runIfPresent(+event.data.slice(messagePrefix.length));\n            }\n        };\n\n        if (global.addEventListener) {\n            global.addEventListener(\"message\", onGlobalMessage, false);\n        } else {\n            global.attachEvent(\"onmessage\", onGlobalMessage);\n        }\n\n        registerImmediate = function(handle) {\n            global.postMessage(messagePrefix + handle, \"*\");\n        };\n    }\n\n    function installMessageChannelImplementation() {\n        var channel = new MessageChannel();\n        channel.port1.onmessage = function(event) {\n            var handle = event.data;\n            runIfPresent(handle);\n        };\n\n        registerImmediate = function(handle) {\n            channel.port2.postMessage(handle);\n        };\n    }\n\n    function installReadyStateChangeImplementation() {\n        var html = doc.documentElement;\n        registerImmediate = function(handle) {\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n            var script = doc.createElement(\"script\");\n            script.onreadystatechange = function () {\n                runIfPresent(handle);\n                script.onreadystatechange = null;\n                html.removeChild(script);\n                script = null;\n            };\n            html.appendChild(script);\n        };\n    }\n\n    function installSetTimeoutImplementation() {\n        registerImmediate = function(handle) {\n            setTimeout(runIfPresent, 0, handle);\n        };\n    }\n\n    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\n    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\n    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;\n\n    // Don't get fooled by e.g. browserify environments.\n    if ({}.toString.call(global.process) === \"[object process]\") {\n        // For Node.js before 0.9\n        installNextTickImplementation();\n\n    } else if (canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        installPostMessageImplementation();\n\n    } else if (global.MessageChannel) {\n        // For web workers, where supported\n        installMessageChannelImplementation();\n\n    } else if (doc && \"onreadystatechange\" in doc.createElement(\"script\")) {\n        // For IE 6–8\n        installReadyStateChangeImplementation();\n\n    } else {\n        // For older browsers\n        installSetTimeoutImplementation();\n    }\n\n    attachTo.setImmediate = setImmediate;\n    attachTo.clearImmediate = clearImmediate;\n}(typeof self === \"undefined\" ? typeof global === \"undefined\" ? this : global : self));\n\n/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(18)))\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3NldGltbWVkaWF0ZS9zZXRJbW1lZGlhdGUuanM/NGE4MCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsaUJBQWlCO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSwwQ0FBMEMsc0JBQXNCLEVBQUU7QUFDbEU7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSx5Q0FBeUM7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFVBQVU7QUFDVjtBQUNBOztBQUVBLEtBQUs7QUFDTDtBQUNBOztBQUVBLEtBQUs7QUFDTDtBQUNBOztBQUVBLEtBQUs7QUFDTDtBQUNBOztBQUVBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLENBQUMiLCJmaWxlIjoiMTcuanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gKGdsb2JhbCwgdW5kZWZpbmVkKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgICBpZiAoZ2xvYmFsLnNldEltbWVkaWF0ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIG5leHRIYW5kbGUgPSAxOyAvLyBTcGVjIHNheXMgZ3JlYXRlciB0aGFuIHplcm9cbiAgICB2YXIgdGFza3NCeUhhbmRsZSA9IHt9O1xuICAgIHZhciBjdXJyZW50bHlSdW5uaW5nQVRhc2sgPSBmYWxzZTtcbiAgICB2YXIgZG9jID0gZ2xvYmFsLmRvY3VtZW50O1xuICAgIHZhciByZWdpc3RlckltbWVkaWF0ZTtcblxuICAgIGZ1bmN0aW9uIHNldEltbWVkaWF0ZShjYWxsYmFjaykge1xuICAgICAgLy8gQ2FsbGJhY2sgY2FuIGVpdGhlciBiZSBhIGZ1bmN0aW9uIG9yIGEgc3RyaW5nXG4gICAgICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgY2FsbGJhY2sgPSBuZXcgRnVuY3Rpb24oXCJcIiArIGNhbGxiYWNrKTtcbiAgICAgIH1cbiAgICAgIC8vIENvcHkgZnVuY3Rpb24gYXJndW1lbnRzXG4gICAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBhcmdzW2ldID0gYXJndW1lbnRzW2kgKyAxXTtcbiAgICAgIH1cbiAgICAgIC8vIFN0b3JlIGFuZCByZWdpc3RlciB0aGUgdGFza1xuICAgICAgdmFyIHRhc2sgPSB7IGNhbGxiYWNrOiBjYWxsYmFjaywgYXJnczogYXJncyB9O1xuICAgICAgdGFza3NCeUhhbmRsZVtuZXh0SGFuZGxlXSA9IHRhc2s7XG4gICAgICByZWdpc3RlckltbWVkaWF0ZShuZXh0SGFuZGxlKTtcbiAgICAgIHJldHVybiBuZXh0SGFuZGxlKys7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2xlYXJJbW1lZGlhdGUoaGFuZGxlKSB7XG4gICAgICAgIGRlbGV0ZSB0YXNrc0J5SGFuZGxlW2hhbmRsZV07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcnVuKHRhc2spIHtcbiAgICAgICAgdmFyIGNhbGxiYWNrID0gdGFzay5jYWxsYmFjaztcbiAgICAgICAgdmFyIGFyZ3MgPSB0YXNrLmFyZ3M7XG4gICAgICAgIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICBjYWxsYmFjayhhcmdzWzBdKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICBjYWxsYmFjayhhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICBjYWxsYmFjayhhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgY2FsbGJhY2suYXBwbHkodW5kZWZpbmVkLCBhcmdzKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcnVuSWZQcmVzZW50KGhhbmRsZSkge1xuICAgICAgICAvLyBGcm9tIHRoZSBzcGVjOiBcIldhaXQgdW50aWwgYW55IGludm9jYXRpb25zIG9mIHRoaXMgYWxnb3JpdGhtIHN0YXJ0ZWQgYmVmb3JlIHRoaXMgb25lIGhhdmUgY29tcGxldGVkLlwiXG4gICAgICAgIC8vIFNvIGlmIHdlJ3JlIGN1cnJlbnRseSBydW5uaW5nIGEgdGFzaywgd2UnbGwgbmVlZCB0byBkZWxheSB0aGlzIGludm9jYXRpb24uXG4gICAgICAgIGlmIChjdXJyZW50bHlSdW5uaW5nQVRhc2spIHtcbiAgICAgICAgICAgIC8vIERlbGF5IGJ5IGRvaW5nIGEgc2V0VGltZW91dC4gc2V0SW1tZWRpYXRlIHdhcyB0cmllZCBpbnN0ZWFkLCBidXQgaW4gRmlyZWZveCA3IGl0IGdlbmVyYXRlZCBhXG4gICAgICAgICAgICAvLyBcInRvbyBtdWNoIHJlY3Vyc2lvblwiIGVycm9yLlxuICAgICAgICAgICAgc2V0VGltZW91dChydW5JZlByZXNlbnQsIDAsIGhhbmRsZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgdGFzayA9IHRhc2tzQnlIYW5kbGVbaGFuZGxlXTtcbiAgICAgICAgICAgIGlmICh0YXNrKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudGx5UnVubmluZ0FUYXNrID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBydW4odGFzayk7XG4gICAgICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgY2xlYXJJbW1lZGlhdGUoaGFuZGxlKTtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudGx5UnVubmluZ0FUYXNrID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5zdGFsbE5leHRUaWNrSW1wbGVtZW50YXRpb24oKSB7XG4gICAgICAgIHJlZ2lzdGVySW1tZWRpYXRlID0gZnVuY3Rpb24oaGFuZGxlKSB7XG4gICAgICAgICAgICBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uICgpIHsgcnVuSWZQcmVzZW50KGhhbmRsZSk7IH0pO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNhblVzZVBvc3RNZXNzYWdlKCkge1xuICAgICAgICAvLyBUaGUgdGVzdCBhZ2FpbnN0IGBpbXBvcnRTY3JpcHRzYCBwcmV2ZW50cyB0aGlzIGltcGxlbWVudGF0aW9uIGZyb20gYmVpbmcgaW5zdGFsbGVkIGluc2lkZSBhIHdlYiB3b3JrZXIsXG4gICAgICAgIC8vIHdoZXJlIGBnbG9iYWwucG9zdE1lc3NhZ2VgIG1lYW5zIHNvbWV0aGluZyBjb21wbGV0ZWx5IGRpZmZlcmVudCBhbmQgY2FuJ3QgYmUgdXNlZCBmb3IgdGhpcyBwdXJwb3NlLlxuICAgICAgICBpZiAoZ2xvYmFsLnBvc3RNZXNzYWdlICYmICFnbG9iYWwuaW1wb3J0U2NyaXB0cykge1xuICAgICAgICAgICAgdmFyIHBvc3RNZXNzYWdlSXNBc3luY2hyb25vdXMgPSB0cnVlO1xuICAgICAgICAgICAgdmFyIG9sZE9uTWVzc2FnZSA9IGdsb2JhbC5vbm1lc3NhZ2U7XG4gICAgICAgICAgICBnbG9iYWwub25tZXNzYWdlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcG9zdE1lc3NhZ2VJc0FzeW5jaHJvbm91cyA9IGZhbHNlO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGdsb2JhbC5wb3N0TWVzc2FnZShcIlwiLCBcIipcIik7XG4gICAgICAgICAgICBnbG9iYWwub25tZXNzYWdlID0gb2xkT25NZXNzYWdlO1xuICAgICAgICAgICAgcmV0dXJuIHBvc3RNZXNzYWdlSXNBc3luY2hyb25vdXM7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnN0YWxsUG9zdE1lc3NhZ2VJbXBsZW1lbnRhdGlvbigpIHtcbiAgICAgICAgLy8gSW5zdGFsbHMgYW4gZXZlbnQgaGFuZGxlciBvbiBgZ2xvYmFsYCBmb3IgdGhlIGBtZXNzYWdlYCBldmVudDogc2VlXG4gICAgICAgIC8vICogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vRE9NL3dpbmRvdy5wb3N0TWVzc2FnZVxuICAgICAgICAvLyAqIGh0dHA6Ly93d3cud2hhdHdnLm9yZy9zcGVjcy93ZWItYXBwcy9jdXJyZW50LXdvcmsvbXVsdGlwYWdlL2NvbW1zLmh0bWwjY3Jvc3NEb2N1bWVudE1lc3NhZ2VzXG5cbiAgICAgICAgdmFyIG1lc3NhZ2VQcmVmaXggPSBcInNldEltbWVkaWF0ZSRcIiArIE1hdGgucmFuZG9tKCkgKyBcIiRcIjtcbiAgICAgICAgdmFyIG9uR2xvYmFsTWVzc2FnZSA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICBpZiAoZXZlbnQuc291cmNlID09PSBnbG9iYWwgJiZcbiAgICAgICAgICAgICAgICB0eXBlb2YgZXZlbnQuZGF0YSA9PT0gXCJzdHJpbmdcIiAmJlxuICAgICAgICAgICAgICAgIGV2ZW50LmRhdGEuaW5kZXhPZihtZXNzYWdlUHJlZml4KSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJ1bklmUHJlc2VudCgrZXZlbnQuZGF0YS5zbGljZShtZXNzYWdlUHJlZml4Lmxlbmd0aCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lcikge1xuICAgICAgICAgICAgZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsIG9uR2xvYmFsTWVzc2FnZSwgZmFsc2UpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZ2xvYmFsLmF0dGFjaEV2ZW50KFwib25tZXNzYWdlXCIsIG9uR2xvYmFsTWVzc2FnZSk7XG4gICAgICAgIH1cblxuICAgICAgICByZWdpc3RlckltbWVkaWF0ZSA9IGZ1bmN0aW9uKGhhbmRsZSkge1xuICAgICAgICAgICAgZ2xvYmFsLnBvc3RNZXNzYWdlKG1lc3NhZ2VQcmVmaXggKyBoYW5kbGUsIFwiKlwiKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnN0YWxsTWVzc2FnZUNoYW5uZWxJbXBsZW1lbnRhdGlvbigpIHtcbiAgICAgICAgdmFyIGNoYW5uZWwgPSBuZXcgTWVzc2FnZUNoYW5uZWwoKTtcbiAgICAgICAgY2hhbm5lbC5wb3J0MS5vbm1lc3NhZ2UgPSBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgdmFyIGhhbmRsZSA9IGV2ZW50LmRhdGE7XG4gICAgICAgICAgICBydW5JZlByZXNlbnQoaGFuZGxlKTtcbiAgICAgICAgfTtcblxuICAgICAgICByZWdpc3RlckltbWVkaWF0ZSA9IGZ1bmN0aW9uKGhhbmRsZSkge1xuICAgICAgICAgICAgY2hhbm5lbC5wb3J0Mi5wb3N0TWVzc2FnZShoYW5kbGUpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluc3RhbGxSZWFkeVN0YXRlQ2hhbmdlSW1wbGVtZW50YXRpb24oKSB7XG4gICAgICAgIHZhciBodG1sID0gZG9jLmRvY3VtZW50RWxlbWVudDtcbiAgICAgICAgcmVnaXN0ZXJJbW1lZGlhdGUgPSBmdW5jdGlvbihoYW5kbGUpIHtcbiAgICAgICAgICAgIC8vIENyZWF0ZSBhIDxzY3JpcHQ+IGVsZW1lbnQ7IGl0cyByZWFkeXN0YXRlY2hhbmdlIGV2ZW50IHdpbGwgYmUgZmlyZWQgYXN5bmNocm9ub3VzbHkgb25jZSBpdCBpcyBpbnNlcnRlZFxuICAgICAgICAgICAgLy8gaW50byB0aGUgZG9jdW1lbnQuIERvIHNvLCB0aHVzIHF1ZXVpbmcgdXAgdGhlIHRhc2suIFJlbWVtYmVyIHRvIGNsZWFuIHVwIG9uY2UgaXQncyBiZWVuIGNhbGxlZC5cbiAgICAgICAgICAgIHZhciBzY3JpcHQgPSBkb2MuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKTtcbiAgICAgICAgICAgIHNjcmlwdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcnVuSWZQcmVzZW50KGhhbmRsZSk7XG4gICAgICAgICAgICAgICAgc2NyaXB0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgaHRtbC5yZW1vdmVDaGlsZChzY3JpcHQpO1xuICAgICAgICAgICAgICAgIHNjcmlwdCA9IG51bGw7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaHRtbC5hcHBlbmRDaGlsZChzY3JpcHQpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluc3RhbGxTZXRUaW1lb3V0SW1wbGVtZW50YXRpb24oKSB7XG4gICAgICAgIHJlZ2lzdGVySW1tZWRpYXRlID0gZnVuY3Rpb24oaGFuZGxlKSB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KHJ1bklmUHJlc2VudCwgMCwgaGFuZGxlKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBJZiBzdXBwb3J0ZWQsIHdlIHNob3VsZCBhdHRhY2ggdG8gdGhlIHByb3RvdHlwZSBvZiBnbG9iYWwsIHNpbmNlIHRoYXQgaXMgd2hlcmUgc2V0VGltZW91dCBldCBhbC4gbGl2ZS5cbiAgICB2YXIgYXR0YWNoVG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YgJiYgT2JqZWN0LmdldFByb3RvdHlwZU9mKGdsb2JhbCk7XG4gICAgYXR0YWNoVG8gPSBhdHRhY2hUbyAmJiBhdHRhY2hUby5zZXRUaW1lb3V0ID8gYXR0YWNoVG8gOiBnbG9iYWw7XG5cbiAgICAvLyBEb24ndCBnZXQgZm9vbGVkIGJ5IGUuZy4gYnJvd3NlcmlmeSBlbnZpcm9ubWVudHMuXG4gICAgaWYgKHt9LnRvU3RyaW5nLmNhbGwoZ2xvYmFsLnByb2Nlc3MpID09PSBcIltvYmplY3QgcHJvY2Vzc11cIikge1xuICAgICAgICAvLyBGb3IgTm9kZS5qcyBiZWZvcmUgMC45XG4gICAgICAgIGluc3RhbGxOZXh0VGlja0ltcGxlbWVudGF0aW9uKCk7XG5cbiAgICB9IGVsc2UgaWYgKGNhblVzZVBvc3RNZXNzYWdlKCkpIHtcbiAgICAgICAgLy8gRm9yIG5vbi1JRTEwIG1vZGVybiBicm93c2Vyc1xuICAgICAgICBpbnN0YWxsUG9zdE1lc3NhZ2VJbXBsZW1lbnRhdGlvbigpO1xuXG4gICAgfSBlbHNlIGlmIChnbG9iYWwuTWVzc2FnZUNoYW5uZWwpIHtcbiAgICAgICAgLy8gRm9yIHdlYiB3b3JrZXJzLCB3aGVyZSBzdXBwb3J0ZWRcbiAgICAgICAgaW5zdGFsbE1lc3NhZ2VDaGFubmVsSW1wbGVtZW50YXRpb24oKTtcblxuICAgIH0gZWxzZSBpZiAoZG9jICYmIFwib25yZWFkeXN0YXRlY2hhbmdlXCIgaW4gZG9jLmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIikpIHtcbiAgICAgICAgLy8gRm9yIElFIDbigJM4XG4gICAgICAgIGluc3RhbGxSZWFkeVN0YXRlQ2hhbmdlSW1wbGVtZW50YXRpb24oKTtcblxuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEZvciBvbGRlciBicm93c2Vyc1xuICAgICAgICBpbnN0YWxsU2V0VGltZW91dEltcGxlbWVudGF0aW9uKCk7XG4gICAgfVxuXG4gICAgYXR0YWNoVG8uc2V0SW1tZWRpYXRlID0gc2V0SW1tZWRpYXRlO1xuICAgIGF0dGFjaFRvLmNsZWFySW1tZWRpYXRlID0gY2xlYXJJbW1lZGlhdGU7XG59KHR5cGVvZiBzZWxmID09PSBcInVuZGVmaW5lZFwiID8gdHlwZW9mIGdsb2JhbCA9PT0gXCJ1bmRlZmluZWRcIiA/IHRoaXMgOiBnbG9iYWwgOiBzZWxmKSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vc2V0aW1tZWRpYXRlL3NldEltbWVkaWF0ZS5qc1xuLy8gbW9kdWxlIGlkID0gMTdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 18 */
/***/ (function(module, exports) {

	eval("// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3Byb2Nlc3MvYnJvd3Nlci5qcz84MmU0Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsc0JBQXNCO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxxQ0FBcUM7O0FBRXJDO0FBQ0E7QUFDQTs7QUFFQSwyQkFBMkI7QUFDM0I7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLFVBQVUiLCJmaWxlIjoiMTguanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzaGltIGZvciB1c2luZyBwcm9jZXNzIGluIGJyb3dzZXJcbnZhciBwcm9jZXNzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcblxuLy8gY2FjaGVkIGZyb20gd2hhdGV2ZXIgZ2xvYmFsIGlzIHByZXNlbnQgc28gdGhhdCB0ZXN0IHJ1bm5lcnMgdGhhdCBzdHViIGl0XG4vLyBkb24ndCBicmVhayB0aGluZ3MuICBCdXQgd2UgbmVlZCB0byB3cmFwIGl0IGluIGEgdHJ5IGNhdGNoIGluIGNhc2UgaXQgaXNcbi8vIHdyYXBwZWQgaW4gc3RyaWN0IG1vZGUgY29kZSB3aGljaCBkb2Vzbid0IGRlZmluZSBhbnkgZ2xvYmFscy4gIEl0J3MgaW5zaWRlIGFcbi8vIGZ1bmN0aW9uIGJlY2F1c2UgdHJ5L2NhdGNoZXMgZGVvcHRpbWl6ZSBpbiBjZXJ0YWluIGVuZ2luZXMuXG5cbnZhciBjYWNoZWRTZXRUaW1lb3V0O1xudmFyIGNhY2hlZENsZWFyVGltZW91dDtcblxuZnVuY3Rpb24gZGVmYXVsdFNldFRpbW91dCgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3NldFRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbmZ1bmN0aW9uIGRlZmF1bHRDbGVhclRpbWVvdXQgKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignY2xlYXJUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG4oZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc2V0VGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2YgY2xlYXJUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgIH1cbn0gKCkpXG5mdW5jdGlvbiBydW5UaW1lb3V0KGZ1bikge1xuICAgIGlmIChjYWNoZWRTZXRUaW1lb3V0ID09PSBzZXRUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICAvLyBpZiBzZXRUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkU2V0VGltZW91dCA9PT0gZGVmYXVsdFNldFRpbW91dCB8fCAhY2FjaGVkU2V0VGltZW91dCkgJiYgc2V0VGltZW91dCkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dChmdW4sIDApO1xuICAgIH0gY2F0Y2goZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwobnVsbCwgZnVuLCAwKTtcbiAgICAgICAgfSBjYXRjaChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yXG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKHRoaXMsIGZ1biwgMCk7XG4gICAgICAgIH1cbiAgICB9XG5cblxufVxuZnVuY3Rpb24gcnVuQ2xlYXJUaW1lb3V0KG1hcmtlcikge1xuICAgIGlmIChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGNsZWFyVGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICAvLyBpZiBjbGVhclRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGRlZmF1bHRDbGVhclRpbWVvdXQgfHwgIWNhY2hlZENsZWFyVGltZW91dCkgJiYgY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCAgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbChudWxsLCBtYXJrZXIpO1xuICAgICAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yLlxuICAgICAgICAgICAgLy8gU29tZSB2ZXJzaW9ucyBvZiBJLkUuIGhhdmUgZGlmZmVyZW50IHJ1bGVzIGZvciBjbGVhclRpbWVvdXQgdnMgc2V0VGltZW91dFxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKHRoaXMsIG1hcmtlcik7XG4gICAgICAgIH1cbiAgICB9XG5cblxuXG59XG52YXIgcXVldWUgPSBbXTtcbnZhciBkcmFpbmluZyA9IGZhbHNlO1xudmFyIGN1cnJlbnRRdWV1ZTtcbnZhciBxdWV1ZUluZGV4ID0gLTE7XG5cbmZ1bmN0aW9uIGNsZWFuVXBOZXh0VGljaygpIHtcbiAgICBpZiAoIWRyYWluaW5nIHx8ICFjdXJyZW50UXVldWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIGlmIChjdXJyZW50UXVldWUubGVuZ3RoKSB7XG4gICAgICAgIHF1ZXVlID0gY3VycmVudFF1ZXVlLmNvbmNhdChxdWV1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgIH1cbiAgICBpZiAocXVldWUubGVuZ3RoKSB7XG4gICAgICAgIGRyYWluUXVldWUoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRyYWluUXVldWUoKSB7XG4gICAgaWYgKGRyYWluaW5nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHRpbWVvdXQgPSBydW5UaW1lb3V0KGNsZWFuVXBOZXh0VGljayk7XG4gICAgZHJhaW5pbmcgPSB0cnVlO1xuXG4gICAgdmFyIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB3aGlsZShsZW4pIHtcbiAgICAgICAgY3VycmVudFF1ZXVlID0gcXVldWU7XG4gICAgICAgIHF1ZXVlID0gW107XG4gICAgICAgIHdoaWxlICgrK3F1ZXVlSW5kZXggPCBsZW4pIHtcbiAgICAgICAgICAgIGlmIChjdXJyZW50UXVldWUpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50UXVldWVbcXVldWVJbmRleF0ucnVuKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgICAgICBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgfVxuICAgIGN1cnJlbnRRdWV1ZSA9IG51bGw7XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBydW5DbGVhclRpbWVvdXQodGltZW91dCk7XG59XG5cbnByb2Nlc3MubmV4dFRpY2sgPSBmdW5jdGlvbiAoZnVuKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcXVldWUucHVzaChuZXcgSXRlbShmdW4sIGFyZ3MpKTtcbiAgICBpZiAocXVldWUubGVuZ3RoID09PSAxICYmICFkcmFpbmluZykge1xuICAgICAgICBydW5UaW1lb3V0KGRyYWluUXVldWUpO1xuICAgIH1cbn07XG5cbi8vIHY4IGxpa2VzIHByZWRpY3RpYmxlIG9iamVjdHNcbmZ1bmN0aW9uIEl0ZW0oZnVuLCBhcnJheSkge1xuICAgIHRoaXMuZnVuID0gZnVuO1xuICAgIHRoaXMuYXJyYXkgPSBhcnJheTtcbn1cbkl0ZW0ucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmZ1bi5hcHBseShudWxsLCB0aGlzLmFycmF5KTtcbn07XG5wcm9jZXNzLnRpdGxlID0gJ2Jyb3dzZXInO1xucHJvY2Vzcy5icm93c2VyID0gdHJ1ZTtcbnByb2Nlc3MuZW52ID0ge307XG5wcm9jZXNzLmFyZ3YgPSBbXTtcbnByb2Nlc3MudmVyc2lvbiA9ICcnOyAvLyBlbXB0eSBzdHJpbmcgdG8gYXZvaWQgcmVnZXhwIGlzc3Vlc1xucHJvY2Vzcy52ZXJzaW9ucyA9IHt9O1xuXG5mdW5jdGlvbiBub29wKCkge31cblxucHJvY2Vzcy5vbiA9IG5vb3A7XG5wcm9jZXNzLmFkZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3Mub25jZSA9IG5vb3A7XG5wcm9jZXNzLm9mZiA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUxpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlQWxsTGlzdGVuZXJzID0gbm9vcDtcbnByb2Nlc3MuZW1pdCA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRPbmNlTGlzdGVuZXIgPSBub29wO1xuXG5wcm9jZXNzLmxpc3RlbmVycyA9IGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiBbXSB9XG5cbnByb2Nlc3MuYmluZGluZyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcblxucHJvY2Vzcy5jd2QgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnLycgfTtcbnByb2Nlc3MuY2hkaXIgPSBmdW5jdGlvbiAoZGlyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5wcm9jZXNzLnVtYXNrID0gZnVuY3Rpb24oKSB7IHJldHVybiAwOyB9O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3Byb2Nlc3MvYnJvd3Nlci5qc1xuLy8gbW9kdWxlIGlkID0gMThcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

	eval("/* WEBPACK VAR INJECTION */(function(global) {'use strict';\n\nvar customEvent = __webpack_require__(20);\nvar eventmap = __webpack_require__(21);\nvar doc = global.document;\nvar addEvent = addEventEasy;\nvar removeEvent = removeEventEasy;\nvar hardCache = [];\n\nif (!global.addEventListener) {\n  addEvent = addEventHard;\n  removeEvent = removeEventHard;\n}\n\nmodule.exports = {\n  add: addEvent,\n  remove: removeEvent,\n  fabricate: fabricateEvent\n};\n\nfunction addEventEasy (el, type, fn, capturing) {\n  return el.addEventListener(type, fn, capturing);\n}\n\nfunction addEventHard (el, type, fn) {\n  return el.attachEvent('on' + type, wrap(el, type, fn));\n}\n\nfunction removeEventEasy (el, type, fn, capturing) {\n  return el.removeEventListener(type, fn, capturing);\n}\n\nfunction removeEventHard (el, type, fn) {\n  var listener = unwrap(el, type, fn);\n  if (listener) {\n    return el.detachEvent('on' + type, listener);\n  }\n}\n\nfunction fabricateEvent (el, type, model) {\n  var e = eventmap.indexOf(type) === -1 ? makeCustomEvent() : makeClassicEvent();\n  if (el.dispatchEvent) {\n    el.dispatchEvent(e);\n  } else {\n    el.fireEvent('on' + type, e);\n  }\n  function makeClassicEvent () {\n    var e;\n    if (doc.createEvent) {\n      e = doc.createEvent('Event');\n      e.initEvent(type, true, true);\n    } else if (doc.createEventObject) {\n      e = doc.createEventObject();\n    }\n    return e;\n  }\n  function makeCustomEvent () {\n    return new customEvent(type, { detail: model });\n  }\n}\n\nfunction wrapperFactory (el, type, fn) {\n  return function wrapper (originalEvent) {\n    var e = originalEvent || global.event;\n    e.target = e.target || e.srcElement;\n    e.preventDefault = e.preventDefault || function preventDefault () { e.returnValue = false; };\n    e.stopPropagation = e.stopPropagation || function stopPropagation () { e.cancelBubble = true; };\n    e.which = e.which || e.keyCode;\n    fn.call(el, e);\n  };\n}\n\nfunction wrap (el, type, fn) {\n  var wrapper = unwrap(el, type, fn) || wrapperFactory(el, type, fn);\n  hardCache.push({\n    wrapper: wrapper,\n    element: el,\n    type: type,\n    fn: fn\n  });\n  return wrapper;\n}\n\nfunction unwrap (el, type, fn) {\n  var i = find(el, type, fn);\n  if (i) {\n    var wrapper = hardCache[i].wrapper;\n    hardCache.splice(i, 1); // free up a tad of memory\n    return wrapper;\n  }\n}\n\nfunction find (el, type, fn) {\n  var i, item;\n  for (i = 0; i < hardCache.length; i++) {\n    item = hardCache[i];\n    if (item.element === el && item.type === type && item.fn === fn) {\n      return i;\n    }\n  }\n}\n\n/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2Nyb3NzdmVudC9zcmMvY3Jvc3N2ZW50LmpzPzUzNzkiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0MsZ0JBQWdCO0FBQ2xEO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1RUFBdUUsdUJBQXVCO0FBQzlGLDBFQUEwRSx1QkFBdUI7QUFDakc7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQjtBQUMzQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGFBQWEsc0JBQXNCO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIxOS5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIGN1c3RvbUV2ZW50ID0gcmVxdWlyZSgnY3VzdG9tLWV2ZW50Jyk7XG52YXIgZXZlbnRtYXAgPSByZXF1aXJlKCcuL2V2ZW50bWFwJyk7XG52YXIgZG9jID0gZ2xvYmFsLmRvY3VtZW50O1xudmFyIGFkZEV2ZW50ID0gYWRkRXZlbnRFYXN5O1xudmFyIHJlbW92ZUV2ZW50ID0gcmVtb3ZlRXZlbnRFYXN5O1xudmFyIGhhcmRDYWNoZSA9IFtdO1xuXG5pZiAoIWdsb2JhbC5hZGRFdmVudExpc3RlbmVyKSB7XG4gIGFkZEV2ZW50ID0gYWRkRXZlbnRIYXJkO1xuICByZW1vdmVFdmVudCA9IHJlbW92ZUV2ZW50SGFyZDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGFkZDogYWRkRXZlbnQsXG4gIHJlbW92ZTogcmVtb3ZlRXZlbnQsXG4gIGZhYnJpY2F0ZTogZmFicmljYXRlRXZlbnRcbn07XG5cbmZ1bmN0aW9uIGFkZEV2ZW50RWFzeSAoZWwsIHR5cGUsIGZuLCBjYXB0dXJpbmcpIHtcbiAgcmV0dXJuIGVsLmFkZEV2ZW50TGlzdGVuZXIodHlwZSwgZm4sIGNhcHR1cmluZyk7XG59XG5cbmZ1bmN0aW9uIGFkZEV2ZW50SGFyZCAoZWwsIHR5cGUsIGZuKSB7XG4gIHJldHVybiBlbC5hdHRhY2hFdmVudCgnb24nICsgdHlwZSwgd3JhcChlbCwgdHlwZSwgZm4pKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlRXZlbnRFYXN5IChlbCwgdHlwZSwgZm4sIGNhcHR1cmluZykge1xuICByZXR1cm4gZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlLCBmbiwgY2FwdHVyaW5nKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlRXZlbnRIYXJkIChlbCwgdHlwZSwgZm4pIHtcbiAgdmFyIGxpc3RlbmVyID0gdW53cmFwKGVsLCB0eXBlLCBmbik7XG4gIGlmIChsaXN0ZW5lcikge1xuICAgIHJldHVybiBlbC5kZXRhY2hFdmVudCgnb24nICsgdHlwZSwgbGlzdGVuZXIpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGZhYnJpY2F0ZUV2ZW50IChlbCwgdHlwZSwgbW9kZWwpIHtcbiAgdmFyIGUgPSBldmVudG1hcC5pbmRleE9mKHR5cGUpID09PSAtMSA/IG1ha2VDdXN0b21FdmVudCgpIDogbWFrZUNsYXNzaWNFdmVudCgpO1xuICBpZiAoZWwuZGlzcGF0Y2hFdmVudCkge1xuICAgIGVsLmRpc3BhdGNoRXZlbnQoZSk7XG4gIH0gZWxzZSB7XG4gICAgZWwuZmlyZUV2ZW50KCdvbicgKyB0eXBlLCBlKTtcbiAgfVxuICBmdW5jdGlvbiBtYWtlQ2xhc3NpY0V2ZW50ICgpIHtcbiAgICB2YXIgZTtcbiAgICBpZiAoZG9jLmNyZWF0ZUV2ZW50KSB7XG4gICAgICBlID0gZG9jLmNyZWF0ZUV2ZW50KCdFdmVudCcpO1xuICAgICAgZS5pbml0RXZlbnQodHlwZSwgdHJ1ZSwgdHJ1ZSk7XG4gICAgfSBlbHNlIGlmIChkb2MuY3JlYXRlRXZlbnRPYmplY3QpIHtcbiAgICAgIGUgPSBkb2MuY3JlYXRlRXZlbnRPYmplY3QoKTtcbiAgICB9XG4gICAgcmV0dXJuIGU7XG4gIH1cbiAgZnVuY3Rpb24gbWFrZUN1c3RvbUV2ZW50ICgpIHtcbiAgICByZXR1cm4gbmV3IGN1c3RvbUV2ZW50KHR5cGUsIHsgZGV0YWlsOiBtb2RlbCB9KTtcbiAgfVxufVxuXG5mdW5jdGlvbiB3cmFwcGVyRmFjdG9yeSAoZWwsIHR5cGUsIGZuKSB7XG4gIHJldHVybiBmdW5jdGlvbiB3cmFwcGVyIChvcmlnaW5hbEV2ZW50KSB7XG4gICAgdmFyIGUgPSBvcmlnaW5hbEV2ZW50IHx8IGdsb2JhbC5ldmVudDtcbiAgICBlLnRhcmdldCA9IGUudGFyZ2V0IHx8IGUuc3JjRWxlbWVudDtcbiAgICBlLnByZXZlbnREZWZhdWx0ID0gZS5wcmV2ZW50RGVmYXVsdCB8fCBmdW5jdGlvbiBwcmV2ZW50RGVmYXVsdCAoKSB7IGUucmV0dXJuVmFsdWUgPSBmYWxzZTsgfTtcbiAgICBlLnN0b3BQcm9wYWdhdGlvbiA9IGUuc3RvcFByb3BhZ2F0aW9uIHx8IGZ1bmN0aW9uIHN0b3BQcm9wYWdhdGlvbiAoKSB7IGUuY2FuY2VsQnViYmxlID0gdHJ1ZTsgfTtcbiAgICBlLndoaWNoID0gZS53aGljaCB8fCBlLmtleUNvZGU7XG4gICAgZm4uY2FsbChlbCwgZSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHdyYXAgKGVsLCB0eXBlLCBmbikge1xuICB2YXIgd3JhcHBlciA9IHVud3JhcChlbCwgdHlwZSwgZm4pIHx8IHdyYXBwZXJGYWN0b3J5KGVsLCB0eXBlLCBmbik7XG4gIGhhcmRDYWNoZS5wdXNoKHtcbiAgICB3cmFwcGVyOiB3cmFwcGVyLFxuICAgIGVsZW1lbnQ6IGVsLFxuICAgIHR5cGU6IHR5cGUsXG4gICAgZm46IGZuXG4gIH0pO1xuICByZXR1cm4gd3JhcHBlcjtcbn1cblxuZnVuY3Rpb24gdW53cmFwIChlbCwgdHlwZSwgZm4pIHtcbiAgdmFyIGkgPSBmaW5kKGVsLCB0eXBlLCBmbik7XG4gIGlmIChpKSB7XG4gICAgdmFyIHdyYXBwZXIgPSBoYXJkQ2FjaGVbaV0ud3JhcHBlcjtcbiAgICBoYXJkQ2FjaGUuc3BsaWNlKGksIDEpOyAvLyBmcmVlIHVwIGEgdGFkIG9mIG1lbW9yeVxuICAgIHJldHVybiB3cmFwcGVyO1xuICB9XG59XG5cbmZ1bmN0aW9uIGZpbmQgKGVsLCB0eXBlLCBmbikge1xuICB2YXIgaSwgaXRlbTtcbiAgZm9yIChpID0gMDsgaSA8IGhhcmRDYWNoZS5sZW5ndGg7IGkrKykge1xuICAgIGl0ZW0gPSBoYXJkQ2FjaGVbaV07XG4gICAgaWYgKGl0ZW0uZWxlbWVudCA9PT0gZWwgJiYgaXRlbS50eXBlID09PSB0eXBlICYmIGl0ZW0uZm4gPT09IGZuKSB7XG4gICAgICByZXR1cm4gaTtcbiAgICB9XG4gIH1cbn1cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jcm9zc3ZlbnQvc3JjL2Nyb3NzdmVudC5qc1xuLy8gbW9kdWxlIGlkID0gMTlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 20 */
/***/ (function(module, exports) {

	eval("/* WEBPACK VAR INJECTION */(function(global) {\nvar NativeCustomEvent = global.CustomEvent;\n\nfunction useNative () {\n  try {\n    var p = new NativeCustomEvent('cat', { detail: { foo: 'bar' } });\n    return  'cat' === p.type && 'bar' === p.detail.foo;\n  } catch (e) {\n  }\n  return false;\n}\n\n/**\n * Cross-browser `CustomEvent` constructor.\n *\n * https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent.CustomEvent\n *\n * @public\n */\n\nmodule.exports = useNative() ? NativeCustomEvent :\n\n// IE >= 9\n'function' === typeof document.createEvent ? function CustomEvent (type, params) {\n  var e = document.createEvent('CustomEvent');\n  if (params) {\n    e.initCustomEvent(type, params.bubbles, params.cancelable, params.detail);\n  } else {\n    e.initCustomEvent(type, false, false, void 0);\n  }\n  return e;\n} :\n\n// IE <= 8\nfunction CustomEvent (type, params) {\n  var e = document.createEventObject();\n  e.type = type;\n  if (params) {\n    e.bubbles = Boolean(params.bubbles);\n    e.cancelable = Boolean(params.cancelable);\n    e.detail = params.detail;\n  } else {\n    e.bubbles = false;\n    e.cancelable = false;\n    e.detail = void 0;\n  }\n  return e;\n}\n\n/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2N1c3RvbS1ldmVudC9pbmRleC5qcz8wNDBkIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsMENBQTBDLFVBQVUsYUFBYSxFQUFFO0FBQ25FO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiMjAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbnZhciBOYXRpdmVDdXN0b21FdmVudCA9IGdsb2JhbC5DdXN0b21FdmVudDtcblxuZnVuY3Rpb24gdXNlTmF0aXZlICgpIHtcbiAgdHJ5IHtcbiAgICB2YXIgcCA9IG5ldyBOYXRpdmVDdXN0b21FdmVudCgnY2F0JywgeyBkZXRhaWw6IHsgZm9vOiAnYmFyJyB9IH0pO1xuICAgIHJldHVybiAgJ2NhdCcgPT09IHAudHlwZSAmJiAnYmFyJyA9PT0gcC5kZXRhaWwuZm9vO1xuICB9IGNhdGNoIChlKSB7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG4vKipcbiAqIENyb3NzLWJyb3dzZXIgYEN1c3RvbUV2ZW50YCBjb25zdHJ1Y3Rvci5cbiAqXG4gKiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvQ3VzdG9tRXZlbnQuQ3VzdG9tRXZlbnRcbiAqXG4gKiBAcHVibGljXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSB1c2VOYXRpdmUoKSA/IE5hdGl2ZUN1c3RvbUV2ZW50IDpcblxuLy8gSUUgPj0gOVxuJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIGRvY3VtZW50LmNyZWF0ZUV2ZW50ID8gZnVuY3Rpb24gQ3VzdG9tRXZlbnQgKHR5cGUsIHBhcmFtcykge1xuICB2YXIgZSA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdDdXN0b21FdmVudCcpO1xuICBpZiAocGFyYW1zKSB7XG4gICAgZS5pbml0Q3VzdG9tRXZlbnQodHlwZSwgcGFyYW1zLmJ1YmJsZXMsIHBhcmFtcy5jYW5jZWxhYmxlLCBwYXJhbXMuZGV0YWlsKTtcbiAgfSBlbHNlIHtcbiAgICBlLmluaXRDdXN0b21FdmVudCh0eXBlLCBmYWxzZSwgZmFsc2UsIHZvaWQgMCk7XG4gIH1cbiAgcmV0dXJuIGU7XG59IDpcblxuLy8gSUUgPD0gOFxuZnVuY3Rpb24gQ3VzdG9tRXZlbnQgKHR5cGUsIHBhcmFtcykge1xuICB2YXIgZSA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50T2JqZWN0KCk7XG4gIGUudHlwZSA9IHR5cGU7XG4gIGlmIChwYXJhbXMpIHtcbiAgICBlLmJ1YmJsZXMgPSBCb29sZWFuKHBhcmFtcy5idWJibGVzKTtcbiAgICBlLmNhbmNlbGFibGUgPSBCb29sZWFuKHBhcmFtcy5jYW5jZWxhYmxlKTtcbiAgICBlLmRldGFpbCA9IHBhcmFtcy5kZXRhaWw7XG4gIH0gZWxzZSB7XG4gICAgZS5idWJibGVzID0gZmFsc2U7XG4gICAgZS5jYW5jZWxhYmxlID0gZmFsc2U7XG4gICAgZS5kZXRhaWwgPSB2b2lkIDA7XG4gIH1cbiAgcmV0dXJuIGU7XG59XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY3VzdG9tLWV2ZW50L2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSAyMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 21 */
/***/ (function(module, exports) {

	eval("/* WEBPACK VAR INJECTION */(function(global) {'use strict';\n\nvar eventmap = [];\nvar eventname = '';\nvar ron = /^on/;\n\nfor (eventname in global) {\n  if (ron.test(eventname)) {\n    eventmap.push(eventname.slice(2));\n  }\n}\n\nmodule.exports = eventmap;\n\n/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2Nyb3NzdmVudC9zcmMvZXZlbnRtYXAuanM/OTM1NyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsImZpbGUiOiIyMS5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIGV2ZW50bWFwID0gW107XG52YXIgZXZlbnRuYW1lID0gJyc7XG52YXIgcm9uID0gL15vbi87XG5cbmZvciAoZXZlbnRuYW1lIGluIGdsb2JhbCkge1xuICBpZiAocm9uLnRlc3QoZXZlbnRuYW1lKSkge1xuICAgIGV2ZW50bWFwLnB1c2goZXZlbnRuYW1lLnNsaWNlKDIpKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV2ZW50bWFwO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2Nyb3NzdmVudC9zcmMvZXZlbnRtYXAuanNcbi8vIG1vZHVsZSBpZCA9IDIxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 22 */
/***/ (function(module, exports) {

	eval("'use strict';\n\nvar cache = {};\nvar start = '(?:^|\\\\s)';\nvar end = '(?:\\\\s|$)';\n\nfunction lookupClass (className) {\n  var cached = cache[className];\n  if (cached) {\n    cached.lastIndex = 0;\n  } else {\n    cache[className] = cached = new RegExp(start + className + end, 'g');\n  }\n  return cached;\n}\n\nfunction addClass (el, className) {\n  var current = el.className;\n  if (!current.length) {\n    el.className = className;\n  } else if (!lookupClass(className).test(current)) {\n    el.className += ' ' + className;\n  }\n}\n\nfunction rmClass (el, className) {\n  el.className = el.className.replace(lookupClass(className), ' ').trim();\n}\n\nmodule.exports = {\n  add: addClass,\n  rm: rmClass\n};\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2RyYWd1bGEvY2xhc3Nlcy5qcz9kZmQ5Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjIyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgY2FjaGUgPSB7fTtcbnZhciBzdGFydCA9ICcoPzpefFxcXFxzKSc7XG52YXIgZW5kID0gJyg/OlxcXFxzfCQpJztcblxuZnVuY3Rpb24gbG9va3VwQ2xhc3MgKGNsYXNzTmFtZSkge1xuICB2YXIgY2FjaGVkID0gY2FjaGVbY2xhc3NOYW1lXTtcbiAgaWYgKGNhY2hlZCkge1xuICAgIGNhY2hlZC5sYXN0SW5kZXggPSAwO1xuICB9IGVsc2Uge1xuICAgIGNhY2hlW2NsYXNzTmFtZV0gPSBjYWNoZWQgPSBuZXcgUmVnRXhwKHN0YXJ0ICsgY2xhc3NOYW1lICsgZW5kLCAnZycpO1xuICB9XG4gIHJldHVybiBjYWNoZWQ7XG59XG5cbmZ1bmN0aW9uIGFkZENsYXNzIChlbCwgY2xhc3NOYW1lKSB7XG4gIHZhciBjdXJyZW50ID0gZWwuY2xhc3NOYW1lO1xuICBpZiAoIWN1cnJlbnQubGVuZ3RoKSB7XG4gICAgZWwuY2xhc3NOYW1lID0gY2xhc3NOYW1lO1xuICB9IGVsc2UgaWYgKCFsb29rdXBDbGFzcyhjbGFzc05hbWUpLnRlc3QoY3VycmVudCkpIHtcbiAgICBlbC5jbGFzc05hbWUgKz0gJyAnICsgY2xhc3NOYW1lO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJtQ2xhc3MgKGVsLCBjbGFzc05hbWUpIHtcbiAgZWwuY2xhc3NOYW1lID0gZWwuY2xhc3NOYW1lLnJlcGxhY2UobG9va3VwQ2xhc3MoY2xhc3NOYW1lKSwgJyAnKS50cmltKCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBhZGQ6IGFkZENsYXNzLFxuICBybTogcm1DbGFzc1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9kcmFndWxhL2NsYXNzZXMuanNcbi8vIG1vZHVsZSBpZCA9IDIyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.ContentElement = undefined;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _Drake = __webpack_require__(10);\n\nvar _Drake2 = _interopRequireDefault(_Drake);\n\nvar _ImageEditor = __webpack_require__(24);\n\nvar _ImageEditor2 = _interopRequireDefault(_ImageEditor);\n\nvar _IconEditor = __webpack_require__(26);\n\nvar _IconEditor2 = _interopRequireDefault(_IconEditor);\n\nvar _EE = __webpack_require__(1);\n\nvar _EE2 = _interopRequireDefault(_EE);\n\nvar _twig = __webpack_require__(27);\n\nvar _isomorphicFetch = __webpack_require__(6);\n\nvar _isomorphicFetch2 = _interopRequireDefault(_isomorphicFetch);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar ContentElement = exports.ContentElement = function () {\n    function ContentElement(config, el, dzName) {\n        var parent = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n\n        var _this = this;\n\n        var content = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n        var settings = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};\n\n        _classCallCheck(this, ContentElement);\n\n        this.config = config;\n        this.el = el;\n        this.template = (0, _twig.twig)({ data: this.el.innerHTML });\n        this.id = parseInt(this.el.dataset.fredElementId);\n        this.wrapper = null;\n\n        this.render = this.render.bind(this);\n\n        this.parent = parent;\n        this.dzName = dzName;\n        this.options = JSON.parse(JSON.stringify(this.el.elementOptions || {}));\n        this.content = JSON.parse(JSON.stringify(content));\n        this.settings = {};\n\n        if (this.options.settings) {\n            this.options.settings.forEach(function (setting) {\n                if (setting.group && setting.settings) {\n                    setting.settings.forEach(function (subSetting) {\n                        _this.settings[subSetting.name] = subSetting.value || '';\n                    });\n                } else {\n                    _this.settings[setting.name] = setting.value || '';\n                }\n            });\n        }\n\n        this.settings = _extends({}, this.settings, JSON.parse(JSON.stringify(settings)));\n\n        this.dzs = {};\n\n        this.inEditor = false;\n    }\n\n    _createClass(ContentElement, [{\n        key: 'setEl',\n        value: function setEl(el) {\n            if (!el.innerHTML) {\n                this.el.innerHTML = el;\n            } else {\n                this.el.innerHTML = el.innerHTML;\n            }\n\n            this.template = (0, _twig.twig)({ data: this.el.innerHTML });\n        }\n    }, {\n        key: 'getContent',\n        value: function getContent() {\n            var _this2 = this;\n\n            var content = {\n                widget: this.id,\n                values: this.content,\n                settings: this.settings,\n                children: {}\n            };\n\n            var _loop = function _loop(dzName) {\n                if (_this2.dzs.hasOwnProperty(dzName)) {\n                    if (_this2.dzs[dzName].children.length > 0) {\n                        content.children[dzName] = [];\n\n                        _this2.dzs[dzName].children.forEach(function (child) {\n                            content.children[dzName].push(child.fredEl.getContent());\n                        });\n                    }\n                }\n            };\n\n            for (var dzName in this.dzs) {\n                _loop(dzName);\n            }\n\n            return content;\n        }\n    }, {\n        key: 'render',\n        value: function render() {\n            var _this3 = this;\n\n            var wrapper = document.createElement('div');\n            wrapper.classList.add('fred--block');\n            wrapper.fredEl = this;\n\n            wrapper.addEventListener('mouseover', function (e) {\n                e.stopPropagation();\n\n                var firstSet = false;\n\n                if (e.path) {\n                    e.path.forEach(function (el) {\n                        if (el.classList && el.classList.contains('fred--block')) {\n                            el.classList.add('fred--block-active');\n\n                            if (firstSet === true) {\n                                el.classList.add('fred--block-active_parent');\n                            }\n\n                            firstSet = true;\n                        }\n                    });\n                } else {\n                    var el = e.target.parentNode;\n                    while (el) {\n                        if (el.classList && el.classList.contains('fred--block')) {\n                            el.classList.add('fred--block-active');\n\n                            if (firstSet === true) {\n                                el.classList.add('fred--block-active_parent');\n                            }\n\n                            firstSet = true;\n                        }\n\n                        el = el.parentNode;\n                    }\n                }\n            });\n\n            wrapper.addEventListener('mouseout', function (e) {\n                if (_this3.inEditor === false) {\n                    wrapper.classList.remove('fred--block-active');\n                    wrapper.classList.remove('fred--block-active_parent');\n                }\n            });\n\n            var toolbar = document.createElement('div');\n            toolbar.classList.add('fred--toolbar', 'handle');\n\n            var moveHandle = document.createElement('div');\n            moveHandle.classList.add('fred--toolbar-grip');\n\n            toolbar.appendChild(moveHandle);\n\n            var duplicate = document.createElement('button');\n            duplicate.classList.add('fred--duplicate-icon');\n            duplicate.addEventListener('click', function (e) {\n                e.preventDefault();\n                _this3.duplicate();\n            });\n\n            var trashHandle = document.createElement('button');\n            trashHandle.classList.add('fred--trash');\n            trashHandle.addEventListener('click', function (e) {\n                e.preventDefault();\n                _this3.remove();\n            });\n\n            if (this.options.settings) {\n                var settings = document.createElement('button');\n                settings.classList.add('fred--element-settings');\n                settings.addEventListener('click', function (e) {\n                    e.preventDefault();\n                    _this3.openSettings();\n                });\n\n                toolbar.appendChild(settings);\n            }\n\n            toolbar.appendChild(duplicate);\n            toolbar.appendChild(trashHandle);\n\n            wrapper.appendChild(toolbar);\n\n            var content = document.createElement('div');\n            content.classList.add('fred--block_content');\n            content.dataset.fredElementId = this.el.dataset.fredElementId;\n\n            return this.templateRender().then(function (html) {\n                content.innerHTML = html;\n                _this3.initDropZones(wrapper, content);\n                _this3.initElements(wrapper, content);\n\n                wrapper.appendChild(content);\n\n                if (_this3.wrapper !== null) {\n                    _this3.wrapper.replaceWith(wrapper);\n                }\n\n                _this3.wrapper = wrapper;\n\n                return wrapper;\n            });\n        }\n    }, {\n        key: 'initDropZones',\n        value: function initDropZones(wrapper, content) {\n            var _this4 = this;\n\n            var dzs = content.querySelectorAll('[data-fred-dropzone]');\n\n            var prev = null;\n\n            var _iteratorNormalCompletion = true;\n            var _didIteratorError = false;\n            var _iteratorError = undefined;\n\n            try {\n                var _loop2 = function _loop2() {\n                    var dz = _step.value;\n\n                    if (prev === null) {\n                        prev = dz;\n                        dz.fredEl = _this4;\n                        if (!_this4.dzs[dz.dataset.fredDropzone]) {\n                            _this4.dzs[dz.dataset.fredDropzone] = {\n                                el: dz,\n                                children: []\n                            };\n                        } else {\n                            _this4.dzs[dz.dataset.fredDropzone].el = dz;\n                            _this4.dzs[dz.dataset.fredDropzone].children.forEach(function (child) {\n                                _this4.dzs[dz.dataset.fredDropzone].el.appendChild(child);\n                            });\n                        }\n                    } else {\n                        if (!prev.contains(dz)) {\n                            dz.fredEl = _this4;\n                            prev = dz;\n                            if (!_this4.dzs[dz.dataset.fredDropzone]) {\n                                _this4.dzs[dz.dataset.fredDropzone] = {\n                                    el: dz,\n                                    children: []\n                                };\n                            } else {\n                                _this4.dzs[dz.dataset.fredDropzone].el = dz;\n                                _this4.dzs[dz.dataset.fredDropzone].children.forEach(function (child) {\n                                    _this4.dzs[dz.dataset.fredDropzone].el.appendChild(child);\n                                });\n                            }\n                        }\n                    }\n                };\n\n                for (var _iterator = dzs[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                    _loop2();\n                }\n            } catch (err) {\n                _didIteratorError = true;\n                _iteratorError = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion && _iterator.return) {\n                        _iterator.return();\n                    }\n                } finally {\n                    if (_didIteratorError) {\n                        throw _iteratorError;\n                    }\n                }\n            }\n        }\n    }, {\n        key: 'initElements',\n        value: function initElements(wrapper, content) {\n            var _this5 = this;\n\n            var fredElements = content.querySelectorAll('[data-fred-name]');\n            var _iteratorNormalCompletion2 = true;\n            var _didIteratorError2 = false;\n            var _iteratorError2 = undefined;\n\n            try {\n                var _loop3 = function _loop3() {\n                    var el = _step2.value;\n\n                    el.fredEl = _this5;\n\n                    var observer = new MutationObserver(function (mutations) {\n                        mutations.forEach(function (mutation) {\n                            if (mutation.type === 'characterData' && !el.rte) {\n                                if (!_this5.content[el.dataset.fredName]) _this5.content[el.dataset.fredName] = {};\n                                if (!_this5.content[el.dataset.fredName]._raw) _this5.content[el.dataset.fredName]._raw = {};\n\n                                _this5.content[el.dataset.fredName]._raw._value = el.innerHTML;\n\n                                if (el.dataset.fredTarget) {\n                                    _EE2.default.emit('fred-page-setting-change', el.dataset.fredTarget, _this5.content[el.dataset.fredName]._raw._value, el);\n                                }\n\n                                return;\n                            }\n\n                            if (mutation.type === 'attributes') {\n                                if (el.nodeName.toLowerCase() === 'img' && mutation.attributeName === 'src') {\n                                    if (!_this5.content[el.dataset.fredName]) _this5.content[el.dataset.fredName] = {};\n                                    if (!_this5.content[el.dataset.fredName]._raw) _this5.content[el.dataset.fredName]._raw = {};\n\n                                    _this5.content[el.dataset.fredName]._raw._value = el.getAttribute(mutation.attributeName);\n\n                                    if (el.dataset.fredTarget) {\n                                        _EE2.default.emit('fred-page-setting-change', el.dataset.fredTarget, _this5.content[el.dataset.fredName]._raw._value, el);\n                                    }\n\n                                    return;\n                                }\n\n                                if (el.nodeName.toLowerCase() === 'i' && mutation.attributeName === 'class') {\n                                    if (!_this5.content[el.dataset.fredName]) _this5.content[el.dataset.fredName] = {};\n                                    if (!_this5.content[el.dataset.fredName]._raw) _this5.content[el.dataset.fredName]._raw = {};\n\n                                    _this5.content[el.dataset.fredName]._raw._value = el.className;\n\n                                    if (el.dataset.fredTarget) {\n                                        _EE2.default.emit('fred-page-setting-change', el.dataset.fredTarget, _this5.content[el.dataset.fredName]._raw._value, el);\n                                    }\n\n                                    return;\n                                }\n\n                                if (el.dataset.fredAttrs) {\n                                    var attrs = el.dataset.fredAttrs.split(',');\n                                    if (attrs.indexOf(mutation.attributeName) === -1) return;\n\n                                    if (!_this5.content[el.dataset.fredName]) _this5.content[el.dataset.fredName] = {};\n                                    if (!_this5.content[el.dataset.fredName]._raw) _this5.content[el.dataset.fredName]._raw = {};\n\n                                    _this5.content[el.dataset.fredName]._raw[mutation.attributeName] = el.getAttribute(mutation.attributeName);\n                                }\n                            }\n                        });\n                    });\n\n                    observer.observe(el, {\n                        attributes: true,\n                        characterData: true,\n                        subtree: true\n                    });\n\n                    if (el.dataset.fredRte === 'true') {\n                        // I hate this fix; tinemce throws an error on first drop from dragule\n                        setTimeout(function () {\n                            tinymce.init({\n                                target: el,\n                                theme: 'inlite',\n                                inline: true,\n                                plugins: 'modxlink',\n                                insert_toolbar: \"quickimage quicktable modxlink\",\n                                selection_toolbar: 'bold italic | h2 h3 blockquote modxlink',\n                                auto_focus: false,\n                                branding: false,\n                                setup: function setup(editor) {\n                                    el.rte = editor;\n\n                                    editor.on('change', function (e) {\n                                        if (!_this5.content[el.dataset.fredName]) _this5.content[el.dataset.fredName] = {};\n                                        if (!_this5.content[el.dataset.fredName]._raw) _this5.content[el.dataset.fredName]._raw = {};\n\n                                        _this5.content[el.dataset.fredName]._raw._value = editor.getContent();\n\n                                        if (el.dataset.fredTarget) {\n                                            _EE2.default.emit('fred-page-setting-change', el.dataset.fredTarget, _this5.content[el.dataset.fredName]._raw._value, el);\n                                        }\n                                    });\n\n                                    editor.on('focus', function (e) {\n                                        _this5.inEditor = true;\n                                    });\n\n                                    editor.on('blur', function (e) {\n                                        _this5.inEditor = false;\n                                        wrapper.classList.remove('fred--block-active');\n                                        wrapper.classList.remove('fred--block-active_parent');\n                                    });\n                                }\n                            });\n                        }, 1);\n                    }\n\n                    if (!_this5.content[el.dataset.fredName]) _this5.content[el.dataset.fredName] = {};\n                    if (!_this5.content[el.dataset.fredName]._raw) _this5.content[el.dataset.fredName]._raw = {};\n\n                    if (el.dataset.fredTarget) {\n                        if (_this5.config.pageSettings[el.dataset.fredTarget]) {\n                            _this5.content[el.dataset.fredName]._raw._value = _this5.config.pageSettings[el.dataset.fredTarget];\n                        }\n                    }\n\n                    if (_this5.content[el.dataset.fredName]._raw._value) {\n                        switch (el.nodeName.toLowerCase()) {\n                            case 'i':\n                                el.className = _this5.content[el.dataset.fredName]._raw._value;\n\n                                el.addEventListener('click', function (e) {\n                                    e.preventDefault();\n                                    _IconEditor2.default.edit(el);\n                                });\n                                break;\n                            case 'img':\n                                el.setAttribute('src', _this5.content[el.dataset.fredName]._raw._value);\n\n                                el.addEventListener('click', function (e) {\n                                    e.preventDefault();\n                                    _ImageEditor2.default.edit(el);\n                                });\n\n                                break;\n                            default:\n                                el.innerHTML = _this5.content[el.dataset.fredName]._raw._value;\n                        }\n\n                        if (el.dataset.fredAttrs) {\n                            var attrs = el.dataset.fredAttrs.split(',');\n                            attrs.forEach(function (attr) {\n                                if (_this5.content[el.dataset.fredName]._raw[attr]) {\n                                    el.setAttribute(attr, _this5.content[el.dataset.fredName]._raw[attr]);\n                                }\n                            });\n                        }\n                    } else {\n                        switch (el.nodeName.toLowerCase()) {\n                            case 'i':\n                                _this5.content[el.dataset.fredName]._raw._value = el.className;\n\n                                el.addEventListener('click', function (e) {\n                                    e.preventDefault();\n                                    _IconEditor2.default.edit(el);\n                                });\n                                break;\n                            case 'img':\n                                _this5.content[el.dataset.fredName]._raw._value = el.getAttribute('src');\n\n                                el.addEventListener('click', function (e) {\n                                    e.preventDefault();\n                                    _ImageEditor2.default.edit(el);\n                                });\n\n                                break;\n                            default:\n                                _this5.content[el.dataset.fredName]._raw._value = el.innerHTML;\n                        }\n\n                        if (el.dataset.fredAttrs) {\n                            var _attrs = el.dataset.fredAttrs.split(',');\n                            _attrs.forEach(function (attr) {\n                                if (_this5.content[el.dataset.fredName]._raw[attr]) {\n                                    _this5.content[el.dataset.fredName]._raw[attr] = el.getAttribute(attr);\n                                }\n                            });\n                        }\n                    }\n                };\n\n                for (var _iterator2 = fredElements[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                    _loop3();\n                }\n            } catch (err) {\n                _didIteratorError2 = true;\n                _iteratorError2 = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion2 && _iterator2.return) {\n                        _iterator2.return();\n                    }\n                } finally {\n                    if (_didIteratorError2) {\n                        throw _iteratorError2;\n                    }\n                }\n            }\n        }\n    }, {\n        key: 'setElValue',\n        value: function setElValue(el, value) {\n            if (!this.content[el.dataset.fredName]) this.content[el.dataset.fredName] = {};\n            if (!this.content[el.dataset.fredName]._raw) this.content[el.dataset.fredName]._raw = {};\n\n            switch (el.nodeName.toLowerCase()) {\n                case 'i':\n                    this.content[el.dataset.fredName]._raw._value = value;\n                    el.className = value;\n                    break;\n                case 'img':\n                    this.content[el.dataset.fredName]._raw._value = value;\n                    el.setAttribute('src', value);\n                    break;\n                default:\n                    this.content[el.dataset.fredName]._raw._value = value;\n                    el.innerHTML = value;\n            }\n        }\n    }, {\n        key: 'templateRender',\n        value: function templateRender() {\n            var parseModx = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n            if (this.options.remote === true) {\n                return this.remoteTemplateRender(parseModx);\n            }\n\n            return Promise.resolve(this.localTemplateRender());\n        }\n    }, {\n        key: 'localTemplateRender',\n        value: function localTemplateRender() {\n            return this.template.render(this.settings);\n        }\n    }, {\n        key: 'remoteTemplateRender',\n        value: function remoteTemplateRender() {\n            var _this6 = this;\n\n            var parseModx = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n            return (0, _isomorphicFetch2.default)(this.config.assetsUrl + 'endpoints/ajax.php?action=render-element', {\n                method: \"post\",\n                credentials: 'same-origin',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    resource: this.config.resource.id,\n                    parseModx: parseModx,\n                    element: this.id,\n                    settings: this.settings\n                })\n            }).then(function (response) {\n                if (response.status > 299) {\n                    return response.json().then(function (data) {\n                        throw new Error(data.message);\n                    });\n                }\n\n                return response.json();\n            }).then(function (json) {\n                _this6.setEl(json.data.html);\n                return json.data.html;\n            }).catch(function (err) {\n                console.log(err);\n                _EE2.default.emit('fred-loading', err.message);\n                return '';\n            });\n        }\n    }, {\n        key: 'cleanRender',\n        value: function cleanRender() {\n            var _this7 = this;\n\n            var element = document.createElement('div');\n            return this.templateRender(false).then(function (html) {\n                element.innerHTML = html;\n\n                var noRenderElements = element.querySelectorAll('[data-fred-render=\"false\"]');\n                var _iteratorNormalCompletion3 = true;\n                var _didIteratorError3 = false;\n                var _iteratorError3 = undefined;\n\n                try {\n                    for (var _iterator3 = noRenderElements[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n                        var noRenderElement = _step3.value;\n\n                        noRenderElement.remove();\n                    }\n                } catch (err) {\n                    _didIteratorError3 = true;\n                    _iteratorError3 = err;\n                } finally {\n                    try {\n                        if (!_iteratorNormalCompletion3 && _iterator3.return) {\n                            _iterator3.return();\n                        }\n                    } finally {\n                        if (_didIteratorError3) {\n                            throw _iteratorError3;\n                        }\n                    }\n                }\n\n                var fredElements = element.querySelectorAll('[data-fred-name]');\n                var _iteratorNormalCompletion4 = true;\n                var _didIteratorError4 = false;\n                var _iteratorError4 = undefined;\n\n                try {\n                    var _loop4 = function _loop4() {\n                        var el = _step4.value;\n\n                        if (_this7.content[el.dataset.fredName] && _this7.content[el.dataset.fredName]._raw && _this7.content[el.dataset.fredName]._raw._value) {\n                            switch (el.nodeName.toLowerCase()) {\n                                case 'i':\n                                    el.className = _this7.content[el.dataset.fredName]._raw._value;\n                                    break;\n                                case 'img':\n                                    el.setAttribute('src', _this7.content[el.dataset.fredName]._raw._value);\n                                    break;\n                                default:\n                                    el.innerHTML = _this7.content[el.dataset.fredName]._raw._value;\n                            }\n\n                            if (el.dataset.fredAttrs) {\n                                var attrs = el.dataset.fredAttrs.split(',');\n                                attrs.forEach(function (attr) {\n                                    if (_this7.content[el.dataset.fredName]._raw[attr]) {\n                                        el.setAttribute(attr, _this7.content[el.dataset.fredName]._raw[attr]);\n                                    }\n                                });\n                            }\n                        }\n\n                        el.removeAttribute('contenteditable');\n                        el.removeAttribute('data-fred-name');\n                        el.removeAttribute('data-fred-rte');\n                        el.removeAttribute('data-fred-target');\n                        el.removeAttribute('data-fred-attrs');\n                    };\n\n                    for (var _iterator4 = fredElements[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n                        _loop4();\n                    }\n                } catch (err) {\n                    _didIteratorError4 = true;\n                    _iteratorError4 = err;\n                } finally {\n                    try {\n                        if (!_iteratorNormalCompletion4 && _iterator4.return) {\n                            _iterator4.return();\n                        }\n                    } finally {\n                        if (_didIteratorError4) {\n                            throw _iteratorError4;\n                        }\n                    }\n                }\n\n                var fredLinks = element.querySelectorAll('[data-fred-link-page]');\n                var _iteratorNormalCompletion5 = true;\n                var _didIteratorError5 = false;\n                var _iteratorError5 = undefined;\n\n                try {\n                    for (var _iterator5 = fredLinks[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n                        var fredLink = _step5.value;\n\n                        var resourceId = parseInt(fredLink.dataset.fredLinkPage);\n                        var anchor = fredLink.dataset.fredLinkAnchor ? '#' + fredLink.dataset.fredLinkAnchor : '#';\n                        if (resourceId > 0) {\n                            fredLink.setAttribute('href', '[[~' + resourceId + ']]' + anchor);\n                        } else {\n                            fredLink.setAttribute('href', anchor);\n                        }\n\n                        fredLink.removeAttribute('data-fred-link-page');\n                        fredLink.removeAttribute('data-fred-link-anchor');\n                    }\n                } catch (err) {\n                    _didIteratorError5 = true;\n                    _iteratorError5 = err;\n                } finally {\n                    try {\n                        if (!_iteratorNormalCompletion5 && _iterator5.return) {\n                            _iterator5.return();\n                        }\n                    } finally {\n                        if (_didIteratorError5) {\n                            throw _iteratorError5;\n                        }\n                    }\n                }\n\n                var fredAnchors = element.querySelectorAll('[data-fred-link-anchor]');\n                var _iteratorNormalCompletion6 = true;\n                var _didIteratorError6 = false;\n                var _iteratorError6 = undefined;\n\n                try {\n                    for (var _iterator6 = fredAnchors[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {\n                        var fredAnchor = _step6.value;\n\n                        fredAnchor.setAttribute('href', '#' + fredAnchor.dataset.fredLinkAnchor);\n                        fredAnchor.removeAttribute('data-fred-link-anchor');\n                    }\n                } catch (err) {\n                    _didIteratorError6 = true;\n                    _iteratorError6 = err;\n                } finally {\n                    try {\n                        if (!_iteratorNormalCompletion6 && _iterator6.return) {\n                            _iterator6.return();\n                        }\n                    } finally {\n                        if (_didIteratorError6) {\n                            throw _iteratorError6;\n                        }\n                    }\n                }\n\n                for (var dzName in _this7.dzs) {\n                    if (_this7.dzs.hasOwnProperty(dzName)) {\n                        var dzEl = element.querySelector('[data-fred-dropzone=\"' + dzName + '\"]');\n                        if (dzEl) {\n                            dzEl.removeAttribute('data-fred-dropzone');\n\n                            if (_this7.dzs[dzName].children.length > 0) {\n\n                                var cleanedDropZoneContent = '';\n\n                                _this7.dzs[dzName].children.forEach(function (child) {\n                                    cleanedDropZoneContent += child.fredEl.cleanRender().innerHTML;\n                                });\n\n                                dzEl.innerHTML = cleanedDropZoneContent;\n                            }\n                        }\n                    }\n                }\n\n                return element;\n            });\n        }\n    }, {\n        key: 'remove',\n        value: function remove() {\n            if (this.parent) {\n                var index = this.parent.dzs[this.dzName].children.indexOf(this.wrapper);\n                if (index > -1) {\n                    this.parent.dzs[this.dzName].children.splice(index, 1);\n                }\n            }\n\n            this.wrapper.remove();\n        }\n    }, {\n        key: 'duplicateDropZones',\n        value: function duplicateDropZones(dzs) {\n            var _this8 = this;\n\n            var _loop5 = function _loop5(dzName) {\n                if (dzs.hasOwnProperty(dzName)) {\n                    dzs[dzName].children.forEach(function (child) {\n                        if (_this8.dzs[dzName]) {\n                            var clonedChild = new ContentElement(_this8.config, child.fredEl.el, dzName, _this8, child.fredEl.content, child.fredEl.settings);\n                            clonedChild.render().then(function () {\n                                _this8.addElementToDropZone(dzName, clonedChild);\n\n                                clonedChild.duplicateDropZones(child.fredEl.dzs);\n                            });\n                        }\n                    });\n                }\n            };\n\n            for (var dzName in dzs) {\n                _loop5(dzName);\n            }\n        }\n    }, {\n        key: 'duplicate',\n        value: function duplicate() {\n            var _this9 = this;\n\n            var clone = new ContentElement(this.config, this.el, this.dzName, this.parent, this.content, this.settings);\n            clone.render().then(function () {\n                clone.duplicateDropZones(_this9.dzs);\n\n                if (_this9.wrapper.nextSibling === null) {\n                    _this9.wrapper.parentNode.appendChild(clone.wrapper);\n                } else {\n                    _this9.wrapper.parentNode.insertBefore(clone.wrapper, _this9.wrapper.nextSibling);\n                }\n\n                if (_this9.parent) {\n                    var index = _this9.parent.dzs[_this9.dzName].children.indexOf(_this9.wrapper);\n                    if (index > -1) {\n                        _this9.parent.dzs[_this9.dzName].children.splice(index + 1, 0, clone.wrapper);\n                    }\n                }\n\n                _Drake2.default.reloadContainers();\n            });\n        }\n    }, {\n        key: 'openSettings',\n        value: function openSettings() {\n            _EE2.default.emit('fred-element-settings-open', this);\n        }\n    }, {\n        key: 'addElementToDropZone',\n        value: function addElementToDropZone(zoneName, element) {\n            if (!this.dzs[zoneName]) return false;\n\n            this.dzs[zoneName].children.push(element.wrapper);\n            this.dzs[zoneName].el.appendChild(element.wrapper);\n\n            return true;\n        }\n    }]);\n\n    return ContentElement;\n}();\n\nexports.default = ContentElement;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _Modal = __webpack_require__(25);\n\nvar _Modal2 = _interopRequireDefault(_Modal);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar ImageEditor = function () {\n    function ImageEditor() {\n        _classCallCheck(this, ImageEditor);\n\n        this.fredWrapper = null;\n        this.inited = false;\n    }\n\n    _createClass(ImageEditor, [{\n        key: 'init',\n        value: function init(fredWrapper) {\n            if (this.inited === true) return;\n\n            this.fredWrapper = fredWrapper;\n            this.inited = true;\n        }\n    }, {\n        key: 'edit',\n        value: function edit(img) {\n            var _this = this;\n\n            var wrapper = document.createElement('div');\n\n            var input = document.createElement('input');\n            input.setAttribute('type', 'text');\n            input.value = img.src || '';\n\n            var fields = [];\n\n            if (img.dataset.fredAttrs) {\n                var attrs = img.dataset.fredAttrs.split(',');\n                attrs.forEach(function (attr) {\n                    var field = document.createElement('input');\n                    field.dataset.name = attr;\n                    field.setAttribute('type', 'text');\n                    field.value = img.getAttribute(attr || '');\n\n                    fields.push(field);\n                });\n            }\n\n            wrapper.appendChild(this.labelWrapper(input, 'src'));\n\n            fields.forEach(function (field) {\n                wrapper.appendChild(_this.labelWrapper(field, field.dataset.name));\n            });\n\n            var modal = new _Modal2.default(this.fredWrapper, 'Edit Image', wrapper, function () {\n                img.src = input.value;\n\n                fields.forEach(function (field) {\n                    img.setAttribute(field.dataset.name, field.value);\n                });\n            });\n\n            modal.render();\n        }\n    }, {\n        key: 'labelWrapper',\n        value: function labelWrapper(input, name) {\n            var label = document.createElement('label');\n            label.innerText = name;\n\n            label.appendChild(input);\n\n            return label;\n        }\n    }]);\n\n    return ImageEditor;\n}();\n\nvar imageEditor = new ImageEditor();\n\nexports.default = imageEditor;\nmodule.exports = exports['default'];\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9fYnVpbGQvYXNzZXRzL2pzL0VkaXRvcnMvSW1hZ2VFZGl0b3IuanM/NTFlNCJdLCJuYW1lcyI6WyJJbWFnZUVkaXRvciIsImZyZWRXcmFwcGVyIiwiaW5pdGVkIiwiaW1nIiwid3JhcHBlciIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImlucHV0Iiwic2V0QXR0cmlidXRlIiwidmFsdWUiLCJzcmMiLCJmaWVsZHMiLCJkYXRhc2V0IiwiZnJlZEF0dHJzIiwiYXR0cnMiLCJzcGxpdCIsImZvckVhY2giLCJmaWVsZCIsIm5hbWUiLCJhdHRyIiwiZ2V0QXR0cmlidXRlIiwicHVzaCIsImFwcGVuZENoaWxkIiwibGFiZWxXcmFwcGVyIiwibW9kYWwiLCJyZW5kZXIiLCJsYWJlbCIsImlubmVyVGV4dCIsImltYWdlRWRpdG9yIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBOzs7Ozs7OztJQUVNQSxXO0FBQ0YsMkJBQWM7QUFBQTs7QUFDVixhQUFLQyxXQUFMLEdBQW1CLElBQW5CO0FBQ0EsYUFBS0MsTUFBTCxHQUFjLEtBQWQ7QUFDSDs7Ozs2QkFFSUQsVyxFQUFhO0FBQ2QsZ0JBQUksS0FBS0MsTUFBTCxLQUFnQixJQUFwQixFQUEwQjs7QUFFMUIsaUJBQUtELFdBQUwsR0FBbUJBLFdBQW5CO0FBQ0EsaUJBQUtDLE1BQUwsR0FBYyxJQUFkO0FBQ0g7Ozs2QkFFSUMsRyxFQUFLO0FBQUE7O0FBQ04sZ0JBQU1DLFVBQVVDLFNBQVNDLGFBQVQsQ0FBdUIsS0FBdkIsQ0FBaEI7O0FBR0EsZ0JBQU1DLFFBQVFGLFNBQVNDLGFBQVQsQ0FBdUIsT0FBdkIsQ0FBZDtBQUNBQyxrQkFBTUMsWUFBTixDQUFtQixNQUFuQixFQUEyQixNQUEzQjtBQUNBRCxrQkFBTUUsS0FBTixHQUFjTixJQUFJTyxHQUFKLElBQVcsRUFBekI7O0FBRUEsZ0JBQU1DLFNBQVMsRUFBZjs7QUFFQSxnQkFBSVIsSUFBSVMsT0FBSixDQUFZQyxTQUFoQixFQUEyQjtBQUN2QixvQkFBTUMsUUFBUVgsSUFBSVMsT0FBSixDQUFZQyxTQUFaLENBQXNCRSxLQUF0QixDQUE0QixHQUE1QixDQUFkO0FBQ0FELHNCQUFNRSxPQUFOLENBQWMsZ0JBQVE7QUFDbEIsd0JBQU1DLFFBQVFaLFNBQVNDLGFBQVQsQ0FBdUIsT0FBdkIsQ0FBZDtBQUNBVywwQkFBTUwsT0FBTixDQUFjTSxJQUFkLEdBQXFCQyxJQUFyQjtBQUNBRiwwQkFBTVQsWUFBTixDQUFtQixNQUFuQixFQUEyQixNQUEzQjtBQUNBUywwQkFBTVIsS0FBTixHQUFjTixJQUFJaUIsWUFBSixDQUFpQkQsUUFBUSxFQUF6QixDQUFkOztBQUVBUiwyQkFBT1UsSUFBUCxDQUFZSixLQUFaO0FBQ0gsaUJBUEQ7QUFRSDs7QUFFRGIsb0JBQVFrQixXQUFSLENBQW9CLEtBQUtDLFlBQUwsQ0FBa0JoQixLQUFsQixFQUF5QixLQUF6QixDQUFwQjs7QUFFQUksbUJBQU9LLE9BQVAsQ0FBZSxpQkFBUztBQUNwQlosd0JBQVFrQixXQUFSLENBQW9CLE1BQUtDLFlBQUwsQ0FBa0JOLEtBQWxCLEVBQXlCQSxNQUFNTCxPQUFOLENBQWNNLElBQXZDLENBQXBCO0FBQ0gsYUFGRDs7QUFLQSxnQkFBTU0sUUFBUSxvQkFBVSxLQUFLdkIsV0FBZixFQUE0QixZQUE1QixFQUEwQ0csT0FBMUMsRUFBbUQsWUFBTTtBQUNuRUQsb0JBQUlPLEdBQUosR0FBVUgsTUFBTUUsS0FBaEI7O0FBRUFFLHVCQUFPSyxPQUFQLENBQWUsaUJBQVM7QUFDcEJiLHdCQUFJSyxZQUFKLENBQWlCUyxNQUFNTCxPQUFOLENBQWNNLElBQS9CLEVBQXFDRCxNQUFNUixLQUEzQztBQUNILGlCQUZEO0FBR0gsYUFOYSxDQUFkOztBQVFBZSxrQkFBTUMsTUFBTjtBQUNIOzs7cUNBRVlsQixLLEVBQU9XLEksRUFBTTtBQUN0QixnQkFBTVEsUUFBUXJCLFNBQVNDLGFBQVQsQ0FBdUIsT0FBdkIsQ0FBZDtBQUNBb0Isa0JBQU1DLFNBQU4sR0FBa0JULElBQWxCOztBQUVBUSxrQkFBTUosV0FBTixDQUFrQmYsS0FBbEI7O0FBRUEsbUJBQU9tQixLQUFQO0FBQ0g7Ozs7OztBQUlMLElBQU1FLGNBQWMsSUFBSTVCLFdBQUosRUFBcEI7O2tCQUVlNEIsVyIsImZpbGUiOiIyNC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBNb2RhbCBmcm9tICcuLi9Nb2RhbCc7XG5cbmNsYXNzIEltYWdlRWRpdG9yIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5mcmVkV3JhcHBlciA9IG51bGw7XG4gICAgICAgIHRoaXMuaW5pdGVkID0gZmFsc2U7XG4gICAgfVxuXG4gICAgaW5pdChmcmVkV3JhcHBlcikge1xuICAgICAgICBpZiAodGhpcy5pbml0ZWQgPT09IHRydWUpIHJldHVybjtcblxuICAgICAgICB0aGlzLmZyZWRXcmFwcGVyID0gZnJlZFdyYXBwZXI7XG4gICAgICAgIHRoaXMuaW5pdGVkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBlZGl0KGltZykge1xuICAgICAgICBjb25zdCB3cmFwcGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgY29uc3QgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpO1xuICAgICAgICBpbnB1dC5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCAndGV4dCcpO1xuICAgICAgICBpbnB1dC52YWx1ZSA9IGltZy5zcmMgfHwgJyc7XG5cbiAgICAgICAgY29uc3QgZmllbGRzID0gW107XG5cbiAgICAgICAgaWYgKGltZy5kYXRhc2V0LmZyZWRBdHRycykge1xuICAgICAgICAgICAgY29uc3QgYXR0cnMgPSBpbWcuZGF0YXNldC5mcmVkQXR0cnMuc3BsaXQoJywnKTtcbiAgICAgICAgICAgIGF0dHJzLmZvckVhY2goYXR0ciA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgZmllbGQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpO1xuICAgICAgICAgICAgICAgIGZpZWxkLmRhdGFzZXQubmFtZSA9IGF0dHI7XG4gICAgICAgICAgICAgICAgZmllbGQuc2V0QXR0cmlidXRlKCd0eXBlJywgJ3RleHQnKTtcbiAgICAgICAgICAgICAgICBmaWVsZC52YWx1ZSA9IGltZy5nZXRBdHRyaWJ1dGUoYXR0ciB8fCAnJyk7XG5cbiAgICAgICAgICAgICAgICBmaWVsZHMucHVzaChmaWVsZCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHdyYXBwZXIuYXBwZW5kQ2hpbGQodGhpcy5sYWJlbFdyYXBwZXIoaW5wdXQsICdzcmMnKSk7XG4gICAgICAgIFxuICAgICAgICBmaWVsZHMuZm9yRWFjaChmaWVsZCA9PiB7XG4gICAgICAgICAgICB3cmFwcGVyLmFwcGVuZENoaWxkKHRoaXMubGFiZWxXcmFwcGVyKGZpZWxkLCBmaWVsZC5kYXRhc2V0Lm5hbWUpKTsgICAgXG4gICAgICAgIH0pO1xuXG5cbiAgICAgICAgY29uc3QgbW9kYWwgPSBuZXcgTW9kYWwodGhpcy5mcmVkV3JhcHBlciwgJ0VkaXQgSW1hZ2UnLCB3cmFwcGVyLCAoKSA9PiB7XG4gICAgICAgICAgICBpbWcuc3JjID0gaW5wdXQudmFsdWU7XG5cbiAgICAgICAgICAgIGZpZWxkcy5mb3JFYWNoKGZpZWxkID0+IHtcbiAgICAgICAgICAgICAgICBpbWcuc2V0QXR0cmlidXRlKGZpZWxkLmRhdGFzZXQubmFtZSwgZmllbGQudmFsdWUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIG1vZGFsLnJlbmRlcigpO1xuICAgIH1cbiAgICBcbiAgICBsYWJlbFdyYXBwZXIoaW5wdXQsIG5hbWUpIHtcbiAgICAgICAgY29uc3QgbGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsYWJlbCcpO1xuICAgICAgICBsYWJlbC5pbm5lclRleHQgPSBuYW1lO1xuICAgICAgICBcbiAgICAgICAgbGFiZWwuYXBwZW5kQ2hpbGQoaW5wdXQpO1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIGxhYmVsO1xuICAgIH1cblxufVxuXG5jb25zdCBpbWFnZUVkaXRvciA9IG5ldyBJbWFnZUVkaXRvcigpO1xuXG5leHBvcnQgZGVmYXVsdCBpbWFnZUVkaXRvcjtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9fYnVpbGQvYXNzZXRzL2pzL0VkaXRvcnMvSW1hZ2VFZGl0b3IuanMiXSwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 25 */
/***/ (function(module, exports) {

	eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Modal = exports.Modal = function () {\n    function Modal(fredWrapper, title) {\n        var content = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n        var onSave = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : function () {};\n\n        _classCallCheck(this, Modal);\n\n        this.fredWrapper = fredWrapper;\n        this.wrapper = null;\n        this.title = title;\n        this.content = content;\n        this.onSave = onSave;\n    }\n\n    _createClass(Modal, [{\n        key: 'setTitle',\n        value: function setTitle(title) {\n            this.title = title;\n\n            if (this.wrapper !== null) {\n                this.titleEl.innerHTML = title;\n            }\n        }\n    }, {\n        key: 'setContent',\n        value: function setContent(content) {\n            this.content = content;\n\n            if (this.wrapper !== null) {\n                if (typeof this.content === 'string') {\n                    this.body.innerHTML = this.content;\n                } else {\n                    this.body.innerHTML = '';\n                    this.body.appendChild(this.content);\n                }\n            }\n        }\n    }, {\n        key: 'render',\n        value: function render() {\n            var _this = this;\n\n            this.wrapper = document.createElement('section');\n            this.wrapper.classList.add('fred--modal-bg');\n\n            var modal = document.createElement('div');\n            modal.classList.add('fred--modal');\n            modal.setAttribute('aria-hidden', 'true');\n\n            var header = document.createElement('div');\n            header.classList.add('fred--modal-header');\n\n            var close = document.createElement('button');\n            close.classList.add('button');\n            close.innerHTML = '<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" width=\"20px\" height=\"20px\" viewBox=\"-4 -4 20 20\" enable-background=\"new -4 -4 20 20\" xml:space=\"preserve\"><polygon points=\"16.079,-0.666 12.717,-4.027 6.052,2.637 -0.613,-4.027 -3.975,-0.666 2.69,6 -3.975,12.664 -0.612,16.026 6.052,9.362 12.717,16.027 16.079,12.664 9.414,6 \"></polygon></svg>';\n            close.addEventListener('click', this.close.bind(this));\n\n            this.titleEl = document.createElement('h4');\n            this.titleEl.innerHTML = this.title;\n\n            this.body = document.createElement('div');\n            this.body.classList.add('fred--modal-body');\n\n            if (typeof this.content === 'string') {\n                this.body.innerHTML = this.content;\n            } else {\n                this.body.appendChild(this.content);\n            }\n\n            var footer = document.createElement('div');\n            footer.classList.add('fred--modal-footer');\n\n            var save = document.createElement('button');\n            save.classList.add('fred--btn-small');\n            save.setAttribute('type', 'button');\n            save.innerHTML = 'Save';\n            save.addEventListener('click', function (e) {\n                e.preventDefault();\n                _this.onSave();\n                _this.close();\n            });\n\n            header.appendChild(close);\n            header.appendChild(this.titleEl);\n\n            footer.appendChild(save);\n\n            modal.appendChild(header);\n            modal.appendChild(this.body);\n            modal.appendChild(footer);\n\n            this.wrapper.appendChild(modal);\n\n            this.fredWrapper.appendChild(this.wrapper);\n\n            return this.wrapper;\n        }\n    }, {\n        key: 'close',\n        value: function close() {\n            this.wrapper.remove();\n        }\n    }]);\n\n    return Modal;\n}();\n\nexports.default = Modal;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9fYnVpbGQvYXNzZXRzL2pzL01vZGFsLmpzP2FkOTIiXSwibmFtZXMiOlsiTW9kYWwiLCJmcmVkV3JhcHBlciIsInRpdGxlIiwiY29udGVudCIsIm9uU2F2ZSIsIndyYXBwZXIiLCJ0aXRsZUVsIiwiaW5uZXJIVE1MIiwiYm9keSIsImFwcGVuZENoaWxkIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiY2xhc3NMaXN0IiwiYWRkIiwibW9kYWwiLCJzZXRBdHRyaWJ1dGUiLCJoZWFkZXIiLCJjbG9zZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJiaW5kIiwiZm9vdGVyIiwic2F2ZSIsImUiLCJwcmV2ZW50RGVmYXVsdCIsInJlbW92ZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztJQUFhQSxLLFdBQUFBLEs7QUFFVCxtQkFBWUMsV0FBWixFQUF5QkMsS0FBekIsRUFBaUU7QUFBQSxZQUFqQ0MsT0FBaUMsdUVBQXZCLEVBQXVCO0FBQUEsWUFBbkJDLE1BQW1CLHVFQUFWLFlBQU0sQ0FBRSxDQUFFOztBQUFBOztBQUM3RCxhQUFLSCxXQUFMLEdBQW1CQSxXQUFuQjtBQUNBLGFBQUtJLE9BQUwsR0FBZSxJQUFmO0FBQ0EsYUFBS0gsS0FBTCxHQUFhQSxLQUFiO0FBQ0EsYUFBS0MsT0FBTCxHQUFlQSxPQUFmO0FBQ0EsYUFBS0MsTUFBTCxHQUFjQSxNQUFkO0FBQ0g7Ozs7aUNBRVFGLEssRUFBTztBQUNaLGlCQUFLQSxLQUFMLEdBQWFBLEtBQWI7O0FBRUEsZ0JBQUksS0FBS0csT0FBTCxLQUFpQixJQUFyQixFQUEyQjtBQUN2QixxQkFBS0MsT0FBTCxDQUFhQyxTQUFiLEdBQXlCTCxLQUF6QjtBQUNIO0FBQ0o7OzttQ0FFVUMsTyxFQUFTO0FBQ2hCLGlCQUFLQSxPQUFMLEdBQWVBLE9BQWY7O0FBRUEsZ0JBQUksS0FBS0UsT0FBTCxLQUFpQixJQUFyQixFQUEyQjtBQUN2QixvQkFBSSxPQUFPLEtBQUtGLE9BQVosS0FBd0IsUUFBNUIsRUFBc0M7QUFDbEMseUJBQUtLLElBQUwsQ0FBVUQsU0FBVixHQUFzQixLQUFLSixPQUEzQjtBQUNILGlCQUZELE1BRU87QUFDSCx5QkFBS0ssSUFBTCxDQUFVRCxTQUFWLEdBQXNCLEVBQXRCO0FBQ0EseUJBQUtDLElBQUwsQ0FBVUMsV0FBVixDQUFzQixLQUFLTixPQUEzQjtBQUNIO0FBQ0o7QUFDSjs7O2lDQUVRO0FBQUE7O0FBQ0wsaUJBQUtFLE9BQUwsR0FBZUssU0FBU0MsYUFBVCxDQUF1QixTQUF2QixDQUFmO0FBQ0EsaUJBQUtOLE9BQUwsQ0FBYU8sU0FBYixDQUF1QkMsR0FBdkIsQ0FBMkIsZ0JBQTNCOztBQUVBLGdCQUFNQyxRQUFRSixTQUFTQyxhQUFULENBQXVCLEtBQXZCLENBQWQ7QUFDQUcsa0JBQU1GLFNBQU4sQ0FBZ0JDLEdBQWhCLENBQW9CLGFBQXBCO0FBQ0FDLGtCQUFNQyxZQUFOLENBQW1CLGFBQW5CLEVBQWtDLE1BQWxDOztBQUVBLGdCQUFNQyxTQUFTTixTQUFTQyxhQUFULENBQXVCLEtBQXZCLENBQWY7QUFDQUssbUJBQU9KLFNBQVAsQ0FBaUJDLEdBQWpCLENBQXFCLG9CQUFyQjs7QUFFQSxnQkFBTUksUUFBUVAsU0FBU0MsYUFBVCxDQUF1QixRQUF2QixDQUFkO0FBQ0FNLGtCQUFNTCxTQUFOLENBQWdCQyxHQUFoQixDQUFvQixRQUFwQjtBQUNBSSxrQkFBTVYsU0FBTixHQUFrQix1WkFBbEI7QUFDQVUsa0JBQU1DLGdCQUFOLENBQXVCLE9BQXZCLEVBQWdDLEtBQUtELEtBQUwsQ0FBV0UsSUFBWCxDQUFnQixJQUFoQixDQUFoQzs7QUFFQSxpQkFBS2IsT0FBTCxHQUFlSSxTQUFTQyxhQUFULENBQXVCLElBQXZCLENBQWY7QUFDQSxpQkFBS0wsT0FBTCxDQUFhQyxTQUFiLEdBQXlCLEtBQUtMLEtBQTlCOztBQUVBLGlCQUFLTSxJQUFMLEdBQVlFLFNBQVNDLGFBQVQsQ0FBdUIsS0FBdkIsQ0FBWjtBQUNBLGlCQUFLSCxJQUFMLENBQVVJLFNBQVYsQ0FBb0JDLEdBQXBCLENBQXdCLGtCQUF4Qjs7QUFFQSxnQkFBSSxPQUFPLEtBQUtWLE9BQVosS0FBd0IsUUFBNUIsRUFBc0M7QUFDbEMscUJBQUtLLElBQUwsQ0FBVUQsU0FBVixHQUFzQixLQUFLSixPQUEzQjtBQUNILGFBRkQsTUFFTztBQUNILHFCQUFLSyxJQUFMLENBQVVDLFdBQVYsQ0FBc0IsS0FBS04sT0FBM0I7QUFDSDs7QUFFRCxnQkFBTWlCLFNBQVNWLFNBQVNDLGFBQVQsQ0FBdUIsS0FBdkIsQ0FBZjtBQUNBUyxtQkFBT1IsU0FBUCxDQUFpQkMsR0FBakIsQ0FBcUIsb0JBQXJCOztBQUVBLGdCQUFNUSxPQUFPWCxTQUFTQyxhQUFULENBQXVCLFFBQXZCLENBQWI7QUFDQVUsaUJBQUtULFNBQUwsQ0FBZUMsR0FBZixDQUFtQixpQkFBbkI7QUFDQVEsaUJBQUtOLFlBQUwsQ0FBa0IsTUFBbEIsRUFBMEIsUUFBMUI7QUFDQU0saUJBQUtkLFNBQUwsR0FBaUIsTUFBakI7QUFDQWMsaUJBQUtILGdCQUFMLENBQXNCLE9BQXRCLEVBQStCLGFBQUs7QUFDaENJLGtCQUFFQyxjQUFGO0FBQ0Esc0JBQUtuQixNQUFMO0FBQ0Esc0JBQUthLEtBQUw7QUFDSCxhQUpEOztBQU1BRCxtQkFBT1AsV0FBUCxDQUFtQlEsS0FBbkI7QUFDQUQsbUJBQU9QLFdBQVAsQ0FBbUIsS0FBS0gsT0FBeEI7O0FBRUFjLG1CQUFPWCxXQUFQLENBQW1CWSxJQUFuQjs7QUFFQVAsa0JBQU1MLFdBQU4sQ0FBa0JPLE1BQWxCO0FBQ0FGLGtCQUFNTCxXQUFOLENBQWtCLEtBQUtELElBQXZCO0FBQ0FNLGtCQUFNTCxXQUFOLENBQWtCVyxNQUFsQjs7QUFFQSxpQkFBS2YsT0FBTCxDQUFhSSxXQUFiLENBQXlCSyxLQUF6Qjs7QUFFQSxpQkFBS2IsV0FBTCxDQUFpQlEsV0FBakIsQ0FBNkIsS0FBS0osT0FBbEM7O0FBRUEsbUJBQU8sS0FBS0EsT0FBWjtBQUNIOzs7Z0NBRU87QUFDSixpQkFBS0EsT0FBTCxDQUFhbUIsTUFBYjtBQUNIOzs7Ozs7a0JBR1V4QixLIiwiZmlsZSI6IjI1LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNsYXNzIE1vZGFsIHtcbiAgICBcbiAgICBjb25zdHJ1Y3RvcihmcmVkV3JhcHBlciwgdGl0bGUsIGNvbnRlbnQgPSAnJywgb25TYXZlID0gKCkgPT4ge30pIHtcbiAgICAgICAgdGhpcy5mcmVkV3JhcHBlciA9IGZyZWRXcmFwcGVyO1xuICAgICAgICB0aGlzLndyYXBwZXIgPSBudWxsO1xuICAgICAgICB0aGlzLnRpdGxlID0gdGl0bGU7XG4gICAgICAgIHRoaXMuY29udGVudCA9IGNvbnRlbnQ7XG4gICAgICAgIHRoaXMub25TYXZlID0gb25TYXZlO1xuICAgIH1cbiAgICBcbiAgICBzZXRUaXRsZSh0aXRsZSkge1xuICAgICAgICB0aGlzLnRpdGxlID0gdGl0bGU7XG4gICAgICAgIFxuICAgICAgICBpZiAodGhpcy53cmFwcGVyICE9PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLnRpdGxlRWwuaW5uZXJIVE1MID0gdGl0bGU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgc2V0Q29udGVudChjb250ZW50KSB7XG4gICAgICAgIHRoaXMuY29udGVudCA9IGNvbnRlbnQ7XG5cbiAgICAgICAgaWYgKHRoaXMud3JhcHBlciAhPT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGlzLmNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5ib2R5LmlubmVySFRNTCA9IHRoaXMuY29udGVudDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5ib2R5LmlubmVySFRNTCA9ICcnO1xuICAgICAgICAgICAgICAgIHRoaXMuYm9keS5hcHBlbmRDaGlsZCh0aGlzLmNvbnRlbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIFxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgdGhpcy53cmFwcGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2VjdGlvbicpO1xuICAgICAgICB0aGlzLndyYXBwZXIuY2xhc3NMaXN0LmFkZCgnZnJlZC0tbW9kYWwtYmcnKTtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IG1vZGFsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIG1vZGFsLmNsYXNzTGlzdC5hZGQoJ2ZyZWQtLW1vZGFsJyk7XG4gICAgICAgIG1vZGFsLnNldEF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nLCAndHJ1ZScpO1xuXG4gICAgICAgIGNvbnN0IGhlYWRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICBoZWFkZXIuY2xhc3NMaXN0LmFkZCgnZnJlZC0tbW9kYWwtaGVhZGVyJyk7XG5cbiAgICAgICAgY29uc3QgY2xvc2UgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgICAgICAgY2xvc2UuY2xhc3NMaXN0LmFkZCgnYnV0dG9uJyk7XG4gICAgICAgIGNsb3NlLmlubmVySFRNTCA9ICc8c3ZnIHZlcnNpb249XCIxLjFcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgeG1sbnM6eGxpbms9XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIgeD1cIjBweFwiIHk9XCIwcHhcIiB3aWR0aD1cIjIwcHhcIiBoZWlnaHQ9XCIyMHB4XCIgdmlld0JveD1cIi00IC00IDIwIDIwXCIgZW5hYmxlLWJhY2tncm91bmQ9XCJuZXcgLTQgLTQgMjAgMjBcIiB4bWw6c3BhY2U9XCJwcmVzZXJ2ZVwiPjxwb2x5Z29uIHBvaW50cz1cIjE2LjA3OSwtMC42NjYgMTIuNzE3LC00LjAyNyA2LjA1MiwyLjYzNyAtMC42MTMsLTQuMDI3IC0zLjk3NSwtMC42NjYgMi42OSw2IC0zLjk3NSwxMi42NjQgLTAuNjEyLDE2LjAyNiA2LjA1Miw5LjM2MiAxMi43MTcsMTYuMDI3IDE2LjA3OSwxMi42NjQgOS40MTQsNiBcIj48L3BvbHlnb24+PC9zdmc+JztcbiAgICAgICAgY2xvc2UuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmNsb3NlLmJpbmQodGhpcykpO1xuXG4gICAgICAgIHRoaXMudGl0bGVFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2g0Jyk7XG4gICAgICAgIHRoaXMudGl0bGVFbC5pbm5lckhUTUwgPSB0aGlzLnRpdGxlO1xuXG4gICAgICAgIHRoaXMuYm9keSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICB0aGlzLmJvZHkuY2xhc3NMaXN0LmFkZCgnZnJlZC0tbW9kYWwtYm9keScpO1xuICAgICAgICBcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLmNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICB0aGlzLmJvZHkuaW5uZXJIVE1MID0gdGhpcy5jb250ZW50O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5ib2R5LmFwcGVuZENoaWxkKHRoaXMuY29udGVudCk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBmb290ZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgZm9vdGVyLmNsYXNzTGlzdC5hZGQoJ2ZyZWQtLW1vZGFsLWZvb3RlcicpO1xuXG4gICAgICAgIGNvbnN0IHNhdmUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgICAgICAgc2F2ZS5jbGFzc0xpc3QuYWRkKCdmcmVkLS1idG4tc21hbGwnKTtcbiAgICAgICAgc2F2ZS5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCAnYnV0dG9uJyk7XG4gICAgICAgIHNhdmUuaW5uZXJIVE1MID0gJ1NhdmUnO1xuICAgICAgICBzYXZlLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZSA9PiB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICB0aGlzLm9uU2F2ZSgpO1xuICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgICAgIGhlYWRlci5hcHBlbmRDaGlsZChjbG9zZSk7XG4gICAgICAgIGhlYWRlci5hcHBlbmRDaGlsZCh0aGlzLnRpdGxlRWwpO1xuICAgICAgICBcbiAgICAgICAgZm9vdGVyLmFwcGVuZENoaWxkKHNhdmUpO1xuXG4gICAgICAgIG1vZGFsLmFwcGVuZENoaWxkKGhlYWRlcik7XG4gICAgICAgIG1vZGFsLmFwcGVuZENoaWxkKHRoaXMuYm9keSk7XG4gICAgICAgIG1vZGFsLmFwcGVuZENoaWxkKGZvb3Rlcik7XG5cbiAgICAgICAgdGhpcy53cmFwcGVyLmFwcGVuZENoaWxkKG1vZGFsKTtcblxuICAgICAgICB0aGlzLmZyZWRXcmFwcGVyLmFwcGVuZENoaWxkKHRoaXMud3JhcHBlcik7XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gdGhpcy53cmFwcGVyO1xuICAgIH1cbiAgICBcbiAgICBjbG9zZSgpIHtcbiAgICAgICAgdGhpcy53cmFwcGVyLnJlbW92ZSgpO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgTW9kYWw7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vX2J1aWxkL2Fzc2V0cy9qcy9Nb2RhbC5qcyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _Modal = __webpack_require__(25);\n\nvar _Modal2 = _interopRequireDefault(_Modal);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar IconEditor = function () {\n    function IconEditor() {\n        _classCallCheck(this, IconEditor);\n\n        this.fredWrapper = null;\n        this.inited = false;\n    }\n\n    _createClass(IconEditor, [{\n        key: 'init',\n        value: function init(fredWrapper) {\n            if (this.inited === true) return;\n\n            this.fredWrapper = fredWrapper;\n            this.inited = true;\n        }\n    }, {\n        key: 'edit',\n        value: function edit(i) {\n            var _this = this;\n\n            var wrapper = document.createElement('div');\n\n            var input = document.createElement('input');\n            input.setAttribute('type', 'text');\n            input.value = i.className || '';\n\n            var fields = [];\n\n            if (i.dataset.fredAttrs) {\n                var attrs = i.dataset.fredAttrs.split(',');\n                attrs.forEach(function (attr) {\n                    var field = document.createElement('input');\n                    field.dataset.name = attr;\n                    field.setAttribute('type', 'text');\n                    field.value = i.getAttribute(attr || '');\n\n                    fields.push(field);\n                });\n            }\n\n            wrapper.appendChild(this.labelWrapper(input, 'class'));\n\n            fields.forEach(function (field) {\n                wrapper.appendChild(_this.labelWrapper(field, field.dataset.name));\n            });\n\n            var modal = new _Modal2.default(this.fredWrapper, 'Edit Icon', wrapper, function () {\n                i.className = input.value;\n\n                fields.forEach(function (field) {\n                    i.setAttribute(field.dataset.name, field.value);\n                });\n            });\n\n            modal.render();\n        }\n    }, {\n        key: 'labelWrapper',\n        value: function labelWrapper(input, name) {\n            var label = document.createElement('label');\n            label.innerText = name;\n\n            label.appendChild(input);\n\n            return label;\n        }\n    }]);\n\n    return IconEditor;\n}();\n\nvar iconEditor = new IconEditor();\n\nexports.default = iconEditor;\nmodule.exports = exports['default'];\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9fYnVpbGQvYXNzZXRzL2pzL0VkaXRvcnMvSWNvbkVkaXRvci5qcz80OWU3Il0sIm5hbWVzIjpbIkljb25FZGl0b3IiLCJmcmVkV3JhcHBlciIsImluaXRlZCIsImkiLCJ3cmFwcGVyIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiaW5wdXQiLCJzZXRBdHRyaWJ1dGUiLCJ2YWx1ZSIsImNsYXNzTmFtZSIsImZpZWxkcyIsImRhdGFzZXQiLCJmcmVkQXR0cnMiLCJhdHRycyIsInNwbGl0IiwiZm9yRWFjaCIsImZpZWxkIiwibmFtZSIsImF0dHIiLCJnZXRBdHRyaWJ1dGUiLCJwdXNoIiwiYXBwZW5kQ2hpbGQiLCJsYWJlbFdyYXBwZXIiLCJtb2RhbCIsInJlbmRlciIsImxhYmVsIiwiaW5uZXJUZXh0IiwiaWNvbkVkaXRvciJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTs7Ozs7Ozs7SUFFTUEsVTtBQUNGLDBCQUFjO0FBQUE7O0FBQ1YsYUFBS0MsV0FBTCxHQUFtQixJQUFuQjtBQUNBLGFBQUtDLE1BQUwsR0FBYyxLQUFkO0FBQ0g7Ozs7NkJBRUlELFcsRUFBYTtBQUNkLGdCQUFJLEtBQUtDLE1BQUwsS0FBZ0IsSUFBcEIsRUFBMEI7O0FBRTFCLGlCQUFLRCxXQUFMLEdBQW1CQSxXQUFuQjtBQUNBLGlCQUFLQyxNQUFMLEdBQWMsSUFBZDtBQUNIOzs7NkJBRUlDLEMsRUFBRztBQUFBOztBQUNKLGdCQUFNQyxVQUFVQyxTQUFTQyxhQUFULENBQXVCLEtBQXZCLENBQWhCOztBQUdBLGdCQUFNQyxRQUFRRixTQUFTQyxhQUFULENBQXVCLE9BQXZCLENBQWQ7QUFDQUMsa0JBQU1DLFlBQU4sQ0FBbUIsTUFBbkIsRUFBMkIsTUFBM0I7QUFDQUQsa0JBQU1FLEtBQU4sR0FBY04sRUFBRU8sU0FBRixJQUFlLEVBQTdCOztBQUVBLGdCQUFNQyxTQUFTLEVBQWY7O0FBRUEsZ0JBQUlSLEVBQUVTLE9BQUYsQ0FBVUMsU0FBZCxFQUF5QjtBQUNyQixvQkFBTUMsUUFBUVgsRUFBRVMsT0FBRixDQUFVQyxTQUFWLENBQW9CRSxLQUFwQixDQUEwQixHQUExQixDQUFkO0FBQ0FELHNCQUFNRSxPQUFOLENBQWMsZ0JBQVE7QUFDbEIsd0JBQU1DLFFBQVFaLFNBQVNDLGFBQVQsQ0FBdUIsT0FBdkIsQ0FBZDtBQUNBVywwQkFBTUwsT0FBTixDQUFjTSxJQUFkLEdBQXFCQyxJQUFyQjtBQUNBRiwwQkFBTVQsWUFBTixDQUFtQixNQUFuQixFQUEyQixNQUEzQjtBQUNBUywwQkFBTVIsS0FBTixHQUFjTixFQUFFaUIsWUFBRixDQUFlRCxRQUFRLEVBQXZCLENBQWQ7O0FBRUFSLDJCQUFPVSxJQUFQLENBQVlKLEtBQVo7QUFDSCxpQkFQRDtBQVFIOztBQUVEYixvQkFBUWtCLFdBQVIsQ0FBb0IsS0FBS0MsWUFBTCxDQUFrQmhCLEtBQWxCLEVBQXlCLE9BQXpCLENBQXBCOztBQUVBSSxtQkFBT0ssT0FBUCxDQUFlLGlCQUFTO0FBQ3BCWix3QkFBUWtCLFdBQVIsQ0FBb0IsTUFBS0MsWUFBTCxDQUFrQk4sS0FBbEIsRUFBeUJBLE1BQU1MLE9BQU4sQ0FBY00sSUFBdkMsQ0FBcEI7QUFDSCxhQUZEOztBQUtBLGdCQUFNTSxRQUFRLG9CQUFVLEtBQUt2QixXQUFmLEVBQTRCLFdBQTVCLEVBQXlDRyxPQUF6QyxFQUFrRCxZQUFNO0FBQ2xFRCxrQkFBRU8sU0FBRixHQUFjSCxNQUFNRSxLQUFwQjs7QUFFQUUsdUJBQU9LLE9BQVAsQ0FBZSxpQkFBUztBQUNwQmIsc0JBQUVLLFlBQUYsQ0FBZVMsTUFBTUwsT0FBTixDQUFjTSxJQUE3QixFQUFtQ0QsTUFBTVIsS0FBekM7QUFDSCxpQkFGRDtBQUdILGFBTmEsQ0FBZDs7QUFRQWUsa0JBQU1DLE1BQU47QUFDSDs7O3FDQUVZbEIsSyxFQUFPVyxJLEVBQU07QUFDdEIsZ0JBQU1RLFFBQVFyQixTQUFTQyxhQUFULENBQXVCLE9BQXZCLENBQWQ7QUFDQW9CLGtCQUFNQyxTQUFOLEdBQWtCVCxJQUFsQjs7QUFFQVEsa0JBQU1KLFdBQU4sQ0FBa0JmLEtBQWxCOztBQUVBLG1CQUFPbUIsS0FBUDtBQUNIOzs7Ozs7QUFJTCxJQUFNRSxhQUFhLElBQUk1QixVQUFKLEVBQW5COztrQkFFZTRCLFUiLCJmaWxlIjoiMjYuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgTW9kYWwgZnJvbSAnLi4vTW9kYWwnO1xuXG5jbGFzcyBJY29uRWRpdG9yIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5mcmVkV3JhcHBlciA9IG51bGw7XG4gICAgICAgIHRoaXMuaW5pdGVkID0gZmFsc2U7XG4gICAgfVxuXG4gICAgaW5pdChmcmVkV3JhcHBlcikge1xuICAgICAgICBpZiAodGhpcy5pbml0ZWQgPT09IHRydWUpIHJldHVybjtcblxuICAgICAgICB0aGlzLmZyZWRXcmFwcGVyID0gZnJlZFdyYXBwZXI7XG4gICAgICAgIHRoaXMuaW5pdGVkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBlZGl0KGkpIHtcbiAgICAgICAgY29uc3Qgd3JhcHBlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTtcbiAgICAgICAgaW5wdXQuc2V0QXR0cmlidXRlKCd0eXBlJywgJ3RleHQnKTtcbiAgICAgICAgaW5wdXQudmFsdWUgPSBpLmNsYXNzTmFtZSB8fCAnJztcblxuICAgICAgICBjb25zdCBmaWVsZHMgPSBbXTtcblxuICAgICAgICBpZiAoaS5kYXRhc2V0LmZyZWRBdHRycykge1xuICAgICAgICAgICAgY29uc3QgYXR0cnMgPSBpLmRhdGFzZXQuZnJlZEF0dHJzLnNwbGl0KCcsJyk7XG4gICAgICAgICAgICBhdHRycy5mb3JFYWNoKGF0dHIgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGZpZWxkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTtcbiAgICAgICAgICAgICAgICBmaWVsZC5kYXRhc2V0Lm5hbWUgPSBhdHRyO1xuICAgICAgICAgICAgICAgIGZpZWxkLnNldEF0dHJpYnV0ZSgndHlwZScsICd0ZXh0Jyk7XG4gICAgICAgICAgICAgICAgZmllbGQudmFsdWUgPSBpLmdldEF0dHJpYnV0ZShhdHRyIHx8ICcnKTtcblxuICAgICAgICAgICAgICAgIGZpZWxkcy5wdXNoKGZpZWxkKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgd3JhcHBlci5hcHBlbmRDaGlsZCh0aGlzLmxhYmVsV3JhcHBlcihpbnB1dCwgJ2NsYXNzJykpO1xuICAgICAgICBcbiAgICAgICAgZmllbGRzLmZvckVhY2goZmllbGQgPT4ge1xuICAgICAgICAgICAgd3JhcHBlci5hcHBlbmRDaGlsZCh0aGlzLmxhYmVsV3JhcHBlcihmaWVsZCwgZmllbGQuZGF0YXNldC5uYW1lKSk7ICAgIFxuICAgICAgICB9KTtcblxuXG4gICAgICAgIGNvbnN0IG1vZGFsID0gbmV3IE1vZGFsKHRoaXMuZnJlZFdyYXBwZXIsICdFZGl0IEljb24nLCB3cmFwcGVyLCAoKSA9PiB7XG4gICAgICAgICAgICBpLmNsYXNzTmFtZSA9IGlucHV0LnZhbHVlO1xuXG4gICAgICAgICAgICBmaWVsZHMuZm9yRWFjaChmaWVsZCA9PiB7XG4gICAgICAgICAgICAgICAgaS5zZXRBdHRyaWJ1dGUoZmllbGQuZGF0YXNldC5uYW1lLCBmaWVsZC52YWx1ZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgbW9kYWwucmVuZGVyKCk7XG4gICAgfVxuICAgIFxuICAgIGxhYmVsV3JhcHBlcihpbnB1dCwgbmFtZSkge1xuICAgICAgICBjb25zdCBsYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xhYmVsJyk7XG4gICAgICAgIGxhYmVsLmlubmVyVGV4dCA9IG5hbWU7XG4gICAgICAgIFxuICAgICAgICBsYWJlbC5hcHBlbmRDaGlsZChpbnB1dCk7XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gbGFiZWw7XG4gICAgfVxuXG59XG5cbmNvbnN0IGljb25FZGl0b3IgPSBuZXcgSWNvbkVkaXRvcigpO1xuXG5leHBvcnQgZGVmYXVsdCBpY29uRWRpdG9yO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL19idWlsZC9hc3NldHMvanMvRWRpdG9ycy9JY29uRWRpdG9yLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

	eval("/* WEBPACK VAR INJECTION */(function(__dirname) {(function webpackUniversalModuleDefinition(root, factory) {\n\tif(true)\n\t\tmodule.exports = factory((function webpackLoadOptionalExternalModule() { try { return __webpack_require__(28); } catch(e) {} }()), __webpack_require__(29));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"fs\", \"path\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Twig\"] = factory((function webpackLoadOptionalExternalModule() { try { return require(\"fs\"); } catch(e) {} }()), require(\"path\"));\n\telse\n\t\troot[\"Twig\"] = factory(root[\"fs\"], root[\"path\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_19__, __WEBPACK_EXTERNAL_MODULE_20__) {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * Twig.js\n\t *\n\t * @copyright 2011-2016 John Roepke and the Twig.js Contributors\n\t * @license   Available under the BSD 2-Clause License\n\t * @link      https://github.com/twigjs/twig.js\n\t */\n\n\tvar Twig = {\n\t    VERSION: '0.10.2'\n\t};\n\n\t__webpack_require__(1)(Twig);\n\t__webpack_require__(2)(Twig);\n\t__webpack_require__(3)(Twig);\n\t__webpack_require__(5)(Twig);\n\t__webpack_require__(6)(Twig);\n\t__webpack_require__(7)(Twig);\n\t__webpack_require__(17)(Twig);\n\t__webpack_require__(18)(Twig);\n\t__webpack_require__(21)(Twig);\n\t__webpack_require__(22)(Twig);\n\t__webpack_require__(23)(Twig);\n\t__webpack_require__(24)(Twig);\n\t__webpack_require__(25)(Twig);\n\t__webpack_require__(26)(Twig);\n\t__webpack_require__(27)(Twig);\n\n\tmodule.exports = Twig.exports;\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\t// ## twig.core.js\n\t//\n\t// This file handles template level tokenizing, compiling and parsing.\n\tmodule.exports = function (Twig) {\n\t    \"use strict\";\n\n\t    Twig.trace = false;\n\t    Twig.debug = false;\n\n\t    // Default caching to true for the improved performance it offers\n\t    Twig.cache = true;\n\n\t    Twig.noop = function() {};\n\n\t    Twig.placeholders = {\n\t        parent: \"{{|PARENT|}}\"\n\t    };\n\n\t    /**\n\t     * Fallback for Array.indexOf for IE8 et al\n\t     */\n\t    Twig.indexOf = function (arr, searchElement /*, fromIndex */ ) {\n\t        if (Array.prototype.hasOwnProperty(\"indexOf\")) {\n\t            return arr.indexOf(searchElement);\n\t        }\n\t        if (arr === void 0 || arr === null) {\n\t            throw new TypeError();\n\t        }\n\t        var t = Object(arr);\n\t        var len = t.length >>> 0;\n\t        if (len === 0) {\n\t            return -1;\n\t        }\n\t        var n = 0;\n\t        if (arguments.length > 0) {\n\t            n = Number(arguments[1]);\n\t            if (n !== n) { // shortcut for verifying if it's NaN\n\t                n = 0;\n\t            } else if (n !== 0 && n !== Infinity && n !== -Infinity) {\n\t                n = (n > 0 || -1) * Math.floor(Math.abs(n));\n\t            }\n\t        }\n\t        if (n >= len) {\n\t            // console.log(\"indexOf not found1 \", JSON.stringify(searchElement), JSON.stringify(arr));\n\t            return -1;\n\t        }\n\t        var k = n >= 0 ? n : Math.max(len - Math.abs(n), 0);\n\t        for (; k < len; k++) {\n\t            if (k in t && t[k] === searchElement) {\n\t                return k;\n\t            }\n\t        }\n\t        if (arr == searchElement) {\n\t            return 0;\n\t        }\n\t        // console.log(\"indexOf not found2 \", JSON.stringify(searchElement), JSON.stringify(arr));\n\n\t        return -1;\n\t    }\n\n\t    Twig.forEach = function (arr, callback, thisArg) {\n\t        if (Array.prototype.forEach ) {\n\t            return arr.forEach(callback, thisArg);\n\t        }\n\n\t        var T, k;\n\n\t        if ( arr == null ) {\n\t          throw new TypeError( \" this is null or not defined\" );\n\t        }\n\n\t        // 1. Let O be the result of calling ToObject passing the |this| value as the argument.\n\t        var O = Object(arr);\n\n\t        // 2. Let lenValue be the result of calling the Get internal method of O with the argument \"length\".\n\t        // 3. Let len be ToUint32(lenValue).\n\t        var len = O.length >>> 0; // Hack to convert O.length to a UInt32\n\n\t        // 4. If IsCallable(callback) is false, throw a TypeError exception.\n\t        // See: http://es5.github.com/#x9.11\n\t        if ( {}.toString.call(callback) != \"[object Function]\" ) {\n\t          throw new TypeError( callback + \" is not a function\" );\n\t        }\n\n\t        // 5. If thisArg was supplied, let T be thisArg; else let T be undefined.\n\t        if ( thisArg ) {\n\t          T = thisArg;\n\t        }\n\n\t        // 6. Let k be 0\n\t        k = 0;\n\n\t        // 7. Repeat, while k < len\n\t        while( k < len ) {\n\n\t          var kValue;\n\n\t          // a. Let Pk be ToString(k).\n\t          //   This is implicit for LHS operands of the in operator\n\t          // b. Let kPresent be the result of calling the HasProperty internal method of O with argument Pk.\n\t          //   This step can be combined with c\n\t          // c. If kPresent is true, then\n\t          if ( k in O ) {\n\n\t            // i. Let kValue be the result of calling the Get internal method of O with argument Pk.\n\t            kValue = O[ k ];\n\n\t            // ii. Call the Call internal method of callback with T as the this value and\n\t            // argument list containing kValue, k, and O.\n\t            callback.call( T, kValue, k, O );\n\t          }\n\t          // d. Increase k by 1.\n\t          k++;\n\t        }\n\t        // 8. return undefined\n\t    };\n\n\t    Twig.merge = function(target, source, onlyChanged) {\n\t        Twig.forEach(Object.keys(source), function (key) {\n\t            if (onlyChanged && !(key in target)) {\n\t                return;\n\t            }\n\n\t            target[key] = source[key]\n\t        });\n\n\t        return target;\n\t    };\n\n\t    /**\n\t     * Exception thrown by twig.js.\n\t     */\n\t    Twig.Error = function(message, file) {\n\t       this.message = message;\n\t       this.name = \"TwigException\";\n\t       this.type = \"TwigException\";\n\t       this.file = file;\n\t    };\n\n\t    /**\n\t     * Get the string representation of a Twig error.\n\t     */\n\t    Twig.Error.prototype.toString = function() {\n\t        var output = this.name + \": \" + this.message;\n\n\t        return output;\n\t    };\n\n\t    /**\n\t     * Wrapper for logging to the console.\n\t     */\n\t    Twig.log = {\n\t        trace: function() {if (Twig.trace && console) {console.log(Array.prototype.slice.call(arguments));}},\n\t        debug: function() {if (Twig.debug && console) {console.log(Array.prototype.slice.call(arguments));}}\n\t    };\n\n\n\t    if (typeof console !== \"undefined\") {\n\t        if (typeof console.error !== \"undefined\") {\n\t            Twig.log.error = function() {\n\t                console.error.apply(console, arguments);\n\t            }\n\t        } else if (typeof console.log !== \"undefined\") {\n\t            Twig.log.error = function() {\n\t                console.log.apply(console, arguments);\n\t            }\n\t        }\n\t    } else {\n\t        Twig.log.error = function(){};\n\t    }\n\n\t    /**\n\t     * Wrapper for child context objects in Twig.\n\t     *\n\t     * @param {Object} context Values to initialize the context with.\n\t     */\n\t    Twig.ChildContext = function(context) {\n\t        var ChildContext = function ChildContext() {};\n\t        ChildContext.prototype = context;\n\t        return new ChildContext();\n\t    };\n\n\t    /**\n\t     * Container for methods related to handling high level template tokens\n\t     *      (for example: {{ expression }}, {% logic %}, {# comment #}, raw data)\n\t     */\n\t    Twig.token = {};\n\n\t    /**\n\t     * Token types.\n\t     */\n\t    Twig.token.type = {\n\t        output:                 'output',\n\t        logic:                  'logic',\n\t        comment:                'comment',\n\t        raw:                    'raw',\n\t        output_whitespace_pre:  'output_whitespace_pre',\n\t        output_whitespace_post: 'output_whitespace_post',\n\t        output_whitespace_both: 'output_whitespace_both',\n\t        logic_whitespace_pre:   'logic_whitespace_pre',\n\t        logic_whitespace_post:  'logic_whitespace_post',\n\t        logic_whitespace_both:  'logic_whitespace_both'\n\t    };\n\n\t    /**\n\t     * Token syntax definitions.\n\t     */\n\t    Twig.token.definitions = [\n\t        {\n\t            type: Twig.token.type.raw,\n\t            open: '{% raw %}',\n\t            close: '{% endraw %}'\n\t        },\n\t        {\n\t            type: Twig.token.type.raw,\n\t            open: '{% verbatim %}',\n\t            close: '{% endverbatim %}'\n\t        },\n\t        // *Whitespace type tokens*\n\t        //\n\t        // These typically take the form `{{- expression -}}` or `{{- expression }}` or `{{ expression -}}`.\n\t        {\n\t            type: Twig.token.type.output_whitespace_pre,\n\t            open: '{{-',\n\t            close: '}}'\n\t        },\n\t        {\n\t            type: Twig.token.type.output_whitespace_post,\n\t            open: '{{',\n\t            close: '-}}'\n\t        },\n\t        {\n\t            type: Twig.token.type.output_whitespace_both,\n\t            open: '{{-',\n\t            close: '-}}'\n\t        },\n\t        {\n\t            type: Twig.token.type.logic_whitespace_pre,\n\t            open: '{%-',\n\t            close: '%}'\n\t        },\n\t        {\n\t            type: Twig.token.type.logic_whitespace_post,\n\t            open: '{%',\n\t            close: '-%}'\n\t        },\n\t        {\n\t            type: Twig.token.type.logic_whitespace_both,\n\t            open: '{%-',\n\t            close: '-%}'\n\t        },\n\t        // *Output type tokens*\n\t        //\n\t        // These typically take the form `{{ expression }}`.\n\t        {\n\t            type: Twig.token.type.output,\n\t            open: '{{',\n\t            close: '}}'\n\t        },\n\t        // *Logic type tokens*\n\t        //\n\t        // These typically take a form like `{% if expression %}` or `{% endif %}`\n\t        {\n\t            type: Twig.token.type.logic,\n\t            open: '{%',\n\t            close: '%}'\n\t        },\n\t        // *Comment type tokens*\n\t        //\n\t        // These take the form `{# anything #}`\n\t        {\n\t            type: Twig.token.type.comment,\n\t            open: '{#',\n\t            close: '#}'\n\t        }\n\t    ];\n\n\n\t    /**\n\t     * What characters start \"strings\" in token definitions. We need this to ignore token close\n\t     * strings inside an expression.\n\t     */\n\t    Twig.token.strings = ['\"', \"'\"];\n\n\t    Twig.token.findStart = function (template) {\n\t        var output = {\n\t                position: null,\n\t                close_position: null,\n\t                def: null\n\t            },\n\t            i,\n\t            token_template,\n\t            first_key_position,\n\t            close_key_position;\n\n\t        for (i=0;i<Twig.token.definitions.length;i++) {\n\t            token_template = Twig.token.definitions[i];\n\t            first_key_position = template.indexOf(token_template.open);\n\t            close_key_position = template.indexOf(token_template.close);\n\n\t            Twig.log.trace(\"Twig.token.findStart: \", \"Searching for \", token_template.open, \" found at \", first_key_position);\n\n\t            //Special handling for mismatched tokens\n\t            if (first_key_position >= 0) {\n\t                //This token matches the template\n\t                if (token_template.open.length !== token_template.close.length) {\n\t                    //This token has mismatched closing and opening tags\n\t                    if (close_key_position < 0) {\n\t                        //This token's closing tag does not match the template\n\t                        continue;\n\t                    }\n\t                }\n\t            }\n\t            // Does this token occur before any other types?\n\t            if (first_key_position >= 0 && (output.position === null || first_key_position < output.position)) {\n\t                output.position = first_key_position;\n\t                output.def = token_template;\n\t                output.close_position = close_key_position;\n\t            } else if (first_key_position >= 0 && output.position !== null && first_key_position === output.position) {\n\t                /*This token exactly matches another token,\n\t                greedily match to check if this token has a greater specificity*/\n\t                if (token_template.open.length > output.def.open.length) {\n\t                    //This token's opening tag is more specific than the previous match\n\t                    output.position = first_key_position;\n\t                    output.def = token_template;\n\t                    output.close_position = close_key_position;\n\t                } else if (token_template.open.length === output.def.open.length) {\n\t                    if (token_template.close.length > output.def.close.length) {\n\t                        //This token's opening tag is as specific as the previous match,\n\t                        //but the closing tag has greater specificity\n\t                        if (close_key_position >= 0 && close_key_position < output.close_position) {\n\t                            //This token's closing tag exists in the template,\n\t                            //and it occurs sooner than the previous match\n\t                            output.position = first_key_position;\n\t                            output.def = token_template;\n\t                            output.close_position = close_key_position;\n\t                        }\n\t                    } else if (close_key_position >= 0 && close_key_position < output.close_position) {\n\t                        //This token's closing tag is not more specific than the previous match,\n\t                        //but it occurs sooner than the previous match\n\t                        output.position = first_key_position;\n\t                        output.def = token_template;\n\t                        output.close_position = close_key_position;\n\t                    }\n\t                }\n\t            }\n\t        }\n\n\t        delete output['close_position'];\n\n\t        return output;\n\t    };\n\n\t    Twig.token.findEnd = function (template, token_def, start) {\n\t        var end = null,\n\t            found = false,\n\t            offset = 0,\n\n\t            // String position variables\n\t            str_pos = null,\n\t            str_found = null,\n\t            pos = null,\n\t            end_offset = null,\n\t            this_str_pos = null,\n\t            end_str_pos = null,\n\n\t            // For loop variables\n\t            i,\n\t            l;\n\n\t        while (!found) {\n\t            str_pos = null;\n\t            str_found = null;\n\t            pos = template.indexOf(token_def.close, offset);\n\n\t            if (pos >= 0) {\n\t                end = pos;\n\t                found = true;\n\t            } else {\n\t                // throw an exception\n\t                throw new Twig.Error(\"Unable to find closing bracket '\" + token_def.close +\n\t                                \"'\" + \" opened near template position \" + start);\n\t            }\n\n\t            // Ignore quotes within comments; just look for the next comment close sequence,\n\t            // regardless of what comes before it. https://github.com/justjohn/twig.js/issues/95\n\t            if (token_def.type === Twig.token.type.comment) {\n\t              break;\n\t            }\n\t            // Ignore quotes within raw tag\n\t            // Fixes #283\n\t            if (token_def.type === Twig.token.type.raw) {\n\t                break;\n\t            }\n\n\t            l = Twig.token.strings.length;\n\t            for (i = 0; i < l; i += 1) {\n\t                this_str_pos = template.indexOf(Twig.token.strings[i], offset);\n\n\t                if (this_str_pos > 0 && this_str_pos < pos &&\n\t                        (str_pos === null || this_str_pos < str_pos)) {\n\t                    str_pos = this_str_pos;\n\t                    str_found = Twig.token.strings[i];\n\t                }\n\t            }\n\n\t            // We found a string before the end of the token, now find the string's end and set the search offset to it\n\t            if (str_pos !== null) {\n\t                end_offset = str_pos + 1;\n\t                end = null;\n\t                found = false;\n\t                while (true) {\n\t                    end_str_pos = template.indexOf(str_found, end_offset);\n\t                    if (end_str_pos < 0) {\n\t                        throw \"Unclosed string in template\";\n\t                    }\n\t                    // Ignore escaped quotes\n\t                    if (template.substr(end_str_pos - 1, 1) !== \"\\\\\") {\n\t                        offset = end_str_pos + 1;\n\t                        break;\n\t                    } else {\n\t                        end_offset = end_str_pos + 1;\n\t                    }\n\t                }\n\t            }\n\t        }\n\t        return end;\n\t    };\n\n\t    /**\n\t     * Convert a template into high-level tokens.\n\t     */\n\t    Twig.tokenize = function (template) {\n\t        var tokens = [],\n\t            // An offset for reporting errors locations in the template.\n\t            error_offset = 0,\n\n\t            // The start and type of the first token found in the template.\n\t            found_token = null,\n\t            // The end position of the matched token.\n\t            end = null;\n\n\t        while (template.length > 0) {\n\t            // Find the first occurance of any token type in the template\n\t            found_token = Twig.token.findStart(template);\n\n\t            Twig.log.trace(\"Twig.tokenize: \", \"Found token: \", found_token);\n\n\t            if (found_token.position !== null) {\n\t                // Add a raw type token for anything before the start of the token\n\t                if (found_token.position > 0) {\n\t                    tokens.push({\n\t                        type: Twig.token.type.raw,\n\t                        value: template.substring(0, found_token.position)\n\t                    });\n\t                }\n\t                template = template.substr(found_token.position + found_token.def.open.length);\n\t                error_offset += found_token.position + found_token.def.open.length;\n\n\t                // Find the end of the token\n\t                end = Twig.token.findEnd(template, found_token.def, error_offset);\n\n\t                Twig.log.trace(\"Twig.tokenize: \", \"Token ends at \", end);\n\n\t                tokens.push({\n\t                    type:  found_token.def.type,\n\t                    value: template.substring(0, end).trim()\n\t                });\n\n\t                if (template.substr( end + found_token.def.close.length, 1 ) === \"\\n\") {\n\t                    switch (found_token.def.type) {\n\t                        case \"logic_whitespace_pre\":\n\t                        case \"logic_whitespace_post\":\n\t                        case \"logic_whitespace_both\":\n\t                        case \"logic\":\n\t                            // Newlines directly after logic tokens are ignored\n\t                            end += 1;\n\t                            break;\n\t                    }\n\t                }\n\n\t                template = template.substr(end + found_token.def.close.length);\n\n\t                // Increment the position in the template\n\t                error_offset += end + found_token.def.close.length;\n\n\t            } else {\n\t                // No more tokens -> add the rest of the template as a raw-type token\n\t                tokens.push({\n\t                    type: Twig.token.type.raw,\n\t                    value: template\n\t                });\n\t                template = '';\n\t            }\n\t        }\n\n\t        return tokens;\n\t    };\n\n\n\t    Twig.compile = function (tokens) {\n\t        try {\n\n\t            // Output and intermediate stacks\n\t            var output = [],\n\t                stack = [],\n\t                // The tokens between open and close tags\n\t                intermediate_output = [],\n\n\t                token = null,\n\t                logic_token = null,\n\t                unclosed_token = null,\n\t                // Temporary previous token.\n\t                prev_token = null,\n\t                // Temporary previous output.\n\t                prev_output = null,\n\t                // Temporary previous intermediate output.\n\t                prev_intermediate_output = null,\n\t                // The previous token's template\n\t                prev_template = null,\n\t                // Token lookahead\n\t                next_token = null,\n\t                // The output token\n\t                tok_output = null,\n\n\t                // Logic Token values\n\t                type = null,\n\t                open = null,\n\t                next = null;\n\n\t            var compile_output = function(token) {\n\t                Twig.expression.compile.apply(this, [token]);\n\t                if (stack.length > 0) {\n\t                    intermediate_output.push(token);\n\t                } else {\n\t                    output.push(token);\n\t                }\n\t            };\n\n\t            var compile_logic = function(token) {\n\t                // Compile the logic token\n\t                logic_token = Twig.logic.compile.apply(this, [token]);\n\n\t                type = logic_token.type;\n\t                open = Twig.logic.handler[type].open;\n\t                next = Twig.logic.handler[type].next;\n\n\t                Twig.log.trace(\"Twig.compile: \", \"Compiled logic token to \", logic_token,\n\t                                                 \" next is: \", next, \" open is : \", open);\n\n\t                // Not a standalone token, check logic stack to see if this is expected\n\t                if (open !== undefined && !open) {\n\t                    prev_token = stack.pop();\n\t                    prev_template = Twig.logic.handler[prev_token.type];\n\n\t                    if (Twig.indexOf(prev_template.next, type) < 0) {\n\t                        throw new Error(type + \" not expected after a \" + prev_token.type);\n\t                    }\n\n\t                    prev_token.output = prev_token.output || [];\n\n\t                    prev_token.output = prev_token.output.concat(intermediate_output);\n\t                    intermediate_output = [];\n\n\t                    tok_output = {\n\t                        type: Twig.token.type.logic,\n\t                        token: prev_token\n\t                    };\n\t                    if (stack.length > 0) {\n\t                        intermediate_output.push(tok_output);\n\t                    } else {\n\t                        output.push(tok_output);\n\t                    }\n\t                }\n\n\t                // This token requires additional tokens to complete the logic structure.\n\t                if (next !== undefined && next.length > 0) {\n\t                    Twig.log.trace(\"Twig.compile: \", \"Pushing \", logic_token, \" to logic stack.\");\n\n\t                    if (stack.length > 0) {\n\t                        // Put any currently held output into the output list of the logic operator\n\t                        // currently at the head of the stack before we push a new one on.\n\t                        prev_token = stack.pop();\n\t                        prev_token.output = prev_token.output || [];\n\t                        prev_token.output = prev_token.output.concat(intermediate_output);\n\t                        stack.push(prev_token);\n\t                        intermediate_output = [];\n\t                    }\n\n\t                    // Push the new logic token onto the logic stack\n\t                    stack.push(logic_token);\n\n\t                } else if (open !== undefined && open) {\n\t                    tok_output = {\n\t                        type: Twig.token.type.logic,\n\t                        token: logic_token\n\t                    };\n\t                    // Standalone token (like {% set ... %}\n\t                    if (stack.length > 0) {\n\t                        intermediate_output.push(tok_output);\n\t                    } else {\n\t                        output.push(tok_output);\n\t                    }\n\t                }\n\t            };\n\n\t            while (tokens.length > 0) {\n\t                token = tokens.shift();\n\t                prev_output = output[output.length - 1];\n\t                prev_intermediate_output = intermediate_output[intermediate_output.length - 1];\n\t                next_token = tokens[0];\n\t                Twig.log.trace(\"Compiling token \", token);\n\t                switch (token.type) {\n\t                    case Twig.token.type.raw:\n\t                        if (stack.length > 0) {\n\t                            intermediate_output.push(token);\n\t                        } else {\n\t                            output.push(token);\n\t                        }\n\t                        break;\n\n\t                    case Twig.token.type.logic:\n\t                        compile_logic.call(this, token);\n\t                        break;\n\n\t                    // Do nothing, comments should be ignored\n\t                    case Twig.token.type.comment:\n\t                        break;\n\n\t                    case Twig.token.type.output:\n\t                        compile_output.call(this, token);\n\t                        break;\n\n\t                    //Kill whitespace ahead and behind this token\n\t                    case Twig.token.type.logic_whitespace_pre:\n\t                    case Twig.token.type.logic_whitespace_post:\n\t                    case Twig.token.type.logic_whitespace_both:\n\t                    case Twig.token.type.output_whitespace_pre:\n\t                    case Twig.token.type.output_whitespace_post:\n\t                    case Twig.token.type.output_whitespace_both:\n\t                        if (token.type !== Twig.token.type.output_whitespace_post && token.type !== Twig.token.type.logic_whitespace_post) {\n\t                            if (prev_output) {\n\t                                //If the previous output is raw, pop it off\n\t                                if (prev_output.type === Twig.token.type.raw) {\n\t                                    output.pop();\n\n\t                                    //If the previous output is not just whitespace, trim it\n\t                                    if (prev_output.value.match(/^\\s*$/) === null) {\n\t                                        prev_output.value = prev_output.value.trim();\n\t                                        //Repush the previous output\n\t                                        output.push(prev_output);\n\t                                    }\n\t                                }\n\t                            }\n\n\t                            if (prev_intermediate_output) {\n\t                                //If the previous intermediate output is raw, pop it off\n\t                                if (prev_intermediate_output.type === Twig.token.type.raw) {\n\t                                    intermediate_output.pop();\n\n\t                                    //If the previous output is not just whitespace, trim it\n\t                                    if (prev_intermediate_output.value.match(/^\\s*$/) === null) {\n\t                                        prev_intermediate_output.value = prev_intermediate_output.value.trim();\n\t                                        //Repush the previous intermediate output\n\t                                        intermediate_output.push(prev_intermediate_output);\n\t                                    }\n\t                                }\n\t                            }\n\t                        }\n\n\t                        //Compile this token\n\t                        switch (token.type) {\n\t                            case Twig.token.type.output_whitespace_pre:\n\t                            case Twig.token.type.output_whitespace_post:\n\t                            case Twig.token.type.output_whitespace_both:\n\t                                compile_output.call(this, token);\n\t                                break;\n\t                            case Twig.token.type.logic_whitespace_pre:\n\t                            case Twig.token.type.logic_whitespace_post:\n\t                            case Twig.token.type.logic_whitespace_both:\n\t                                compile_logic.call(this, token);\n\t                                break;\n\t                        }\n\n\t                        if (token.type !== Twig.token.type.output_whitespace_pre && token.type !== Twig.token.type.logic_whitespace_pre) {\n\t                            if (next_token) {\n\t                                //If the next token is raw, shift it out\n\t                                if (next_token.type === Twig.token.type.raw) {\n\t                                    tokens.shift();\n\n\t                                    //If the next token is not just whitespace, trim it\n\t                                    if (next_token.value.match(/^\\s*$/) === null) {\n\t                                        next_token.value = next_token.value.trim();\n\t                                        //Unshift the next token\n\t                                        tokens.unshift(next_token);\n\t                                    }\n\t                                }\n\t                            }\n\t                        }\n\n\t                        break;\n\t                }\n\n\t                Twig.log.trace(\"Twig.compile: \", \" Output: \", output,\n\t                                                 \" Logic Stack: \", stack,\n\t                                                 \" Pending Output: \", intermediate_output );\n\t            }\n\n\t            // Verify that there are no logic tokens left in the stack.\n\t            if (stack.length > 0) {\n\t                unclosed_token = stack.pop();\n\t                throw new Error(\"Unable to find an end tag for \" + unclosed_token.type +\n\t                                \", expecting one of \" + unclosed_token.next);\n\t            }\n\t            return output;\n\t        } catch (ex) {\n\t            if (this.options.rethrow) {\n\t                if (ex.type == 'TwigException' && !ex.file) {\n\t                    ex.file = this.id;\n\t                }\n\n\t                throw ex\n\t            }\n\t            else {\n\t                Twig.log.error(\"Error compiling twig template \" + this.id + \": \");\n\t                if (ex.stack) {\n\t                    Twig.log.error(ex.stack);\n\t                } else {\n\t                    Twig.log.error(ex.toString());\n\t                }\n\t            }\n\t        }\n\t    };\n\n\t    /**\n\t     * Parse a compiled template.\n\t     *\n\t     * @param {Array} tokens The compiled tokens.\n\t     * @param {Object} context The render context.\n\t     *\n\t     * @return {string} The parsed template.\n\t     */\n\t    Twig.parse = function (tokens, context, allow_async) {\n\t        var that = this,\n\t            output = [],\n\n\t            // Store any error that might be thrown by the promise chain.\n\t            err = null,\n\n\t            // This will be set to is_async if template renders synchronously\n\t            is_async = true,\n\t            promise = null,\n\n\t            // Track logic chains\n\t            chain = true;\n\n\n\t        function handleException(ex) {\n\t            if (that.options.rethrow) {\n\t                if (typeof ex === 'string') {\n\t                    ex = new Twig.Error(ex)\n\t                }\n\n\t                if (ex.type == 'TwigException' && !ex.file) {\n\t                    ex.file = that.id;\n\t                }\n\n\t                throw ex;\n\t            }\n\t            else {\n\t                Twig.log.error(\"Error parsing twig template \" + that.id + \": \");\n\t                if (ex.stack) {\n\t                    Twig.log.error(ex.stack);\n\t                } else {\n\t                    Twig.log.error(ex.toString());\n\t                }\n\n\t                if (Twig.debug) {\n\t                    return ex.toString();\n\t                }\n\t            }\n\t        }\n\n\t        promise = Twig.async.forEach(tokens, function parseToken(token) {\n\t            Twig.log.debug(\"Twig.parse: \", \"Parsing token: \", token);\n\n\t            switch (token.type) {\n\t                case Twig.token.type.raw:\n\t                    output.push(Twig.filters.raw(token.value));\n\t                    break;\n\n\t                case Twig.token.type.logic:\n\t                    var logic_token = token.token;\n\n\t                    return Twig.logic.parseAsync.apply(that, [logic_token, context, chain])\n\t                    .then(function(logic) {\n\t                        if (logic.chain !== undefined) {\n\t                            chain = logic.chain;\n\t                        }\n\t                        if (logic.context !== undefined) {\n\t                            context = logic.context;\n\t                        }\n\t                        if (logic.output !== undefined) {\n\t                            output.push(logic.output);\n\t                        }\n\t                    });\n\t                    break;\n\n\t                case Twig.token.type.comment:\n\t                    // Do nothing, comments should be ignored\n\t                    break;\n\n\t                //Fall through whitespace to output\n\t                case Twig.token.type.output_whitespace_pre:\n\t                case Twig.token.type.output_whitespace_post:\n\t                case Twig.token.type.output_whitespace_both:\n\t                case Twig.token.type.output:\n\t                    Twig.log.debug(\"Twig.parse: \", \"Output token: \", token.stack);\n\t                    // Parse the given expression in the given context\n\t                    return Twig.expression.parseAsync.apply(that, [token.stack, context])\n\t                    .then(function(o) {\n\t                        output.push(o);\n\t                    });\n\t            }\n\t        })\n\t        .then(function() {\n\t            output = Twig.output.apply(that, [output]);\n\t            is_async = false;\n\t            return output;\n\t        })\n\t        .catch(function(e) {\n\t            if (allow_async)\n\t                handleException(e);\n\n\t            err = e;\n\t        });\n\n\t        // If `allow_async` we will always return a promise since we do not\n\t        // know in advance if we are going to run asynchronously or not.\n\t        if (allow_async)\n\t            return promise;\n\n\t        // Handle errors here if we fail synchronously.\n\t        if (err !== null)\n\t            return handleException(err);\n\n\t        // If `allow_async` is not true we should not allow the user\n\t        // to use asynchronous functions or filters.\n\t        if (is_async)\n\t            throw new Twig.Error('You are using Twig.js in sync mode in combination with async extensions.');\n\n\t        return output;\n\t    };\n\n\t    /**\n\t     * Tokenize and compile a string template.\n\t     *\n\t     * @param {string} data The template.\n\t     *\n\t     * @return {Array} The compiled tokens.\n\t     */\n\t    Twig.prepare = function(data) {\n\t        var tokens, raw_tokens;\n\n\t        // Tokenize\n\t        Twig.log.debug(\"Twig.prepare: \", \"Tokenizing \", data);\n\t        raw_tokens = Twig.tokenize.apply(this, [data]);\n\n\t        // Compile\n\t        Twig.log.debug(\"Twig.prepare: \", \"Compiling \", raw_tokens);\n\t        tokens = Twig.compile.apply(this, [raw_tokens]);\n\n\t        Twig.log.debug(\"Twig.prepare: \", \"Compiled \", tokens);\n\n\t        return tokens;\n\t    };\n\n\t    /**\n\t     * Join the output token's stack and escape it if needed\n\t     *\n\t     * @param {Array} Output token's stack\n\t     *\n\t     * @return {string|String} Autoescaped output\n\t     */\n\t    Twig.output = function(output) {\n\t        if (!this.options.autoescape) {\n\t            return output.join(\"\");\n\t        }\n\n\t        var strategy = 'html';\n\t        if(typeof this.options.autoescape == 'string')\n\t            strategy = this.options.autoescape;\n\n\t        // [].map would be better but it's not supported by IE8-\n\t        var escaped_output = [];\n\t        Twig.forEach(output, function (str) {\n\t            if (str && (str.twig_markup !== true && str.twig_markup != strategy)) {\n\t                str = Twig.filters.escape(str, [ strategy ]);\n\t            }\n\t            escaped_output.push(str);\n\t        });\n\t        return Twig.Markup(escaped_output.join(\"\"));\n\t    }\n\n\t    // Namespace for template storage and retrieval\n\t    Twig.Templates = {\n\t        /**\n\t         * Registered template loaders - use Twig.Templates.registerLoader to add supported loaders\n\t         * @type {Object}\n\t         */\n\t        loaders: {},\n\n\t        /**\n\t         * Registered template parsers - use Twig.Templates.registerParser to add supported parsers\n\t         * @type {Object}\n\t         */\n\t        parsers: {},\n\n\t        /**\n\t         * Cached / loaded templates\n\t         * @type {Object}\n\t         */\n\t        registry: {}\n\t    };\n\n\t    /**\n\t     * Is this id valid for a twig template?\n\t     *\n\t     * @param {string} id The ID to check.\n\t     *\n\t     * @throws {Twig.Error} If the ID is invalid or used.\n\t     * @return {boolean} True if the ID is valid.\n\t     */\n\t    Twig.validateId = function(id) {\n\t        if (id === \"prototype\") {\n\t            throw new Twig.Error(id + \" is not a valid twig identifier\");\n\t        } else if (Twig.cache && Twig.Templates.registry.hasOwnProperty(id)) {\n\t            throw new Twig.Error(\"There is already a template with the ID \" + id);\n\t        }\n\t        return true;\n\t    }\n\n\t    /**\n\t     * Register a template loader\n\t     *\n\t     * @example\n\t     * Twig.extend(function(Twig) {\n\t     *    Twig.Templates.registerLoader('custom_loader', function(location, params, callback, error_callback) {\n\t     *        // ... load the template ...\n\t     *        params.data = loadedTemplateData;\n\t     *        // create and return the template\n\t     *        var template = new Twig.Template(params);\n\t     *        if (typeof callback === 'function') {\n\t     *            callback(template);\n\t     *        }\n\t     *        return template;\n\t     *    });\n\t     * });\n\t     *\n\t     * @param {String} method_name The method this loader is intended for (ajax, fs)\n\t     * @param {Function} func The function to execute when loading the template\n\t     * @param {Object|undefined} scope Optional scope parameter to bind func to\n\t     *\n\t     * @throws Twig.Error\n\t     *\n\t     * @return {void}\n\t     */\n\t    Twig.Templates.registerLoader = function(method_name, func, scope) {\n\t        if (typeof func !== 'function') {\n\t            throw new Twig.Error('Unable to add loader for ' + method_name + ': Invalid function reference given.');\n\t        }\n\t        if (scope) {\n\t            func = func.bind(scope);\n\t        }\n\t        this.loaders[method_name] = func;\n\t    };\n\n\t    /**\n\t     * Remove a registered loader\n\t     *\n\t     * @param {String} method_name The method name for the loader you wish to remove\n\t     *\n\t     * @return {void}\n\t     */\n\t    Twig.Templates.unRegisterLoader = function(method_name) {\n\t        if (this.isRegisteredLoader(method_name)) {\n\t            delete this.loaders[method_name];\n\t        }\n\t    };\n\n\t    /**\n\t     * See if a loader is registered by its method name\n\t     *\n\t     * @param {String} method_name The name of the loader you are looking for\n\t     *\n\t     * @return {boolean}\n\t     */\n\t    Twig.Templates.isRegisteredLoader = function(method_name) {\n\t        return this.loaders.hasOwnProperty(method_name);\n\t    };\n\n\t    /**\n\t     * Register a template parser\n\t     *\n\t     * @example\n\t     * Twig.extend(function(Twig) {\n\t     *    Twig.Templates.registerParser('custom_parser', function(params) {\n\t     *        // this template source can be accessed in params.data\n\t     *        var template = params.data\n\t     *\n\t     *        // ... custom process that modifies the template\n\t     *\n\t     *        // return the parsed template\n\t     *        return template;\n\t     *    });\n\t     * });\n\t     *\n\t     * @param {String} method_name The method this parser is intended for (twig, source)\n\t     * @param {Function} func The function to execute when parsing the template\n\t     * @param {Object|undefined} scope Optional scope parameter to bind func to\n\t     *\n\t     * @throws Twig.Error\n\t     *\n\t     * @return {void}\n\t     */\n\t    Twig.Templates.registerParser = function(method_name, func, scope) {\n\t        if (typeof func !== 'function') {\n\t            throw new Twig.Error('Unable to add parser for ' + method_name + ': Invalid function regerence given.');\n\t        }\n\n\t        if (scope) {\n\t            func = func.bind(scope);\n\t        }\n\n\t        this.parsers[method_name] = func;\n\t    };\n\n\t    /**\n\t     * Remove a registered parser\n\t     *\n\t     * @param {String} method_name The method name for the parser you wish to remove\n\t     *\n\t     * @return {void}\n\t     */\n\t    Twig.Templates.unRegisterParser = function(method_name) {\n\t        if (this.isRegisteredParser(method_name)) {\n\t            delete this.parsers[method_name];\n\t        }\n\t    };\n\n\t    /**\n\t     * See if a parser is registered by its method name\n\t     *\n\t     * @param {String} method_name The name of the parser you are looking for\n\t     *\n\t     * @return {boolean}\n\t     */\n\t    Twig.Templates.isRegisteredParser = function(method_name) {\n\t        return this.parsers.hasOwnProperty(method_name);\n\t    };\n\n\t    /**\n\t     * Save a template object to the store.\n\t     *\n\t     * @param {Twig.Template} template   The twig.js template to store.\n\t     */\n\t    Twig.Templates.save = function(template) {\n\t        if (template.id === undefined) {\n\t            throw new Twig.Error(\"Unable to save template with no id\");\n\t        }\n\t        Twig.Templates.registry[template.id] = template;\n\t    };\n\n\t    /**\n\t     * Load a previously saved template from the store.\n\t     *\n\t     * @param {string} id   The ID of the template to load.\n\t     *\n\t     * @return {Twig.Template} A twig.js template stored with the provided ID.\n\t     */\n\t    Twig.Templates.load = function(id) {\n\t        if (!Twig.Templates.registry.hasOwnProperty(id)) {\n\t            return null;\n\t        }\n\t        return Twig.Templates.registry[id];\n\t    };\n\n\t    /**\n\t     * Load a template from a remote location using AJAX and saves in with the given ID.\n\t     *\n\t     * Available parameters:\n\t     *\n\t     *      async:       Should the HTTP request be performed asynchronously.\n\t     *                      Defaults to true.\n\t     *      method:      What method should be used to load the template\n\t     *                      (fs or ajax)\n\t     *      parser:      What method should be used to parse the template\n\t     *                      (twig or source)\n\t     *      precompiled: Has the template already been compiled.\n\t     *\n\t     * @param {string} location  The remote URL to load as a template.\n\t     * @param {Object} params The template parameters.\n\t     * @param {function} callback  A callback triggered when the template finishes loading.\n\t     * @param {function} error_callback  A callback triggered if an error occurs loading the template.\n\t     *\n\t     *\n\t     */\n\t    Twig.Templates.loadRemote = function(location, params, callback, error_callback) {\n\t        var loader;\n\n\t        // Default to async\n\t        if (params.async === undefined) {\n\t            params.async = true;\n\t        }\n\n\t        // Default to the URL so the template is cached.\n\t        if (params.id === undefined) {\n\t            params.id = location;\n\t        }\n\n\t        // Check for existing template\n\t        if (Twig.cache && Twig.Templates.registry.hasOwnProperty(params.id)) {\n\t            // A template is already saved with the given id.\n\t            if (typeof callback === 'function') {\n\t                callback(Twig.Templates.registry[params.id]);\n\t            }\n\t            // TODO: if async, return deferred promise\n\t            return Twig.Templates.registry[params.id];\n\t        }\n\n\t        //if the parser name hasn't been set, default it to twig\n\t        params.parser = params.parser || 'twig';\n\n\t        // Assume 'fs' if the loader is not defined\n\t        loader = this.loaders[params.method] || this.loaders.fs;\n\t        return loader.apply(this, arguments);\n\t    };\n\n\t    // Determine object type\n\t    function is(type, obj) {\n\t        var clas = Object.prototype.toString.call(obj).slice(8, -1);\n\t        return obj !== undefined && obj !== null && clas === type;\n\t    }\n\n\t    /**\n\t     * Create a new twig.js template.\n\t     *\n\t     * Parameters: {\n\t     *      data:   The template, either pre-compiled tokens or a string template\n\t     *      id:     The name of this template\n\t     *      blocks: Any pre-existing block from a child template\n\t     * }\n\t     *\n\t     * @param {Object} params The template parameters.\n\t     */\n\t    Twig.Template = function ( params ) {\n\t        var data = params.data,\n\t            id = params.id,\n\t            blocks = params.blocks,\n\t            macros = params.macros || {},\n\t            base = params.base,\n\t            path = params.path,\n\t            url = params.url,\n\t            name = params.name,\n\t            method = params.method,\n\t            // parser options\n\t            options = params.options;\n\n\t        // # What is stored in a Twig.Template\n\t        //\n\t        // The Twig Template hold several chucks of data.\n\t        //\n\t        //     {\n\t        //          id:     The token ID (if any)\n\t        //          tokens: The list of tokens that makes up this template.\n\t        //          blocks: The list of block this template contains.\n\t        //          base:   The base template (if any)\n\t        //            options:  {\n\t        //                Compiler/parser options\n\t        //\n\t        //                strict_variables: true/false\n\t        //                    Should missing variable/keys emit an error message. If false, they default to null.\n\t        //            }\n\t        //     }\n\t        //\n\n\t        this.id     = id;\n\t        this.method = method;\n\t        this.base   = base;\n\t        this.path   = path;\n\t        this.url    = url;\n\t        this.name   = name;\n\t        this.macros = macros;\n\t        this.options = options;\n\n\t        this.reset(blocks);\n\n\t        if (is('String', data)) {\n\t            this.tokens = Twig.prepare.apply(this, [data]);\n\t        } else {\n\t            this.tokens = data;\n\t        }\n\n\t        if (id !== undefined) {\n\t            Twig.Templates.save(this);\n\t        }\n\t    };\n\n\t    Twig.Template.prototype.reset = function(blocks) {\n\t        Twig.log.debug(\"Twig.Template.reset\", \"Reseting template \" + this.id);\n\t        this.blocks = {};\n\t        this.importedBlocks = [];\n\t        this.originalBlockTokens = {};\n\t        this.child = {\n\t            blocks: blocks || {}\n\t        };\n\t        this.extend = null;\n\t    };\n\n\t    Twig.Template.prototype.render = function (context, params, allow_async) {\n\t        params = params || {};\n\n\t        var that = this,\n\n\t            // Store any error that might be thrown by the promise chain.\n\t            err = null,\n\n\t            // This will be set to is_async if template renders synchronously\n\t            is_async = true,\n\t            promise = null,\n\n\t            result,\n\t            url;\n\n\t        this.context = context || {};\n\n\t        // Clear any previous state\n\t        this.reset();\n\t        if (params.blocks) {\n\t            this.blocks = params.blocks;\n\t        }\n\t        if (params.macros) {\n\t            this.macros = params.macros;\n\t        }\n\n\t        var cb = function(output) {\n\t            // Does this template extend another\n\t            if (that.extend) {\n\t                var ext_template;\n\n\t                // check if the template is provided inline\n\t                if ( that.options.allowInlineIncludes ) {\n\t                    ext_template = Twig.Templates.load(that.extend);\n\t                    if ( ext_template ) {\n\t                        ext_template.options = that.options;\n\t                    }\n\t                }\n\n\t                // check for the template file via include\n\t                if (!ext_template) {\n\t                    url = Twig.path.parsePath(that, that.extend);\n\n\t                    ext_template = Twig.Templates.loadRemote(url, {\n\t                        method: that.getLoaderMethod(),\n\t                        base: that.base,\n\t                        async:  false,\n\t                        id:     url,\n\t                        options: that.options\n\t                    });\n\t                }\n\n\t                that.parent = ext_template;\n\n\t                return that.parent.renderAsync(that.context, {\n\t                    blocks: that.blocks\n\t                });\n\t            }\n\n\t            if (params.output == 'blocks') {\n\t                return that.blocks;\n\t            } else if (params.output == 'macros') {\n\t                return that.macros;\n\t            } else {\n\t                return output;\n\t            }\n\t        };\n\n\t        promise = Twig.parseAsync.apply(this, [this.tokens, this.context])\n\t        .then(cb)\n\t        .then(function(v) {\n\t            is_async = false;\n\t            result = v;\n\t            return v;\n\t        })\n\t        .catch(function(e) {\n\t            if (allow_async)\n\t                throw e;\n\n\t            err = e;\n\t        })\n\n\t        // If `allow_async` we will always return a promise since we do not\n\t        // know in advance if we are going to run asynchronously or not.\n\t        if (allow_async)\n\t            return promise;\n\n\t        // Handle errors here if we fail synchronously.\n\t        if (err !== null)\n\t            throw err;\n\n\t        // If `allow_async` is not true we should not allow the user\n\t        // to use asynchronous functions or filters.\n\t        if (is_async)\n\t            throw new Twig.Error('You are using Twig.js in sync mode in combination with async extensions.');\n\n\t        return result;\n\t    };\n\n\t    Twig.Template.prototype.importFile = function(file) {\n\t        var url, sub_template;\n\t        if (!this.url && this.options.allowInlineIncludes) {\n\t            file = this.path ? Twig.path.parsePath(this, file) : file;\n\t            sub_template = Twig.Templates.load(file);\n\n\t            if (!sub_template) {\n\t                sub_template = Twig.Templates.loadRemote(url, {\n\t                    id: file,\n\t                    method: this.getLoaderMethod(),\n\t                    async: false,\n\t                    path: file,\n\t                    options: this.options\n\t                });\n\n\t                if (!sub_template) {\n\t                    throw new Twig.Error(\"Unable to find the template \" + file);\n\t                }\n\t            }\n\n\t            sub_template.options = this.options;\n\n\t            return sub_template;\n\t        }\n\n\t        url = Twig.path.parsePath(this, file);\n\n\t        // Load blocks from an external file\n\t        sub_template = Twig.Templates.loadRemote(url, {\n\t            method: this.getLoaderMethod(),\n\t            base: this.base,\n\t            async: false,\n\t            options: this.options,\n\t            id: url\n\t        });\n\n\t        return sub_template;\n\t    };\n\n\t    Twig.Template.prototype.importBlocks = function(file, override) {\n\t        var sub_template = this.importFile(file),\n\t            context = this.context,\n\t            that = this,\n\t            key;\n\n\t        override = override || false;\n\n\t        sub_template.render(context);\n\n\t        // Mixin blocks\n\t        Twig.forEach(Object.keys(sub_template.blocks), function(key) {\n\t            if (override || that.blocks[key] === undefined) {\n\t                that.blocks[key] = sub_template.blocks[key];\n\t                that.importedBlocks.push(key);\n\t            }\n\t        });\n\t    };\n\n\t    Twig.Template.prototype.importMacros = function(file) {\n\t        var url = Twig.path.parsePath(this, file);\n\n\t        // load remote template\n\t        var remoteTemplate = Twig.Templates.loadRemote(url, {\n\t            method: this.getLoaderMethod(),\n\t            async: false,\n\t            id: url\n\t        });\n\n\t        return remoteTemplate;\n\t    };\n\n\t    Twig.Template.prototype.getLoaderMethod = function() {\n\t        if (this.path) {\n\t            return 'fs';\n\t        }\n\t        if (this.url) {\n\t            return 'ajax';\n\t        }\n\t        return this.method || 'fs';\n\t    };\n\n\t    Twig.Template.prototype.compile = function(options) {\n\t        // compile the template into raw JS\n\t        return Twig.compiler.compile(this, options);\n\t    };\n\n\t    /**\n\t     * Create safe output\n\t     *\n\t     * @param {string} Content safe to output\n\t     *\n\t     * @return {String} Content wrapped into a String\n\t     */\n\n\t    Twig.Markup = function(content, strategy) {\n\t        if(typeof strategy == 'undefined') {\n\t            strategy = true;\n\t        }\n\n\t        if (typeof content === 'string' && content.length > 0) {\n\t            content = new String(content);\n\t            content.twig_markup = strategy;\n\t        }\n\t        return content;\n\t    };\n\n\t    return Twig;\n\n\t};\n\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\t// ## twig.compiler.js\n\t//\n\t// This file handles compiling templates into JS\n\tmodule.exports = function (Twig) {\n\t    /**\n\t     * Namespace for compilation.\n\t     */\n\t    Twig.compiler = {\n\t        module: {}\n\t    };\n\n\t    // Compile a Twig Template to output.\n\t    Twig.compiler.compile = function(template, options) {\n\t        // Get tokens\n\t        var tokens = JSON.stringify(template.tokens)\n\t            , id = template.id\n\t            , output;\n\n\t        if (options.module) {\n\t            if (Twig.compiler.module[options.module] === undefined) {\n\t                throw new Twig.Error(\"Unable to find module type \" + options.module);\n\t            }\n\t            output = Twig.compiler.module[options.module](id, tokens, options.twig);\n\t        } else {\n\t            output = Twig.compiler.wrap(id, tokens);\n\t        }\n\t        return output;\n\t    };\n\n\t    Twig.compiler.module = {\n\t        amd: function(id, tokens, pathToTwig) {\n\t            return 'define([\"' + pathToTwig + '\"], function (Twig) {\\n\\tvar twig, templates;\\ntwig = Twig.twig;\\ntemplates = ' + Twig.compiler.wrap(id, tokens) + '\\n\\treturn templates;\\n});';\n\t        }\n\t        , node: function(id, tokens) {\n\t            return 'var twig = require(\"twig\").twig;\\n'\n\t                + 'exports.template = ' + Twig.compiler.wrap(id, tokens)\n\t        }\n\t        , cjs2: function(id, tokens, pathToTwig) {\n\t            return 'module.declare([{ twig: \"' + pathToTwig + '\" }], function (require, exports, module) {\\n'\n\t                        + '\\tvar twig = require(\"twig\").twig;\\n'\n\t                        + '\\texports.template = ' + Twig.compiler.wrap(id, tokens)\n\t                    + '\\n});'\n\t        }\n\t    };\n\n\t    Twig.compiler.wrap = function(id, tokens) {\n\t        return 'twig({id:\"'+id.replace('\"', '\\\\\"')+'\", data:'+tokens+', precompiled: true});\\n';\n\t    };\n\n\t    return Twig;\n\t};\n\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// ## twig.expression.js\n\t//\n\t// This file handles tokenizing, compiling and parsing expressions.\n\tmodule.exports = function (Twig) {\n\t    \"use strict\";\n\n\t    function parseParams(thisArg, params, context) {\n\t        if (params)\n\t            return Twig.expression.parseAsync.apply(thisArg, [params, context]);\n\n\t        return Twig.Promise.resolve(false);\n\t    }\n\n\t    /**\n\t     * Namespace for expression handling.\n\t     */\n\t    Twig.expression = { };\n\n\t    __webpack_require__(4)(Twig);\n\n\t    /**\n\t     * Reserved word that can't be used as variable names.\n\t     */\n\t    Twig.expression.reservedWords = [\n\t        \"true\", \"false\", \"null\", \"TRUE\", \"FALSE\", \"NULL\", \"_context\", \"and\", \"b-and\", \"or\", \"b-or\", \"b-xor\", \"in\", \"not in\", \"if\"\n\t    ];\n\n\t    /**\n\t     * The type of tokens used in expressions.\n\t     */\n\t    Twig.expression.type = {\n\t        comma:      'Twig.expression.type.comma',\n\t        operator: {\n\t            unary:  'Twig.expression.type.operator.unary',\n\t            binary: 'Twig.expression.type.operator.binary'\n\t        },\n\t        string:     'Twig.expression.type.string',\n\t        bool:       'Twig.expression.type.bool',\n\t        slice:      'Twig.expression.type.slice',\n\t        array: {\n\t            start:  'Twig.expression.type.array.start',\n\t            end:    'Twig.expression.type.array.end'\n\t        },\n\t        object: {\n\t            start:  'Twig.expression.type.object.start',\n\t            end:    'Twig.expression.type.object.end'\n\t        },\n\t        parameter: {\n\t            start:  'Twig.expression.type.parameter.start',\n\t            end:    'Twig.expression.type.parameter.end'\n\t        },\n\t        subexpression: {\n\t            start:  'Twig.expression.type.subexpression.start',\n\t            end:    'Twig.expression.type.subexpression.end'\n\t        },\n\t        key: {\n\t            period:   'Twig.expression.type.key.period',\n\t            brackets: 'Twig.expression.type.key.brackets'\n\t        },\n\t        filter:     'Twig.expression.type.filter',\n\t        _function:  'Twig.expression.type._function',\n\t        variable:   'Twig.expression.type.variable',\n\t        number:     'Twig.expression.type.number',\n\t        _null:     'Twig.expression.type.null',\n\t        context:    'Twig.expression.type.context',\n\t        test:       'Twig.expression.type.test'\n\t    };\n\n\t    Twig.expression.set = {\n\t        // What can follow an expression (in general)\n\t        operations: [\n\t            Twig.expression.type.filter,\n\t            Twig.expression.type.operator.unary,\n\t            Twig.expression.type.operator.binary,\n\t            Twig.expression.type.array.end,\n\t            Twig.expression.type.object.end,\n\t            Twig.expression.type.parameter.end,\n\t            Twig.expression.type.subexpression.end,\n\t            Twig.expression.type.comma,\n\t            Twig.expression.type.test\n\t        ],\n\t        expressions: [\n\t            Twig.expression.type._function,\n\t            Twig.expression.type.bool,\n\t            Twig.expression.type.string,\n\t            Twig.expression.type.variable,\n\t            Twig.expression.type.number,\n\t            Twig.expression.type._null,\n\t            Twig.expression.type.context,\n\t            Twig.expression.type.parameter.start,\n\t            Twig.expression.type.array.start,\n\t            Twig.expression.type.object.start,\n\t            Twig.expression.type.subexpression.start,\n\t            Twig.expression.type.operator.unary\n\t        ]\n\t    };\n\n\t    // Most expressions allow a '.' or '[' after them, so we provide a convenience set\n\t    Twig.expression.set.operations_extended = Twig.expression.set.operations.concat([\n\t                    Twig.expression.type.key.period,\n\t                    Twig.expression.type.key.brackets,\n\t                    Twig.expression.type.slice]);\n\n\t    // Some commonly used compile and parse functions.\n\t    Twig.expression.fn = {\n\t        compile: {\n\t            push: function(token, stack, output) {\n\t                output.push(token);\n\t            },\n\t            push_both: function(token, stack, output) {\n\t                output.push(token);\n\t                stack.push(token);\n\t            }\n\t        },\n\t        parse: {\n\t            push: function(token, stack, context) {\n\t                stack.push(token);\n\t            },\n\t            push_value: function(token, stack, context) {\n\t                stack.push(token.value);\n\t            }\n\t        }\n\t    };\n\n\t    // The regular expressions and compile/parse logic used to match tokens in expressions.\n\t    //\n\t    // Properties:\n\t    //\n\t    //      type:  The type of expression this matches\n\t    //\n\t    //      regex: One or more regular expressions that matche the format of the token.\n\t    //\n\t    //      next:  Valid tokens that can occur next in the expression.\n\t    //\n\t    // Functions:\n\t    //\n\t    //      compile: A function that compiles the raw regular expression match into a token.\n\t    //\n\t    //      parse:   A function that parses the compiled token into output.\n\t    //\n\t    Twig.expression.definitions = [\n\t        {\n\t            type: Twig.expression.type.test,\n\t            regex: /^is\\s+(not)?\\s*([a-zA-Z_][a-zA-Z0-9_]*(\\s?as)?)/,\n\t            next: Twig.expression.set.operations.concat([Twig.expression.type.parameter.start]),\n\t            compile: function(token, stack, output) {\n\t                token.filter   = token.match[2];\n\t                token.modifier = token.match[1];\n\t                delete token.match;\n\t                delete token.value;\n\t                output.push(token);\n\t            },\n\t            parse: function(token, stack, context) {\n\t                var value = stack.pop();\n\n\t                return parseParams(this, token.params, context)\n\t                .then(function(params) {\n\t                    var result = Twig.test(token.filter, value, params);\n\n\t                    if (token.modifier == 'not') {\n\t                        stack.push(!result);\n\t                    } else {\n\t                        stack.push(result);\n\t                    }\n\t                });\n\t            }\n\t        },\n\t        {\n\t            type: Twig.expression.type.comma,\n\t            // Match a comma\n\t            regex: /^,/,\n\t            next: Twig.expression.set.expressions.concat([Twig.expression.type.array.end, Twig.expression.type.object.end]),\n\t            compile: function(token, stack, output) {\n\t                var i = stack.length - 1,\n\t                    stack_token;\n\n\t                delete token.match;\n\t                delete token.value;\n\n\t                // pop tokens off the stack until the start of the object\n\t                for(;i >= 0; i--) {\n\t                    stack_token = stack.pop();\n\t                    if (stack_token.type === Twig.expression.type.object.start\n\t                            || stack_token.type === Twig.expression.type.parameter.start\n\t                            || stack_token.type === Twig.expression.type.array.start) {\n\t                        stack.push(stack_token);\n\t                        break;\n\t                    }\n\t                    output.push(stack_token);\n\t                }\n\t                output.push(token);\n\t            }\n\t        },\n\t        {\n\t            /**\n\t             * Match a number (integer or decimal)\n\t             */\n\t            type: Twig.expression.type.number,\n\t            // match a number\n\t            regex: /^\\-?\\d+(\\.\\d+)?/,\n\t            next: Twig.expression.set.operations,\n\t            compile: function(token, stack, output) {\n\t                token.value = Number(token.value);\n\t                output.push(token);\n\t            },\n\t            parse: Twig.expression.fn.parse.push_value\n\t        },\n\t        {\n\t            type: Twig.expression.type.operator.binary,\n\t            // Match any of ?:, +, *, /, -, %, ~, <, <=, >, >=, !=, ==, **, ?, :, and, b-and, or, b-or, b-xor, in, not in\n\t            // and, or, in, not in can be followed by a space or parenthesis\n\t            regex: /(^\\?\\:|^(b\\-and)|^(b\\-or)|^(b\\-xor)|^[\\+\\-~%\\?]|^[\\:](?!\\d\\])|^[!=]==?|^[!<>]=?|^\\*\\*?|^\\/\\/?|^(and)[\\(|\\s+]|^(or)[\\(|\\s+]|^(in)[\\(|\\s+]|^(not in)[\\(|\\s+]|^\\.\\.)/,\n\t            next: Twig.expression.set.expressions,\n\t            transform: function(match, tokens) {\n\t                switch(match[0]) {\n\t                    case 'and(':\n\t                    case 'or(':\n\t                    case 'in(':\n\t                    case 'not in(':\n\t                        //Strip off the ( if it exists\n\t                        tokens[tokens.length - 1].value = match[2];\n\t                        return match[0];\n\t                        break;\n\t                    default:\n\t                        return '';\n\t                }\n\t            },\n\t            compile: function(token, stack, output) {\n\t                delete token.match;\n\n\t                token.value = token.value.trim();\n\t                var value = token.value,\n\t                    operator = Twig.expression.operator.lookup(value, token);\n\n\t                Twig.log.trace(\"Twig.expression.compile: \", \"Operator: \", operator, \" from \", value);\n\n\t                while (stack.length > 0 &&\n\t                       (stack[stack.length-1].type == Twig.expression.type.operator.unary || stack[stack.length-1].type == Twig.expression.type.operator.binary) &&\n\t                            (\n\t                                (operator.associativity === Twig.expression.operator.leftToRight &&\n\t                                 operator.precidence    >= stack[stack.length-1].precidence) ||\n\n\t                                (operator.associativity === Twig.expression.operator.rightToLeft &&\n\t                                 operator.precidence    >  stack[stack.length-1].precidence)\n\t                            )\n\t                       ) {\n\t                     var temp = stack.pop();\n\t                     output.push(temp);\n\t                }\n\n\t                if (value === \":\") {\n\t                    // Check if this is a ternary or object key being set\n\t                    if (stack[stack.length - 1] && stack[stack.length-1].value === \"?\") {\n\t                        // Continue as normal for a ternary\n\t                    } else {\n\t                        // This is not a ternary so we push the token to the output where it can be handled\n\t                        //   when the assocated object is closed.\n\t                        var key_token = output.pop();\n\n\t                        if (key_token.type === Twig.expression.type.string ||\n\t                                key_token.type === Twig.expression.type.variable) {\n\t                            token.key = key_token.value;\n\t                        } else if (key_token.type === Twig.expression.type.number) {\n\t                            // Convert integer keys into string keys\n\t                            token.key = key_token.value.toString();\n\t                        } else if (key_token.expression &&\n\t                            (key_token.type === Twig.expression.type.parameter.end ||\n\t                            key_token.type == Twig.expression.type.subexpression.end)) {\n\t                            token.params = key_token.params;\n\t                        } else {\n\t                            throw new Twig.Error(\"Unexpected value before ':' of \" + key_token.type + \" = \" + key_token.value);\n\t                        }\n\n\t                        output.push(token);\n\t                        return;\n\t                    }\n\t                } else {\n\t                    stack.push(operator);\n\t                }\n\t            },\n\t            parse: function(token, stack, context) {\n\t                if (token.key) {\n\t                    // handle ternary ':' operator\n\t                    stack.push(token);\n\t                } else if (token.params) {\n\t                    // handle \"{(expression):value}\"\n\t                    return Twig.expression.parseAsync.apply(this, [token.params, context])\n\t                    .then(function(key) {\n\t                        token.key = key;\n\t                        stack.push(token);\n\n\t                        //If we're in a loop, we might need token.params later, especially in this form of \"(expression):value\"\n\t                        if (!context.loop) {\n\t                            delete(token.params);\n\t                        }\n\t                    });\n\t                } else {\n\t                    Twig.expression.operator.parse(token.value, stack);\n\t                }\n\t            }\n\t        },\n\t        {\n\t            type: Twig.expression.type.operator.unary,\n\t            // Match any of not\n\t            regex: /(^not\\s+)/,\n\t            next: Twig.expression.set.expressions,\n\t            compile: function(token, stack, output) {\n\t                delete token.match;\n\n\t                token.value = token.value.trim();\n\t                var value = token.value,\n\t                    operator = Twig.expression.operator.lookup(value, token);\n\n\t                Twig.log.trace(\"Twig.expression.compile: \", \"Operator: \", operator, \" from \", value);\n\n\t                while (stack.length > 0 &&\n\t                       (stack[stack.length-1].type == Twig.expression.type.operator.unary || stack[stack.length-1].type == Twig.expression.type.operator.binary) &&\n\t                            (\n\t                                (operator.associativity === Twig.expression.operator.leftToRight &&\n\t                                 operator.precidence    >= stack[stack.length-1].precidence) ||\n\n\t                                (operator.associativity === Twig.expression.operator.rightToLeft &&\n\t                                 operator.precidence    >  stack[stack.length-1].precidence)\n\t                            )\n\t                       ) {\n\t                     var temp = stack.pop();\n\t                     output.push(temp);\n\t                }\n\n\t                stack.push(operator);\n\t            },\n\t            parse: function(token, stack, context) {\n\t                Twig.expression.operator.parse(token.value, stack);\n\t            }\n\t        },\n\t        {\n\t            /**\n\t             * Match a string. This is anything between a pair of single or double quotes.\n\t             */\n\t            type: Twig.expression.type.string,\n\t            // See: http://blog.stevenlevithan.com/archives/match-quoted-string\n\t            regex: /^([\"'])(?:(?=(\\\\?))\\2[\\s\\S])*?\\1/,\n\t            next: Twig.expression.set.operations_extended,\n\t            compile: function(token, stack, output) {\n\t                var value = token.value;\n\t                delete token.match\n\n\t                // Remove the quotes from the string\n\t                if (value.substring(0, 1) === '\"') {\n\t                    value = value.replace('\\\\\"', '\"');\n\t                } else {\n\t                    value = value.replace(\"\\\\'\", \"'\");\n\t                }\n\t                token.value = value.substring(1, value.length-1).replace( /\\\\n/g, \"\\n\" ).replace( /\\\\r/g, \"\\r\" );\n\t                Twig.log.trace(\"Twig.expression.compile: \", \"String value: \", token.value);\n\t                output.push(token);\n\t            },\n\t            parse: Twig.expression.fn.parse.push_value\n\t        },\n\t        {\n\t            /**\n\t             * Match a subexpression set start.\n\t             */\n\t            type: Twig.expression.type.subexpression.start,\n\t            regex: /^\\(/,\n\t            next: Twig.expression.set.expressions.concat([Twig.expression.type.subexpression.end]),\n\t            compile: function(token, stack, output) {\n\t                token.value = '(';\n\t                output.push(token);\n\t                stack.push(token);\n\t            },\n\t            parse: Twig.expression.fn.parse.push\n\t        },\n\t        {\n\t            /**\n\t             * Match a subexpression set end.\n\t             */\n\t            type: Twig.expression.type.subexpression.end,\n\t            regex: /^\\)/,\n\t            next: Twig.expression.set.operations_extended,\n\t            validate: function(match, tokens) {\n\t                // Iterate back through previous tokens to ensure we follow a subexpression start\n\t                var i = tokens.length - 1,\n\t                    found_subexpression_start = false,\n\t                    next_subexpression_start_invalid = false,\n\t                    unclosed_parameter_count = 0;\n\n\t                while(!found_subexpression_start && i >= 0) {\n\t                    var token = tokens[i];\n\n\t                    found_subexpression_start = token.type === Twig.expression.type.subexpression.start;\n\n\t                    // If we have previously found a subexpression end, then this subexpression start is the start of\n\t                    // that subexpression, not the subexpression we are searching for\n\t                    if (found_subexpression_start && next_subexpression_start_invalid) {\n\t                        next_subexpression_start_invalid = false;\n\t                        found_subexpression_start = false;\n\t                    }\n\n\t                    // Count parameter tokens to ensure we dont return truthy for a parameter opener\n\t                    if (token.type === Twig.expression.type.parameter.start) {\n\t                        unclosed_parameter_count++;\n\t                    } else if (token.type === Twig.expression.type.parameter.end) {\n\t                        unclosed_parameter_count--;\n\t                    } else if (token.type === Twig.expression.type.subexpression.end) {\n\t                        next_subexpression_start_invalid = true;\n\t                    }\n\n\t                    i--;\n\t                }\n\n\t                // If we found unclosed parameters, return false\n\t                // If we didnt find subexpression start, return false\n\t                // Otherwise return true\n\n\t                return (found_subexpression_start && (unclosed_parameter_count === 0));\n\t            },\n\t            compile: function(token, stack, output) {\n\t                // This is basically a copy of parameter end compilation\n\t                var stack_token,\n\t                    end_token = token;\n\n\t                stack_token = stack.pop();\n\t                while(stack.length > 0 && stack_token.type != Twig.expression.type.subexpression.start) {\n\t                    output.push(stack_token);\n\t                    stack_token = stack.pop();\n\t                }\n\n\t                // Move contents of parens into preceding filter\n\t                var param_stack = [];\n\t                while(token.type !== Twig.expression.type.subexpression.start) {\n\t                    // Add token to arguments stack\n\t                    param_stack.unshift(token);\n\t                    token = output.pop();\n\t                }\n\n\t                param_stack.unshift(token);\n\n\t                var is_expression = false;\n\n\t                //If the token at the top of the *stack* is a function token, pop it onto the output queue.\n\t                // Get the token preceding the parameters\n\t                stack_token = stack[stack.length-1];\n\n\t                if (stack_token === undefined ||\n\t                    (stack_token.type !== Twig.expression.type._function &&\n\t                    stack_token.type !== Twig.expression.type.filter &&\n\t                    stack_token.type !== Twig.expression.type.test &&\n\t                    stack_token.type !== Twig.expression.type.key.brackets)) {\n\n\t                    end_token.expression = true;\n\n\t                    // remove start and end token from stack\n\t                    param_stack.pop();\n\t                    param_stack.shift();\n\n\t                    end_token.params = param_stack;\n\n\t                    output.push(end_token);\n\t                } else {\n\t                    // This should never be hit\n\t                    end_token.expression = false;\n\t                    stack_token.params = param_stack;\n\t                }\n\t            },\n\t            parse: function(token, stack, context) {\n\t                var new_array = [],\n\t                    array_ended = false,\n\t                    value = null;\n\n\t                if (token.expression) {\n\t                    return Twig.expression.parseAsync.apply(this, [token.params, context])\n\t                    .then(function(value) {\n\t                        stack.push(value);\n\t                    });\n\t                } else {\n\t                    throw new Twig.Error(\"Unexpected subexpression end when token is not marked as an expression\");\n\t                }\n\t            }\n\t        },\n\t        {\n\t            /**\n\t             * Match a parameter set start.\n\t             */\n\t            type: Twig.expression.type.parameter.start,\n\t            regex: /^\\(/,\n\t            next: Twig.expression.set.expressions.concat([Twig.expression.type.parameter.end]),\n\t            validate: function(match, tokens) {\n\t                var last_token = tokens[tokens.length - 1];\n\t                // We can't use the regex to test if we follow a space because expression is trimmed\n\t                return last_token && (Twig.indexOf(Twig.expression.reservedWords, last_token.value.trim()) < 0);\n\t            },\n\t            compile: Twig.expression.fn.compile.push_both,\n\t            parse: Twig.expression.fn.parse.push\n\t        },\n\t        {\n\t            /**\n\t             * Match a parameter set end.\n\t             */\n\t            type: Twig.expression.type.parameter.end,\n\t            regex: /^\\)/,\n\t            next: Twig.expression.set.operations_extended,\n\t            compile: function(token, stack, output) {\n\t                var stack_token,\n\t                    end_token = token;\n\n\t                stack_token = stack.pop();\n\t                while(stack.length > 0 && stack_token.type != Twig.expression.type.parameter.start) {\n\t                    output.push(stack_token);\n\t                    stack_token = stack.pop();\n\t                }\n\n\t                // Move contents of parens into preceding filter\n\t                var param_stack = [];\n\t                while(token.type !== Twig.expression.type.parameter.start) {\n\t                    // Add token to arguments stack\n\t                    param_stack.unshift(token);\n\t                    token = output.pop();\n\t                }\n\t                param_stack.unshift(token);\n\n\t                var is_expression = false;\n\n\t                // Get the token preceding the parameters\n\t                token = output[output.length-1];\n\n\t                if (token === undefined ||\n\t                    (token.type !== Twig.expression.type._function &&\n\t                    token.type !== Twig.expression.type.filter &&\n\t                    token.type !== Twig.expression.type.test &&\n\t                    token.type !== Twig.expression.type.key.brackets)) {\n\n\t                    end_token.expression = true;\n\n\t                    // remove start and end token from stack\n\t                    param_stack.pop();\n\t                    param_stack.shift();\n\n\t                    end_token.params = param_stack;\n\n\t                    output.push(end_token);\n\n\t                } else {\n\t                    end_token.expression = false;\n\t                    token.params = param_stack;\n\t                }\n\t            },\n\t            parse: function(token, stack, context) {\n\t                var new_array = [],\n\t                    array_ended = false,\n\t                    value = null;\n\n\t                if (token.expression) {\n\t                    return Twig.expression.parseAsync.apply(this, [token.params, context])\n\t                    .then(function(value) {\n\t                        stack.push(value);\n\t                    });\n\t                } else {\n\n\t                    while (stack.length > 0) {\n\t                        value = stack.pop();\n\t                        // Push values into the array until the start of the array\n\t                        if (value && value.type && value.type == Twig.expression.type.parameter.start) {\n\t                            array_ended = true;\n\t                            break;\n\t                        }\n\t                        new_array.unshift(value);\n\t                    }\n\n\t                    if (!array_ended) {\n\t                        throw new Twig.Error(\"Expected end of parameter set.\");\n\t                    }\n\n\t                    stack.push(new_array);\n\t                }\n\t            }\n\t        },\n\t        {\n\t            type: Twig.expression.type.slice,\n\t            regex: /^\\[(\\d*\\:\\d*)\\]/,\n\t            next: Twig.expression.set.operations_extended,\n\t            compile: function(token, stack, output) {\n\t                var sliceRange = token.match[1].split(':');\n\n\t                //sliceStart can be undefined when we pass parameters to the slice filter later\n\t                var sliceStart = (sliceRange[0]) ? parseInt(sliceRange[0]) : undefined;\n\t                var sliceEnd = (sliceRange[1]) ? parseInt(sliceRange[1]) : undefined;\n\n\t                token.value = 'slice';\n\t                token.params = [sliceStart, sliceEnd];\n\n\t                //sliceEnd can't be undefined as the slice filter doesn't check for this, but it does check the length\n\t                //of the params array, so just shorten it.\n\t                if (!sliceEnd) {\n\t                    token.params = [sliceStart];\n\t                }\n\n\t                output.push(token);\n\t            },\n\t            parse: function(token, stack, context) {\n\t                var input = stack.pop(),\n\t                    params = token.params;\n\n\t                stack.push(Twig.filter.apply(this, [token.value, input, params]));\n\t            }\n\t        },\n\t        {\n\t            /**\n\t             * Match an array start.\n\t             */\n\t            type: Twig.expression.type.array.start,\n\t            regex: /^\\[/,\n\t            next: Twig.expression.set.expressions.concat([Twig.expression.type.array.end]),\n\t            compile: Twig.expression.fn.compile.push_both,\n\t            parse: Twig.expression.fn.parse.push\n\t        },\n\t        {\n\t            /**\n\t             * Match an array end.\n\t             */\n\t            type: Twig.expression.type.array.end,\n\t            regex: /^\\]/,\n\t            next: Twig.expression.set.operations_extended,\n\t            compile: function(token, stack, output) {\n\t                var i = stack.length - 1,\n\t                    stack_token;\n\t                // pop tokens off the stack until the start of the object\n\t                for(;i >= 0; i--) {\n\t                    stack_token = stack.pop();\n\t                    if (stack_token.type === Twig.expression.type.array.start) {\n\t                        break;\n\t                    }\n\t                    output.push(stack_token);\n\t                }\n\t                output.push(token);\n\t            },\n\t            parse: function(token, stack, context) {\n\t                var new_array = [],\n\t                    array_ended = false,\n\t                    value = null;\n\n\t                while (stack.length > 0) {\n\t                    value = stack.pop();\n\t                    // Push values into the array until the start of the array\n\t                    if (value.type && value.type == Twig.expression.type.array.start) {\n\t                        array_ended = true;\n\t                        break;\n\t                    }\n\t                    new_array.unshift(value);\n\t                }\n\t                if (!array_ended) {\n\t                    throw new Twig.Error(\"Expected end of array.\");\n\t                }\n\n\t                stack.push(new_array);\n\t            }\n\t        },\n\t        // Token that represents the start of a hash map '}'\n\t        //\n\t        // Hash maps take the form:\n\t        //    { \"key\": 'value', \"another_key\": item }\n\t        //\n\t        // Keys must be quoted (either single or double) and values can be any expression.\n\t        {\n\t            type: Twig.expression.type.object.start,\n\t            regex: /^\\{/,\n\t            next: Twig.expression.set.expressions.concat([Twig.expression.type.object.end]),\n\t            compile: Twig.expression.fn.compile.push_both,\n\t            parse: Twig.expression.fn.parse.push\n\t        },\n\n\t        // Token that represents the end of a Hash Map '}'\n\t        //\n\t        // This is where the logic for building the internal\n\t        // representation of a hash map is defined.\n\t        {\n\t            type: Twig.expression.type.object.end,\n\t            regex: /^\\}/,\n\t            next: Twig.expression.set.operations_extended,\n\t            compile: function(token, stack, output) {\n\t                var i = stack.length-1,\n\t                    stack_token;\n\n\t                // pop tokens off the stack until the start of the object\n\t                for(;i >= 0; i--) {\n\t                    stack_token = stack.pop();\n\t                    if (stack_token && stack_token.type === Twig.expression.type.object.start) {\n\t                        break;\n\t                    }\n\t                    output.push(stack_token);\n\t                }\n\t                output.push(token);\n\t            },\n\t            parse: function(end_token, stack, context) {\n\t                var new_object = {},\n\t                    object_ended = false,\n\t                    token = null,\n\t                    token_key = null,\n\t                    has_value = false,\n\t                    value = null;\n\n\t                while (stack.length > 0) {\n\t                    token = stack.pop();\n\t                    // Push values into the array until the start of the object\n\t                    if (token && token.type && token.type === Twig.expression.type.object.start) {\n\t                        object_ended = true;\n\t                        break;\n\t                    }\n\t                    if (token && token.type && (token.type === Twig.expression.type.operator.binary || token.type === Twig.expression.type.operator.unary) && token.key) {\n\t                        if (!has_value) {\n\t                            throw new Twig.Error(\"Missing value for key '\" + token.key + \"' in object definition.\");\n\t                        }\n\t                        new_object[token.key] = value;\n\n\t                        // Preserve the order that elements are added to the map\n\t                        // This is necessary since JavaScript objects don't\n\t                        // guarantee the order of keys\n\t                        if (new_object._keys === undefined) new_object._keys = [];\n\t                        new_object._keys.unshift(token.key);\n\n\t                        // reset value check\n\t                        value = null;\n\t                        has_value = false;\n\n\t                    } else {\n\t                        has_value = true;\n\t                        value = token;\n\t                    }\n\t                }\n\t                if (!object_ended) {\n\t                    throw new Twig.Error(\"Unexpected end of object.\");\n\t                }\n\n\t                stack.push(new_object);\n\t            }\n\t        },\n\n\t        // Token representing a filter\n\t        //\n\t        // Filters can follow any expression and take the form:\n\t        //    expression|filter(optional, args)\n\t        //\n\t        // Filter parsing is done in the Twig.filters namespace.\n\t        {\n\t            type: Twig.expression.type.filter,\n\t            // match a | then a letter or _, then any number of letters, numbers, _ or -\n\t            regex: /^\\|\\s?([a-zA-Z_][a-zA-Z0-9_\\-]*)/,\n\t            next: Twig.expression.set.operations_extended.concat([\n\t                    Twig.expression.type.parameter.start]),\n\t            compile: function(token, stack, output) {\n\t                token.value = token.match[1];\n\t                output.push(token);\n\t            },\n\t            parse: function(token, stack, context) {\n\t                var that = this,\n\t                    input = stack.pop();\n\n\t                return parseParams(this, token.params, context)\n\t                .then(function(params) {\n\t                    return Twig.filter.apply(that, [token.value, input, params]);\n\t                })\n\t                .then(function(value) {\n\t                    stack.push(value);\n\t                });\n\t            }\n\t        },\n\t        {\n\t            type: Twig.expression.type._function,\n\t            // match any letter or _, then any number of letters, numbers, _ or - followed by (\n\t            regex: /^([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\(/,\n\t            next: Twig.expression.type.parameter.start,\n\t            validate: function(match, tokens) {\n\t                // Make sure this function is not a reserved word\n\t                return match[1] && (Twig.indexOf(Twig.expression.reservedWords, match[1]) < 0);\n\t            },\n\t            transform: function(match, tokens) {\n\t                return '(';\n\t            },\n\t            compile: function(token, stack, output) {\n\t                var fn = token.match[1];\n\t                token.fn = fn;\n\t                // cleanup token\n\t                delete token.match;\n\t                delete token.value;\n\n\t                output.push(token);\n\t            },\n\t            parse: function(token, stack, context) {\n\n\t                var that = this,\n\t                    fn = token.fn,\n\t                    value;\n\n\t                return parseParams(this, token.params, context)\n\t                .then(function(params) {\n\t                    if (Twig.functions[fn]) {\n\t                        // Get the function from the built-in functions\n\t                        value = Twig.functions[fn].apply(that, params);\n\n\t                    } else if (typeof context[fn] == 'function') {\n\t                        // Get the function from the user/context defined functions\n\t                        value = context[fn].apply(context, params);\n\n\t                    } else {\n\t                        throw new Twig.Error(fn + ' function does not exist and is not defined in the context');\n\t                    }\n\n\t                    return value;\n\t                })\n\t                .then(function(result) {\n\t                    stack.push(result);\n\t                });\n\t            }\n\t        },\n\n\t        // Token representing a variable.\n\t        //\n\t        // Variables can contain letters, numbers, underscores and\n\t        // dashes, but must start with a letter or underscore.\n\t        //\n\t        // Variables are retrieved from the render context and take\n\t        // the value of 'undefined' if the given variable doesn't\n\t        // exist in the context.\n\t        {\n\t            type: Twig.expression.type.variable,\n\t            // match any letter or _, then any number of letters, numbers, _ or -\n\t            regex: /^[a-zA-Z_][a-zA-Z0-9_]*/,\n\t            next: Twig.expression.set.operations_extended.concat([\n\t                    Twig.expression.type.parameter.start]),\n\t            compile: Twig.expression.fn.compile.push,\n\t            validate: function(match, tokens) {\n\t                return (Twig.indexOf(Twig.expression.reservedWords, match[0]) < 0);\n\t            },\n\t            parse: function(token, stack, context) {\n\t                // Get the variable from the context\n\t                return Twig.expression.resolveAsync.apply(this, [context[token.value], context])\n\t                .then(function(value) {\n\t                    stack.push(value);\n\t                });\n\t            }\n\t        },\n\t        {\n\t            type: Twig.expression.type.key.period,\n\t            regex: /^\\.([a-zA-Z0-9_]+)/,\n\t            next: Twig.expression.set.operations_extended.concat([\n\t                    Twig.expression.type.parameter.start]),\n\t            compile: function(token, stack, output) {\n\t                token.key = token.match[1];\n\t                delete token.match;\n\t                delete token.value;\n\n\t                output.push(token);\n\t            },\n\t            parse: function(token, stack, context, next_token) {\n\t                var that = this,\n\t                    key = token.key,\n\t                    object = stack.pop(),\n\t                    value;\n\n\t                return parseParams(this, token.params, context)\n\t                .then(function(params) {\n\t                    if (object === null || object === undefined) {\n\t                        if (that.options.strict_variables) {\n\t                            throw new Twig.Error(\"Can't access a key \" + key + \" on an null or undefined object.\");\n\t                        } else {\n\t                            value = undefined;\n\t                        }\n\t                    } else {\n\t                        var capitalize = function (value) {\n\t                            return value.substr(0, 1).toUpperCase() + value.substr(1);\n\t                        };\n\n\t                        // Get the variable from the context\n\t                        if (typeof object === 'object' && key in object) {\n\t                            value = object[key];\n\t                        } else if (object[\"get\" + capitalize(key)] !== undefined) {\n\t                            value = object[\"get\" + capitalize(key)];\n\t                        } else if (object[\"is\" + capitalize(key)] !== undefined) {\n\t                            value = object[\"is\" + capitalize(key)];\n\t                        } else {\n\t                            value = undefined;\n\t                        }\n\t                    }\n\n\t                    // When resolving an expression we need to pass next_token in case the expression is a function\n\t                    return Twig.expression.resolveAsync.apply(that, [value, context, params, next_token, object]);\n\t                })\n\t                .then(function(result) {\n\t                    stack.push(result);\n\t                });\n\t            }\n\t        },\n\t        {\n\t            type: Twig.expression.type.key.brackets,\n\t            regex: /^\\[([^\\]\\:]*)\\]/,\n\t            next: Twig.expression.set.operations_extended.concat([\n\t                    Twig.expression.type.parameter.start]),\n\t            compile: function(token, stack, output) {\n\t                var match = token.match[1];\n\t                delete token.value;\n\t                delete token.match;\n\n\t                // The expression stack for the key\n\t                token.stack = Twig.expression.compile({\n\t                    value: match\n\t                }).stack;\n\n\t                output.push(token);\n\t            },\n\t            parse: function(token, stack, context, next_token) {\n\t                // Evaluate key\n\t                var that = this,\n\t                    params = null,\n\t                    object,\n\t                    value;\n\n\t                return parseParams(this, token.params, context)\n\t                .then(function(parameters) {\n\t                    params = parameters;\n\t                    return Twig.expression.parseAsync.apply(that, [token.stack, context]);\n\t                })\n\t                .then(function(key) {\n\t                    object = stack.pop();\n\n\t                    if (object === null || object === undefined) {\n\t                        if (that.options.strict_variables) {\n\t                            throw new Twig.Error(\"Can't access a key \" + key + \" on an null or undefined object.\");\n\t                        } else {\n\t                            return null;\n\t                        }\n\t                    }\n\n\t                    // Get the variable from the context\n\t                    if (typeof object === 'object' && key in object) {\n\t                        value = object[key];\n\t                    } else {\n\t                        value = null;\n\t                    }\n\n\t                    // When resolving an expression we need to pass next_token in case the expression is a function\n\t                    return Twig.expression.resolveAsync.apply(that, [value, object, params, next_token]);\n\t                })\n\t                .then(function(result) {\n\t                    stack.push(result);\n\t                });\n\t            }\n\t        },\n\t        {\n\t            /**\n\t             * Match a null value.\n\t             */\n\t            type: Twig.expression.type._null,\n\t            // match a number\n\t            regex: /^(null|NULL|none|NONE)/,\n\t            next: Twig.expression.set.operations,\n\t            compile: function(token, stack, output) {\n\t                delete token.match;\n\t                token.value = null;\n\t                output.push(token);\n\t            },\n\t            parse: Twig.expression.fn.parse.push_value\n\t        },\n\t        {\n\t            /**\n\t             * Match the context\n\t             */\n\t            type: Twig.expression.type.context,\n\t            regex: /^_context/,\n\t            next: Twig.expression.set.operations_extended.concat([\n\t                    Twig.expression.type.parameter.start]),\n\t            compile: Twig.expression.fn.compile.push,\n\t            parse: function(token, stack, context) {\n\t                stack.push(context);\n\t            }\n\t        },\n\t        {\n\t            /**\n\t             * Match a boolean\n\t             */\n\t            type: Twig.expression.type.bool,\n\t            regex: /^(true|TRUE|false|FALSE)/,\n\t            next: Twig.expression.set.operations,\n\t            compile: function(token, stack, output) {\n\t                token.value = (token.match[0].toLowerCase( ) === \"true\");\n\t                delete token.match;\n\t                output.push(token);\n\t            },\n\t            parse: Twig.expression.fn.parse.push_value\n\t        }\n\t    ];\n\n\t    /**\n\t     * Resolve a context value.\n\t     *\n\t     * If the value is a function, it is executed with a context parameter.\n\t     *\n\t     * @param {string} key The context object key.\n\t     * @param {Object} context The render context.\n\t     */\n\t    Twig.expression.resolveAsync = function(value, context, params, next_token, object) {\n\t        if (typeof value == 'function') {\n\t            var promise = Twig.Promise.resolve(params);\n\n\t            /*\n\t            If value is a function, it will have been impossible during the compile stage to determine that a following\n\t            set of parentheses were parameters for this function.\n\n\t            Those parentheses will have therefore been marked as an expression, with their own parameters, which really\n\t            belong to this function.\n\n\t            Those parameters will also need parsing in case they are actually an expression to pass as parameters.\n\t             */\n\t            if (next_token && next_token.type === Twig.expression.type.parameter.end) {\n\t                //When parsing these parameters, we need to get them all back, not just the last item on the stack.\n\t                var tokens_are_parameters = true;\n\n\t                promise = promise.then(function() {\n\t                    return next_token.params && Twig.expression.parseAsync.apply(this, [next_token.params, context, tokens_are_parameters]);\n\t                })\n\t                .then(function(p) {\n\t                    //Clean up the parentheses tokens on the next loop\n\t                    next_token.cleanup = true;\n\n\t                    return p;\n\t                });\n\t            }\n\n\t            return promise.then(function(params) {\n\t                return value.apply(object || context, params || []);\n\t            });\n\t        } else {\n\t            return Twig.Promise.resolve(value);\n\t        }\n\t    };\n\n\t    Twig.expression.resolve = function(value, context, params, next_token, object) {\n\t        var is_async = true,\n\t            result;\n\n\t        Twig.expression.resolveAsync.apply(this, [value, context, params, next_token, object])\n\t        .then(function(r) {\n\t            is_async = false;\n\t            result = r;\n\t        });\n\n\t        if (is_async)\n\t            throw new Twig.Error('You are using Twig.js in sync mode in combination with async extensions.');\n\n\t        return result;\n\t    }\n\n\t    /**\n\t     * Registry for logic handlers.\n\t     */\n\t    Twig.expression.handler = {};\n\n\t    /**\n\t     * Define a new expression type, available at Twig.logic.type.{type}\n\t     *\n\t     * @param {string} type The name of the new type.\n\t     */\n\t    Twig.expression.extendType = function (type) {\n\t        Twig.expression.type[type] = \"Twig.expression.type.\" + type;\n\t    };\n\n\t    /**\n\t     * Extend the expression parsing functionality with a new definition.\n\t     *\n\t     * Token definitions follow this format:\n\t     *  {\n\t     *      type:     One of Twig.expression.type.[type], either pre-defined or added using\n\t     *                    Twig.expression.extendType\n\t     *\n\t     *      next:     Array of types from Twig.expression.type that can follow this token,\n\t     *\n\t     *      regex:    A regex or array of regex's that should match the token.\n\t     *\n\t     *      compile: function(token, stack, output) called when this token is being compiled.\n\t     *                   Should return an object with stack and output set.\n\t     *\n\t     *      parse:   function(token, stack, context) called when this token is being parsed.\n\t     *                   Should return an object with stack and context set.\n\t     *  }\n\t     *\n\t     * @param {Object} definition A token definition.\n\t     */\n\t    Twig.expression.extend = function (definition) {\n\t        if (!definition.type) {\n\t            throw new Twig.Error(\"Unable to extend logic definition. No type provided for \" + definition);\n\t        }\n\t        Twig.expression.handler[definition.type] = definition;\n\t    };\n\n\t    // Extend with built-in expressions\n\t    while (Twig.expression.definitions.length > 0) {\n\t        Twig.expression.extend(Twig.expression.definitions.shift());\n\t    }\n\n\t    /**\n\t     * Break an expression into tokens defined in Twig.expression.definitions.\n\t     *\n\t     * @param {string} expression The string to tokenize.\n\t     *\n\t     * @return {Array} An array of tokens.\n\t     */\n\t    Twig.expression.tokenize = function (expression) {\n\t        var tokens = [],\n\t            // Keep an offset of the location in the expression for error messages.\n\t            exp_offset = 0,\n\t            // The valid next tokens of the previous token\n\t            next = null,\n\t            // Match information\n\t            type, regex, regex_array,\n\t            // The possible next token for the match\n\t            token_next,\n\t            // Has a match been found from the definitions\n\t            match_found, invalid_matches = [], match_function;\n\n\t        match_function = function () {\n\t            var match = Array.prototype.slice.apply(arguments),\n\t                string = match.pop(),\n\t                offset = match.pop();\n\n\t            Twig.log.trace(\"Twig.expression.tokenize\",\n\t                           \"Matched a \", type, \" regular expression of \", match);\n\n\t            if (next && Twig.indexOf(next, type) < 0) {\n\t                invalid_matches.push(\n\t                    type + \" cannot follow a \" + tokens[tokens.length - 1].type +\n\t                           \" at template:\" + exp_offset + \" near '\" + match[0].substring(0, 20) +\n\t                           \"...'\"\n\t                );\n\t                // Not a match, don't change the expression\n\t                return match[0];\n\t            }\n\n\t            // Validate the token if a validation function is provided\n\t            if (Twig.expression.handler[type].validate &&\n\t                    !Twig.expression.handler[type].validate(match, tokens)) {\n\t                return match[0];\n\t            }\n\n\t            invalid_matches = [];\n\n\t            tokens.push({\n\t                type:  type,\n\t                value: match[0],\n\t                match: match\n\t            });\n\n\t            match_found = true;\n\t            next = token_next;\n\t            exp_offset += match[0].length;\n\n\t            // Does the token need to return output back to the expression string\n\t            // e.g. a function match of cycle( might return the '(' back to the expression\n\t            // This allows look-ahead to differentiate between token types (e.g. functions and variable names)\n\t            if (Twig.expression.handler[type].transform) {\n\t                return Twig.expression.handler[type].transform(match, tokens);\n\t            }\n\t            return '';\n\t        };\n\n\t        Twig.log.debug(\"Twig.expression.tokenize\", \"Tokenizing expression \", expression);\n\n\t        while (expression.length > 0) {\n\t            expression = expression.trim();\n\t            for (type in Twig.expression.handler) {\n\t                if (Twig.expression.handler.hasOwnProperty(type)) {\n\t                    token_next = Twig.expression.handler[type].next;\n\t                    regex = Twig.expression.handler[type].regex;\n\t                    Twig.log.trace(\"Checking type \", type, \" on \", expression);\n\t                    if (regex instanceof Array) {\n\t                        regex_array = regex;\n\t                    } else {\n\t                        regex_array = [regex];\n\t                    }\n\n\t                    match_found = false;\n\t                    while (regex_array.length > 0) {\n\t                        regex = regex_array.pop();\n\t                        expression = expression.replace(regex, match_function);\n\t                    }\n\t                    // An expression token has been matched. Break the for loop and start trying to\n\t                    //  match the next template (if expression isn't empty.)\n\t                    if (match_found) {\n\t                        break;\n\t                    }\n\t                }\n\t            }\n\t            if (!match_found) {\n\t                if (invalid_matches.length > 0) {\n\t                    throw new Twig.Error(invalid_matches.join(\" OR \"));\n\t                } else {\n\t                    throw new Twig.Error(\"Unable to parse '\" + expression + \"' at template position\" + exp_offset);\n\t                }\n\t            }\n\t        }\n\n\t        Twig.log.trace(\"Twig.expression.tokenize\", \"Tokenized to \", tokens);\n\t        return tokens;\n\t    };\n\n\t    /**\n\t     * Compile an expression token.\n\t     *\n\t     * @param {Object} raw_token The uncompiled token.\n\t     *\n\t     * @return {Object} The compiled token.\n\t     */\n\t    Twig.expression.compile = function (raw_token) {\n\t        var expression = raw_token.value,\n\t            // Tokenize expression\n\t            tokens = Twig.expression.tokenize(expression),\n\t            token = null,\n\t            output = [],\n\t            stack = [],\n\t            token_template = null;\n\n\t        Twig.log.trace(\"Twig.expression.compile: \", \"Compiling \", expression);\n\n\t        // Push tokens into RPN stack using the Shunting-yard algorithm\n\t        // See http://en.wikipedia.org/wiki/Shunting_yard_algorithm\n\n\t        while (tokens.length > 0) {\n\t            token = tokens.shift();\n\t            token_template = Twig.expression.handler[token.type];\n\n\t            Twig.log.trace(\"Twig.expression.compile: \", \"Compiling \", token);\n\n\t            // Compile the template\n\t            token_template.compile && token_template.compile(token, stack, output);\n\n\t            Twig.log.trace(\"Twig.expression.compile: \", \"Stack is\", stack);\n\t            Twig.log.trace(\"Twig.expression.compile: \", \"Output is\", output);\n\t        }\n\n\t        while(stack.length > 0) {\n\t            output.push(stack.pop());\n\t        }\n\n\t        Twig.log.trace(\"Twig.expression.compile: \", \"Final output is\", output);\n\n\t        raw_token.stack = output;\n\t        delete raw_token.value;\n\n\t        return raw_token;\n\t    };\n\n\n\t    /**\n\t     * Parse an RPN expression stack within a context.\n\t     *\n\t     * @param {Array} tokens An array of compiled expression tokens.\n\t     * @param {Object} context The render context to parse the tokens with.\n\t     *\n\t     * @return {Object} The result of parsing all the tokens. The result\n\t     *                  can be anything, String, Array, Object, etc... based on\n\t     *                  the given expression.\n\t     */\n\t    Twig.expression.parse = function (tokens, context, tokens_are_parameters, allow_async) {\n\t        var that = this;\n\n\t        // If the token isn't an array, make it one.\n\t        if (!(tokens instanceof Array)) {\n\t            tokens = [tokens];\n\t        }\n\n\t        // The output stack\n\t        var stack = [],\n\t            next_token,\n\t            output = null,\n\t            promise = null,\n\t            is_async = true,\n\t            token_template = null,\n\t            loop_token_fixups = [];\n\n\t        promise = Twig.async.forEach(tokens, function (token, index) {\n\t            //If the token is marked for cleanup, we don't need to parse it\n\t            if (token.cleanup) {\n\t                return;\n\t            }\n\n\t            var result = null;\n\n\t            //Determine the token that follows this one so that we can pass it to the parser\n\t            if (tokens.length > index + 1) {\n\t                next_token = tokens[index + 1];\n\t            }\n\n\t            token_template = Twig.expression.handler[token.type];\n\n\t            if (token_template.parse)\n\t                result = token_template.parse.apply(that, [token, stack, context, next_token]);\n\n\t            //Store any binary tokens for later if we are in a loop.\n\t            if (context.loop && token.type === Twig.expression.type.operator.binary) {\n\t                loop_token_fixups.push(token);\n\t            }\n\n\t            return result;\n\t        })\n\t        .then(function() {\n\t            //Check every fixup and remove \"key\" as long as they still have \"params\". This covers the use case where\n\t            //a \":\" operator is used in a loop with a \"(expression):\" statement. We need to be able to evaluate the expression\n\t            Twig.forEach(loop_token_fixups, function (loop_token_fixup) {\n\t                if (loop_token_fixup.params && loop_token_fixup.key) {\n\t                    delete loop_token_fixup[\"key\"];\n\t                }\n\t            });\n\n\t            //If parse has been called with a set of tokens that are parameters, we need to return the whole stack,\n\t            //wrapped in an Array.\n\t            if (tokens_are_parameters) {\n\t                var params = [];\n\t                while (stack.length > 0) {\n\t                    params.unshift(stack.pop());\n\t                }\n\n\t                stack.push(params);\n\t            }\n\n\t            if (allow_async)\n\t                return Twig.Promise.resolve(stack.pop());\n\t        })\n\t        .then(function(v) {\n\t            is_async = false;\n\t            return v;\n\t        });\n\n\t        if (allow_async)\n\t            return promise;\n\n\t        if (is_async)\n\t            throw new Twig.Error('You are using Twig.js in sync mode in combination with async extensions.');\n\n\t        // Pop the final value off the stack\n\t        return stack.pop();\n\t    };\n\n\t    return Twig;\n\n\t};\n\n\n/***/ },\n/* 4 */\n/***/ function(module, exports) {\n\n\t// ## twig.expression.operator.js\n\t//\n\t// This file handles operator lookups and parsing.\n\tmodule.exports = function (Twig) {\n\t    \"use strict\";\n\n\t    /**\n\t     * Operator associativity constants.\n\t     */\n\t    Twig.expression.operator = {\n\t        leftToRight: 'leftToRight',\n\t        rightToLeft: 'rightToLeft'\n\t    };\n\n\t    var containment = function(a, b) {\n\t        if (b === undefined || b === null) {\n\t            return null;\n\t        } else if (b.indexOf !== undefined) {\n\t            // String\n\t            return a === b || a !== '' && b.indexOf(a) > -1;\n\t        } else {\n\t            var el;\n\t            for (el in b) {\n\t                if (b.hasOwnProperty(el) && b[el] === a) {\n\t                    return true;\n\t                }\n\t            }\n\t            return false;\n\t        }\n\t    };\n\n\t    /**\n\t     * Get the precidence and associativity of an operator. These follow the order that C/C++ use.\n\t     * See http://en.wikipedia.org/wiki/Operators_in_C_and_C++ for the table of values.\n\t     */\n\t    Twig.expression.operator.lookup = function (operator, token) {\n\t        switch (operator) {\n\t            case \"..\":\n\t                token.precidence = 20;\n\t                token.associativity = Twig.expression.operator.leftToRight;\n\t                break;\n\n\t            case ',':\n\t                token.precidence = 18;\n\t                token.associativity = Twig.expression.operator.leftToRight;\n\t                break;\n\n\t            // Ternary\n\t            case '?:':\n\t            case '?':\n\t            case ':':\n\t                token.precidence = 16;\n\t                token.associativity = Twig.expression.operator.rightToLeft;\n\t                break;\n\n\t            case 'or':\n\t                token.precidence = 14;\n\t                token.associativity = Twig.expression.operator.leftToRight;\n\t                break;\n\n\t            case 'and':\n\t                token.precidence = 13;\n\t                token.associativity = Twig.expression.operator.leftToRight;\n\t                break;\n\n\t            case 'b-or':\n\t                token.precidence = 12;\n\t                token.associativity = Twig.expression.operator.leftToRight;\n\t                break;\n\n\t            case 'b-xor':\n\t                token.precidence = 11;\n\t                token.associativity = Twig.expression.operator.leftToRight;\n\t                break;\n\n\t            case 'b-and':\n\t                token.precidence = 10;\n\t                token.associativity = Twig.expression.operator.leftToRight;\n\t                break;\n\n\t            case '==':\n\t            case '!=':\n\t                token.precidence = 9;\n\t                token.associativity = Twig.expression.operator.leftToRight;\n\t                break;\n\n\t            case '<':\n\t            case '<=':\n\t            case '>':\n\t            case '>=':\n\t            case 'not in':\n\t            case 'in':\n\t                token.precidence = 8;\n\t                token.associativity = Twig.expression.operator.leftToRight;\n\t                break;\n\n\t            case '~': // String concatination\n\t            case '+':\n\t            case '-':\n\t                token.precidence = 6;\n\t                token.associativity = Twig.expression.operator.leftToRight;\n\t                break;\n\n\t            case '//':\n\t            case '**':\n\t            case '*':\n\t            case '/':\n\t            case '%':\n\t                token.precidence = 5;\n\t                token.associativity = Twig.expression.operator.leftToRight;\n\t                break;\n\n\t            case 'not':\n\t                token.precidence = 3;\n\t                token.associativity = Twig.expression.operator.rightToLeft;\n\t                break;\n\n\t            default:\n\t                throw new Twig.Error(\"Failed to lookup operator: \" + operator + \" is an unknown operator.\");\n\t        }\n\t        token.operator = operator;\n\t        return token;\n\t    };\n\n\t    /**\n\t     * Handle operations on the RPN stack.\n\t     *\n\t     * Returns the updated stack.\n\t     */\n\t    Twig.expression.operator.parse = function (operator, stack) {\n\t        Twig.log.trace(\"Twig.expression.operator.parse: \", \"Handling \", operator);\n\t        var a, b, c;\n\n\t        if (operator === '?') {\n\t            c = stack.pop();\n\t        }\n\n\t        b = stack.pop();\n\t        if (operator !== 'not') {\n\t            a = stack.pop();\n\t        }\n\n\t        if (operator !== 'in' && operator !== 'not in') {\n\t            if (a && Array.isArray(a)) {\n\t                a = a.length;\n\t            }\n\n\t            if (b && Array.isArray(b)) {\n\t                b = b.length;\n\t            }\n\t        }\n\n\t        switch (operator) {\n\t            case ':':\n\t                // Ignore\n\t                break;\n\n\t            case '?:':\n\t                if (Twig.lib.boolval(a)) {\n\t                    stack.push(a);\n\t                } else {\n\t                    stack.push(b);\n\t                }\n\t                break;\n\t            case '?':\n\t                if (a === undefined) {\n\t                    //An extended ternary.\n\t                    a = b;\n\t                    b = c;\n\t                    c = undefined;\n\t                }\n\n\t                if (Twig.lib.boolval(a)) {\n\t                    stack.push(b);\n\t                } else {\n\t                    stack.push(c);\n\t                }\n\t                break;\n\n\t            case '+':\n\t                b = parseFloat(b);\n\t                a = parseFloat(a);\n\t                stack.push(a + b);\n\t                break;\n\n\t            case '-':\n\t                b = parseFloat(b);\n\t                a = parseFloat(a);\n\t                stack.push(a - b);\n\t                break;\n\n\t            case '*':\n\t                b = parseFloat(b);\n\t                a = parseFloat(a);\n\t                stack.push(a * b);\n\t                break;\n\n\t            case '/':\n\t                b = parseFloat(b);\n\t                a = parseFloat(a);\n\t                stack.push(a / b);\n\t                break;\n\n\t            case '//':\n\t                b = parseFloat(b);\n\t                a = parseFloat(a);\n\t                stack.push(Math.floor(a / b));\n\t                break;\n\n\t            case '%':\n\t                b = parseFloat(b);\n\t                a = parseFloat(a);\n\t                stack.push(a % b);\n\t                break;\n\n\t            case '~':\n\t                stack.push( (a != null ? a.toString() : \"\")\n\t                          + (b != null ? b.toString() : \"\") );\n\t                break;\n\n\t            case 'not':\n\t            case '!':\n\t                stack.push(!Twig.lib.boolval(b));\n\t                break;\n\n\t            case '<':\n\t                stack.push(a < b);\n\t                break;\n\n\t            case '<=':\n\t                stack.push(a <= b);\n\t                break;\n\n\t            case '>':\n\t                stack.push(a > b);\n\t                break;\n\n\t            case '>=':\n\t                stack.push(a >= b);\n\t                break;\n\n\t            case '===':\n\t                stack.push(a === b);\n\t                break;\n\n\t            case '==':\n\t                stack.push(a == b);\n\t                break;\n\n\t            case '!==':\n\t                stack.push(a !== b);\n\t                break;\n\n\t            case '!=':\n\t                stack.push(a != b);\n\t                break;\n\n\t            case 'or':\n\t                stack.push(a || b);\n\t                break;\n\n\t            case 'b-or':\n\t                stack.push(a | b);\n\t                break;\n\n\t            case 'b-xor':\n\t                stack.push(a ^ b);\n\t                break;\n\n\t            case 'and':\n\t                stack.push(a && b);\n\t                break;\n\n\t            case 'b-and':\n\t                stack.push(a & b);\n\t                break;\n\n\t            case '**':\n\t                stack.push(Math.pow(a, b));\n\t                break;\n\n\t            case 'not in':\n\t                stack.push( !containment(a, b) );\n\t                break;\n\n\t            case 'in':\n\t                stack.push( containment(a, b) );\n\t                break;\n\n\t            case '..':\n\t                stack.push( Twig.functions.range(a, b) );\n\t                break;\n\n\t            default:\n\t                debugger;\n\t                throw new Twig.Error(\"Failed to parse operator: \" + operator + \" is an unknown operator.\");\n\t        }\n\t    };\n\n\t    return Twig;\n\n\t};\n\n\n/***/ },\n/* 5 */\n/***/ function(module, exports) {\n\n\t// ## twig.filters.js\n\t//\n\t// This file handles parsing filters.\n\tmodule.exports = function (Twig) {\n\n\t    // Determine object type\n\t    function is(type, obj) {\n\t        var clas = Object.prototype.toString.call(obj).slice(8, -1);\n\t        return obj !== undefined && obj !== null && clas === type;\n\t    }\n\n\t    Twig.filters = {\n\t        // String Filters\n\t        upper:  function(value) {\n\t            if ( typeof value !== \"string\" ) {\n\t               return value;\n\t            }\n\n\t            return value.toUpperCase();\n\t        },\n\t        lower: function(value) {\n\t            if ( typeof value !== \"string\" ) {\n\t               return value;\n\t            }\n\n\t            return value.toLowerCase();\n\t        },\n\t        capitalize: function(value) {\n\t            if ( typeof value !== \"string\" ) {\n\t                 return value;\n\t            }\n\n\t            return value.substr(0, 1).toUpperCase() + value.toLowerCase().substr(1);\n\t        },\n\t        title: function(value) {\n\t            if ( typeof value !== \"string\" ) {\n\t               return value;\n\t            }\n\n\t            return value.toLowerCase().replace( /(^|\\s)([a-z])/g , function(m, p1, p2){\n\t                return p1 + p2.toUpperCase();\n\t            });\n\t        },\n\t        length: function(value) {\n\t            if (Twig.lib.is(\"Array\", value) || typeof value === \"string\") {\n\t                return value.length;\n\t            } else if (Twig.lib.is(\"Object\", value)) {\n\t                if (value._keys === undefined) {\n\t                    return Object.keys(value).length;\n\t                } else {\n\t                    return value._keys.length;\n\t                }\n\t            } else {\n\t                return 0;\n\t            }\n\t        },\n\n\t        // Array/Object Filters\n\t        reverse: function(value) {\n\t            if (is(\"Array\", value)) {\n\t                return value.reverse();\n\t            } else if (is(\"String\", value)) {\n\t                return value.split(\"\").reverse().join(\"\");\n\t            } else if (is(\"Object\", value)) {\n\t                var keys = value._keys || Object.keys(value).reverse();\n\t                value._keys = keys;\n\t                return value;\n\t            }\n\t        },\n\t        sort: function(value) {\n\t            if (is(\"Array\", value)) {\n\t                return value.sort();\n\t            } else if (is('Object', value)) {\n\t                // Sorting objects isn't obvious since the order of\n\t                // returned keys isn't guaranteed in JavaScript.\n\t                // Because of this we use a \"hidden\" key called _keys to\n\t                // store the keys in the order we want to return them.\n\n\t                delete value._keys;\n\t                var keys = Object.keys(value),\n\t                    sorted_keys = keys.sort(function(a, b) {\n\t                        var a1, a2;\n\n\t                        // if a and b are comparable, we're fine :-)\n\t                        if((value[a] > value[b]) == !(value[a] <= value[b])) {\n\t                            return value[a] > value[b] ? 1 :\n\t\t\t\t           value[a] < value[b] ? -1 :\n\t\t\t\t\t   0;\n\t                        }\n\t                        // if a and b can be parsed as numbers, we can compare\n\t                        // their numeric value\n\t                        else if(!isNaN(a1 = parseFloat(value[a])) &&\n\t                                !isNaN(b1 = parseFloat(value[b]))) {\n\t                            return a1 > b1 ? 1 :\n\t\t\t\t           a1 < b1 ? -1 :\n\t\t\t\t\t   0;\n\t                        }\n\t                        // if one of the values is a string, we convert the\n\t                        // other value to string as well\n\t                        else if(typeof value[a] == 'string') {\n\t                            return value[a] > value[b].toString() ? 1 :\n\t                                   value[a] < value[b].toString() ? -1 :\n\t\t\t\t\t   0;\n\t                        }\n\t                        else if(typeof value[b] == 'string') {\n\t                            return value[a].toString() > value[b] ? 1 :\n\t                                   value[a].toString() < value[b] ? -1 :\n\t\t\t\t\t   0;\n\t                        }\n\t                        // everything failed - return 'null' as sign, that\n\t                        // the values are not comparable\n\t                        else {\n\t                            return null;\n\t                        }\n\t                    });\n\t                value._keys = sorted_keys;\n\t                return value;\n\t            }\n\t        },\n\t        keys: function(value) {\n\t            if (value === undefined || value === null){\n\t                return;\n\t           }\n\n\t            var keyset = value._keys || Object.keys(value),\n\t                output = [];\n\n\t            Twig.forEach(keyset, function(key) {\n\t                if (key === \"_keys\") return; // Ignore the _keys property\n\t                if (value.hasOwnProperty(key)) {\n\t                    output.push(key);\n\t                }\n\t            });\n\t            return output;\n\t        },\n\t        url_encode: function(value) {\n\t            if (value === undefined || value === null){\n\t                return;\n\t            }\n\n\t            var result = encodeURIComponent(value);\n\t            result = result.replace(\"'\", \"%27\");\n\t            return result;\n\t        },\n\t        join: function(value, params) {\n\t            if (value === undefined || value === null){\n\t                return;\n\t            }\n\n\t            var join_str = \"\",\n\t                output = [],\n\t                keyset = null;\n\n\t            if (params && params[0]) {\n\t                join_str = params[0];\n\t            }\n\t            if (is(\"Array\", value)) {\n\t                output = value;\n\t            } else {\n\t                keyset = value._keys || Object.keys(value);\n\t                Twig.forEach(keyset, function(key) {\n\t                    if (key === \"_keys\") return; // Ignore the _keys property\n\t                    if (value.hasOwnProperty(key)) {\n\t                        output.push(value[key]);\n\t                    }\n\t                });\n\t            }\n\t            return output.join(join_str);\n\t        },\n\t        \"default\": function(value, params) {\n\t            if (params !== undefined && params.length > 1) {\n\t                throw new Twig.Error(\"default filter expects one argument\");\n\t            }\n\t            if (value === undefined || value === null || value === '' ) {\n\t                if (params === undefined) {\n\t                    return '';\n\t                }\n\n\t                return params[0];\n\t            } else {\n\t                return value;\n\t            }\n\t        },\n\t        json_encode: function(value) {\n\t            if(value === undefined || value === null) {\n\t                return \"null\";\n\t            }\n\t            else if ((typeof value == 'object') && (is(\"Array\", value))) {\n\t                output = [];\n\n\t                Twig.forEach(value, function(v) {\n\t                    output.push(Twig.filters.json_encode(v));\n\t                });\n\n\t                return \"[\" + output.join(\",\") + \"]\";\n\t            }\n\t            else if (typeof value == 'object') {\n\t                var keyset = value._keys || Object.keys(value),\n\t                output = [];\n\n\t                Twig.forEach(keyset, function(key) {\n\t                    output.push(JSON.stringify(key) + \":\" + Twig.filters.json_encode(value[key]));\n\t                });\n\n\t                return \"{\" + output.join(\",\") + \"}\";\n\t            }\n\t            else {\n\t                return JSON.stringify(value);\n\t            }\n\t        },\n\t        merge: function(value, params) {\n\t            var obj = [],\n\t                arr_index = 0,\n\t                keyset = [];\n\n\t            // Check to see if all the objects being merged are arrays\n\t            if (!is(\"Array\", value)) {\n\t                // Create obj as an Object\n\t                obj = { };\n\t            } else {\n\t                Twig.forEach(params, function(param) {\n\t                    if (!is(\"Array\", param)) {\n\t                        obj = { };\n\t                    }\n\t                });\n\t            }\n\t            if (!is(\"Array\", obj)) {\n\t                obj._keys = [];\n\t            }\n\n\t            if (is(\"Array\", value)) {\n\t                Twig.forEach(value, function(val) {\n\t                    if (obj._keys) obj._keys.push(arr_index);\n\t                    obj[arr_index] = val;\n\t                    arr_index++;\n\t                });\n\t            } else {\n\t                keyset = value._keys || Object.keys(value);\n\t                Twig.forEach(keyset, function(key) {\n\t                    obj[key] = value[key];\n\t                    obj._keys.push(key);\n\n\t                    // Handle edge case where a number index in an object is greater than\n\t                    //   the array counter. In such a case, the array counter is increased\n\t                    //   one past the index.\n\t                    //\n\t                    // Example {{ [\"a\", \"b\"]|merge({\"4\":\"value\"}, [\"c\", \"d\"])\n\t                    // Without this, d would have an index of \"4\" and overwrite the value\n\t                    //   of \"value\"\n\t                    var int_key = parseInt(key, 10);\n\t                    if (!isNaN(int_key) && int_key >= arr_index) {\n\t                        arr_index = int_key + 1;\n\t                    }\n\t                });\n\t            }\n\n\t            // mixin the merge arrays\n\t            Twig.forEach(params, function(param) {\n\t                if (is(\"Array\", param)) {\n\t                    Twig.forEach(param, function(val) {\n\t                        if (obj._keys) obj._keys.push(arr_index);\n\t                        obj[arr_index] = val;\n\t                        arr_index++;\n\t                    });\n\t                } else {\n\t                    keyset = param._keys || Object.keys(param);\n\t                    Twig.forEach(keyset, function(key) {\n\t                        if (!obj[key]) obj._keys.push(key);\n\t                        obj[key] = param[key];\n\n\t                        var int_key = parseInt(key, 10);\n\t                        if (!isNaN(int_key) && int_key >= arr_index) {\n\t                            arr_index = int_key + 1;\n\t                        }\n\t                    });\n\t                }\n\t            });\n\t            if (params.length === 0) {\n\t                throw new Twig.Error(\"Filter merge expects at least one parameter\");\n\t            }\n\n\t            return obj;\n\t        },\n\t        date: function(value, params) {\n\t            var date = Twig.functions.date(value);\n\t            var format = params && params.length ? params[0] : 'F j, Y H:i';\n\t            return Twig.lib.date(format, date);\n\t        },\n\n\t        date_modify: function(value, params) {\n\t            if (value === undefined || value === null) {\n\t                return;\n\t            }\n\t            if (params === undefined || params.length !== 1) {\n\t                throw new Twig.Error(\"date_modify filter expects 1 argument\");\n\t            }\n\n\t            var modifyText = params[0], time;\n\n\t            if (Twig.lib.is(\"Date\", value)) {\n\t                time = Twig.lib.strtotime(modifyText, value.getTime() / 1000);\n\t            }\n\t            if (Twig.lib.is(\"String\", value)) {\n\t                time = Twig.lib.strtotime(modifyText, Twig.lib.strtotime(value));\n\t            }\n\t            if (Twig.lib.is(\"Number\", value)) {\n\t                time = Twig.lib.strtotime(modifyText, value);\n\t            }\n\n\t            return new Date(time * 1000);\n\t        },\n\n\t        replace: function(value, params) {\n\t            if (value === undefined||value === null){\n\t                return;\n\t            }\n\n\t            var pairs = params[0],\n\t                tag;\n\t            for (tag in pairs) {\n\t                if (pairs.hasOwnProperty(tag) && tag !== \"_keys\") {\n\t                    value = Twig.lib.replaceAll(value, tag, pairs[tag]);\n\t                }\n\t            }\n\t            return value;\n\t        },\n\n\t        format: function(value, params) {\n\t            if (value === undefined || value === null){\n\t                return;\n\t            }\n\n\t            return Twig.lib.vsprintf(value, params);\n\t        },\n\n\t        striptags: function(value) {\n\t            if (value === undefined || value === null){\n\t                return;\n\t            }\n\n\t            return Twig.lib.strip_tags(value);\n\t        },\n\n\t        escape: function(value, params) {\n\t            if (value === undefined|| value === null){\n\t                return;\n\t            }\n\n\t            var strategy = \"html\";\n\t            if(params && params.length && params[0] !== true)\n\t                strategy = params[0];\n\n\t            if(strategy == \"html\") {\n\t                var raw_value = value.toString().replace(/&/g, \"&amp;\")\n\t                            .replace(/</g, \"&lt;\")\n\t                            .replace(/>/g, \"&gt;\")\n\t                            .replace(/\"/g, \"&quot;\")\n\t                            .replace(/'/g, \"&#039;\");\n\t                return Twig.Markup(raw_value, 'html');\n\t            } else if(strategy == \"js\") {\n\t                var raw_value = value.toString();\n\t                var result = \"\";\n\n\t                for(var i = 0; i < raw_value.length; i++) {\n\t                    if(raw_value[i].match(/^[a-zA-Z0-9,\\._]$/))\n\t                        result += raw_value[i];\n\t                    else {\n\t                        var char_code = raw_value.charCodeAt(i);\n\n\t                        if(char_code < 0x80)\n\t                            result += \"\\\\x\" + char_code.toString(16).toUpperCase();\n\t                        else\n\t                            result += Twig.lib.sprintf(\"\\\\u%04s\", char_code.toString(16).toUpperCase());\n\t                    }\n\t                }\n\n\t                return Twig.Markup(result, 'js');\n\t            } else if(strategy == \"css\") {\n\t                var raw_value = value.toString();\n\t                var result = \"\";\n\n\t                for(var i = 0; i < raw_value.length; i++) {\n\t                    if(raw_value[i].match(/^[a-zA-Z0-9]$/))\n\t                        result += raw_value[i];\n\t                    else {\n\t                        var char_code = raw_value.charCodeAt(i);\n\t                        result += \"\\\\\" + char_code.toString(16).toUpperCase() + \" \";\n\t                    }\n\t                }\n\n\t                return Twig.Markup(result, 'css');\n\t            } else if(strategy == \"url\") {\n\t                var result = Twig.filters.url_encode(value);\n\t                return Twig.Markup(result, 'url');\n\t            } else if(strategy == \"html_attr\") {\n\t                var raw_value = value.toString();\n\t                var result = \"\";\n\n\t                for(var i = 0; i < raw_value.length; i++) {\n\t                    if(raw_value[i].match(/^[a-zA-Z0-9,\\.\\-_]$/))\n\t                        result += raw_value[i];\n\t                    else if(raw_value[i].match(/^[&<>\"]$/))\n\t                        result += raw_value[i].replace(/&/g, \"&amp;\")\n\t                                .replace(/</g, \"&lt;\")\n\t                                .replace(/>/g, \"&gt;\")\n\t                                .replace(/\"/g, \"&quot;\");\n\t                    else {\n\t                        var char_code = raw_value.charCodeAt(i);\n\n\t                        // The following replaces characters undefined in HTML with\n\t                        // the hex entity for the Unicode replacement character.\n\t                        if(char_code <= 0x1f && char_code != 0x09 && char_code != 0x0a && char_code != 0x0d)\n\t                            result += \"&#xFFFD;\";\n\t                        else if(char_code < 0x80)\n\t                            result += Twig.lib.sprintf(\"&#x%02s;\", char_code.toString(16).toUpperCase());\n\t                        else\n\t                            result += Twig.lib.sprintf(\"&#x%04s;\", char_code.toString(16).toUpperCase());\n\t                    }\n\t                }\n\n\t                return Twig.Markup(result, 'html_attr');\n\t            } else {\n\t                throw new Twig.Error(\"escape strategy unsupported\");\n\t            }\n\t        },\n\n\t        /* Alias of escape */\n\t        \"e\": function(value, params) {\n\t            return Twig.filters.escape(value, params);\n\t        },\n\n\t        nl2br: function(value) {\n\t            if (value === undefined || value === null){\n\t                return;\n\t            }\n\t            var linebreak_tag = \"BACKSLASH_n_replace\",\n\t                br = \"<br />\" + linebreak_tag;\n\n\t            value = Twig.filters.escape(value)\n\t                        .replace(/\\r\\n/g, br)\n\t                        .replace(/\\r/g, br)\n\t                        .replace(/\\n/g, br);\n\n\t            value = Twig.lib.replaceAll(value, linebreak_tag, \"\\n\");\n\n\t            return Twig.Markup(value);\n\t        },\n\n\t        /**\n\t         * Adapted from: http://phpjs.org/functions/number_format:481\n\t         */\n\t        number_format: function(value, params) {\n\t            var number = value,\n\t                decimals = (params && params[0]) ? params[0] : undefined,\n\t                dec      = (params && params[1] !== undefined) ? params[1] : \".\",\n\t                sep      = (params && params[2] !== undefined) ? params[2] : \",\";\n\n\t            number = (number + '').replace(/[^0-9+\\-Ee.]/g, '');\n\t            var n = !isFinite(+number) ? 0 : +number,\n\t                prec = !isFinite(+decimals) ? 0 : Math.abs(decimals),\n\t                s = '',\n\t                toFixedFix = function (n, prec) {\n\t                    var k = Math.pow(10, prec);\n\t                    return '' + Math.round(n * k) / k;\n\t                };\n\t            // Fix for IE parseFloat(0.55).toFixed(0) = 0;\n\t            s = (prec ? toFixedFix(n, prec) : '' + Math.round(n)).split('.');\n\t            if (s[0].length > 3) {\n\t                s[0] = s[0].replace(/\\B(?=(?:\\d{3})+(?!\\d))/g, sep);\n\t            }\n\t            if ((s[1] || '').length < prec) {\n\t                s[1] = s[1] || '';\n\t                s[1] += new Array(prec - s[1].length + 1).join('0');\n\t            }\n\t            return s.join(dec);\n\t        },\n\n\t        trim: function(value, params) {\n\t            if (value === undefined|| value === null){\n\t                return;\n\t            }\n\n\t            var str = Twig.filters.escape( '' + value ),\n\t                whitespace;\n\t            if ( params && params[0] ) {\n\t                whitespace = '' + params[0];\n\t            } else {\n\t                whitespace = ' \\n\\r\\t\\f\\x0b\\xa0\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u200b\\u2028\\u2029\\u3000';\n\t            }\n\t            for (var i = 0; i < str.length; i++) {\n\t                if (whitespace.indexOf(str.charAt(i)) === -1) {\n\t                    str = str.substring(i);\n\t                    break;\n\t                }\n\t            }\n\t            for (i = str.length - 1; i >= 0; i--) {\n\t                if (whitespace.indexOf(str.charAt(i)) === -1) {\n\t                    str = str.substring(0, i + 1);\n\t                    break;\n\t                }\n\t            }\n\t            return whitespace.indexOf(str.charAt(0)) === -1 ? str : '';\n\t        },\n\n\t        truncate: function (value, params) {\n\t            var length = 30,\n\t                preserve = false,\n\t                separator = '...';\n\n\t            value =  value + '';\n\t            if (params) {\n\t                if (params[0]) {\n\t                    length = params[0];\n\t                }\n\t                if (params[1]) {\n\t                    preserve = params[1];\n\t                }\n\t                if (params[2]) {\n\t                    separator = params[2];\n\t                }\n\t            }\n\n\t            if (value.length > length) {\n\n\t                if (preserve) {\n\t                    length = value.indexOf(' ', length);\n\t                    if (length === -1) {\n\t                        return value;\n\t                    }\n\t                }\n\n\t                value =  value.substr(0, length) + separator;\n\t            }\n\n\t            return value;\n\t        },\n\n\t        slice: function(value, params) {\n\t            if (value === undefined || value === null) {\n\t                return;\n\t            }\n\t            if (params === undefined || params.length < 1) {\n\t                throw new Twig.Error(\"slice filter expects at least 1 argument\");\n\t            }\n\n\t            // default to start of string\n\t            var start = params[0] || 0;\n\t            // default to length of string\n\t            var length = params.length > 1 ? params[1] : value.length;\n\t            // handle negative start values\n\t            var startIndex = start >= 0 ? start : Math.max( value.length + start, 0 );\n\n\t            if (Twig.lib.is(\"Array\", value)) {\n\t                var output = [];\n\t                for (var i = startIndex; i < startIndex + length && i < value.length; i++) {\n\t                    output.push(value[i]);\n\t                }\n\t                return output;\n\t            } else if (Twig.lib.is(\"String\", value)) {\n\t                return value.substr(startIndex, length);\n\t            } else {\n\t                throw new Twig.Error(\"slice filter expects value to be an array or string\");\n\t            }\n\t        },\n\n\t        abs: function(value) {\n\t            if (value === undefined || value === null) {\n\t                return;\n\t            }\n\n\t            return Math.abs(value);\n\t        },\n\n\t        first: function(value) {\n\t            if (is(\"Array\", value)) {\n\t                return value[0];\n\t            } else if (is(\"Object\", value)) {\n\t                if ('_keys' in value) {\n\t                    return value[value._keys[0]];\n\t                }\n\t            } else if ( typeof value === \"string\" ) {\n\t                return value.substr(0, 1);\n\t            }\n\n\t            return;\n\t        },\n\n\t        split: function(value, params) {\n\t            if (value === undefined || value === null) {\n\t                return;\n\t            }\n\t            if (params === undefined || params.length < 1 || params.length > 2) {\n\t                throw new Twig.Error(\"split filter expects 1 or 2 argument\");\n\t            }\n\t            if (Twig.lib.is(\"String\", value)) {\n\t                var delimiter = params[0],\n\t                    limit = params[1],\n\t                    split = value.split(delimiter);\n\n\t                if (limit === undefined) {\n\n\t                    return split;\n\n\t                } else if (limit < 0) {\n\n\t                    return value.split(delimiter, split.length + limit);\n\n\t                } else {\n\n\t                    var limitedSplit = [];\n\n\t                    if (delimiter == '') {\n\t                        // empty delimiter\n\t                        // \"aabbcc\"|split('', 2)\n\t                        //     -> ['aa', 'bb', 'cc']\n\n\t                        while(split.length > 0) {\n\t                            var temp = \"\";\n\t                            for (var i=0; i<limit && split.length > 0; i++) {\n\t                                temp += split.shift();\n\t                            }\n\t                            limitedSplit.push(temp);\n\t                        }\n\n\t                    } else {\n\t                        // non-empty delimiter\n\t                        // \"one,two,three,four,five\"|split(',', 3)\n\t                        //     -> ['one', 'two', 'three,four,five']\n\n\t                        for (var i=0; i<limit-1 && split.length > 0; i++) {\n\t                            limitedSplit.push(split.shift());\n\t                        }\n\n\t                        if (split.length > 0) {\n\t                            limitedSplit.push(split.join(delimiter));\n\t                        }\n\t                    }\n\n\t                    return limitedSplit;\n\t                }\n\n\t            } else {\n\t                throw new Twig.Error(\"split filter expects value to be a string\");\n\t            }\n\t        },\n\t        last: function(value) {\n\t            if (Twig.lib.is('Object', value)) {\n\t                var keys;\n\n\t                if (value._keys === undefined) {\n\t                    keys = Object.keys(value);\n\t                } else {\n\t                    keys = value._keys;\n\t                }\n\n\t                return value[keys[keys.length - 1]];\n\t            }\n\n\t            // string|array\n\t            return value[value.length - 1];\n\t        },\n\t        raw: function(value) {\n\t            return Twig.Markup(value);\n\t        },\n\t        batch: function(items, params) {\n\t            var size = params.shift(),\n\t                fill = params.shift(),\n\t                result,\n\t                last,\n\t                missing;\n\n\t            if (!Twig.lib.is(\"Array\", items)) {\n\t                throw new Twig.Error(\"batch filter expects items to be an array\");\n\t            }\n\n\t            if (!Twig.lib.is(\"Number\", size)) {\n\t                throw new Twig.Error(\"batch filter expects size to be a number\");\n\t            }\n\n\t            size = Math.ceil(size);\n\n\t            result = Twig.lib.chunkArray(items, size);\n\n\t            if (fill && items.length % size != 0) {\n\t                last = result.pop();\n\t                missing = size - last.length;\n\n\t                while (missing--) {\n\t                    last.push(fill);\n\t                }\n\n\t                result.push(last);\n\t            }\n\n\t            return result;\n\t        },\n\t        round: function(value, params) {\n\t            params = params || [];\n\n\t            var precision = params.length > 0 ? params[0] : 0,\n\t                method = params.length > 1 ? params[1] : \"common\";\n\n\t            value = parseFloat(value);\n\n\t            if(precision && !Twig.lib.is(\"Number\", precision)) {\n\t                throw new Twig.Error(\"round filter expects precision to be a number\");\n\t            }\n\n\t            if (method === \"common\") {\n\t                return Twig.lib.round(value, precision);\n\t            }\n\n\t            if(!Twig.lib.is(\"Function\", Math[method])) {\n\t                throw new Twig.Error(\"round filter expects method to be 'floor', 'ceil', or 'common'\");\n\t            }\n\n\t            return Math[method](value * Math.pow(10, precision)) / Math.pow(10, precision);\n\t        }\n\t    };\n\n\t    Twig.filter = function(filter, value, params) {\n\t        if (!Twig.filters[filter]) {\n\t            throw \"Unable to find filter \" + filter;\n\t        }\n\t        return Twig.filters[filter].apply(this, [value, params]);\n\t    };\n\n\t    Twig.filter.extend = function(filter, definition) {\n\t        Twig.filters[filter] = definition;\n\t    };\n\n\t    return Twig;\n\n\t};\n\n\n/***/ },\n/* 6 */\n/***/ function(module, exports) {\n\n\t// ## twig.functions.js\n\t//\n\t// This file handles parsing filters.\n\tmodule.exports = function (Twig) {\n\t    /**\n\t     * @constant\n\t     * @type {string}\n\t     */\n\t    var TEMPLATE_NOT_FOUND_MESSAGE = 'Template \"{name}\" is not defined.';\n\n\t    // Determine object type\n\t    function is(type, obj) {\n\t        var clas = Object.prototype.toString.call(obj).slice(8, -1);\n\t        return obj !== undefined && obj !== null && clas === type;\n\t    }\n\n\t    Twig.functions = {\n\t        //  attribute, block, constant, date, dump, parent, random,.\n\n\t        // Range function from http://phpjs.org/functions/range:499\n\t        // Used under an MIT License\n\t        range: function (low, high, step) {\n\t            // http://kevin.vanzonneveld.net\n\t            // +   original by: Waldo Malqui Silva\n\t            // *     example 1: range ( 0, 12 );\n\t            // *     returns 1: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n\t            // *     example 2: range( 0, 100, 10 );\n\t            // *     returns 2: [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\n\t            // *     example 3: range( 'a', 'i' );\n\t            // *     returns 3: ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i']\n\t            // *     example 4: range( 'c', 'a' );\n\t            // *     returns 4: ['c', 'b', 'a']\n\t            var matrix = [];\n\t            var inival, endval, plus;\n\t            var walker = step || 1;\n\t            var chars = false;\n\n\t            if (!isNaN(low) && !isNaN(high)) {\n\t                inival = parseInt(low, 10);\n\t                endval = parseInt(high, 10);\n\t            } else if (isNaN(low) && isNaN(high)) {\n\t                chars = true;\n\t                inival = low.charCodeAt(0);\n\t                endval = high.charCodeAt(0);\n\t            } else {\n\t                inival = (isNaN(low) ? 0 : low);\n\t                endval = (isNaN(high) ? 0 : high);\n\t            }\n\n\t            plus = ((inival > endval) ? false : true);\n\t            if (plus) {\n\t                while (inival <= endval) {\n\t                    matrix.push(((chars) ? String.fromCharCode(inival) : inival));\n\t                    inival += walker;\n\t                }\n\t            } else {\n\t                while (inival >= endval) {\n\t                    matrix.push(((chars) ? String.fromCharCode(inival) : inival));\n\t                    inival -= walker;\n\t                }\n\t            }\n\n\t            return matrix;\n\t        },\n\t        cycle: function(arr, i) {\n\t            var pos = i % arr.length;\n\t            return arr[pos];\n\t        },\n\t        dump: function() {\n\t            var EOL = '\\n',\n\t                indentChar = '  ',\n\t                indentTimes = 0,\n\t                out = '',\n\t                args = Array.prototype.slice.call(arguments),\n\t                indent = function(times) {\n\t                    var ind  = '';\n\t                    while (times > 0) {\n\t                        times--;\n\t                        ind += indentChar;\n\t                    }\n\t                    return ind;\n\t                },\n\t                displayVar = function(variable) {\n\t                    out += indent(indentTimes);\n\t                    if (typeof(variable) === 'object') {\n\t                        dumpVar(variable);\n\t                    } else if (typeof(variable) === 'function') {\n\t                        out += 'function()' + EOL;\n\t                    } else if (typeof(variable) === 'string') {\n\t                        out += 'string(' + variable.length + ') \"' + variable + '\"' + EOL;\n\t                    } else if (typeof(variable) === 'number') {\n\t                        out += 'number(' + variable + ')' + EOL;\n\t                    } else if (typeof(variable) === 'boolean') {\n\t                        out += 'bool(' + variable + ')' + EOL;\n\t                    }\n\t                },\n\t                dumpVar = function(variable) {\n\t                    var i;\n\t                    if (variable === null) {\n\t                        out += 'NULL' + EOL;\n\t                    } else if (variable === undefined) {\n\t                        out += 'undefined' + EOL;\n\t                    } else if (typeof variable === 'object') {\n\t                        out += indent(indentTimes) + typeof(variable);\n\t                        indentTimes++;\n\t                        out += '(' + (function(obj) {\n\t                            var size = 0, key;\n\t                            for (key in obj) {\n\t                                if (obj.hasOwnProperty(key)) {\n\t                                    size++;\n\t                                }\n\t                            }\n\t                            return size;\n\t                        })(variable) + ') {' + EOL;\n\t                        for (i in variable) {\n\t                            out += indent(indentTimes) + '[' + i + ']=> ' + EOL;\n\t                            displayVar(variable[i]);\n\t                        }\n\t                        indentTimes--;\n\t                        out += indent(indentTimes) + '}' + EOL;\n\t                    } else {\n\t                        displayVar(variable);\n\t                    }\n\t                };\n\n\t            // handle no argument case by dumping the entire render context\n\t            if (args.length == 0) args.push(this.context);\n\n\t            Twig.forEach(args, function(variable) {\n\t                dumpVar(variable);\n\t            });\n\n\t            return out;\n\t        },\n\t        date: function(date, time) {\n\t            var dateObj;\n\t            if (date === undefined || date === null || date === \"\") {\n\t                dateObj = new Date();\n\t            } else if (Twig.lib.is(\"Date\", date)) {\n\t                dateObj = date;\n\t            } else if (Twig.lib.is(\"String\", date)) {\n\t                if (date.match(/^[0-9]+$/)) {\n\t                    dateObj = new Date(date * 1000);\n\t                }\n\t                else {\n\t                    dateObj = new Date(Twig.lib.strtotime(date) * 1000);\n\t                }\n\t            } else if (Twig.lib.is(\"Number\", date)) {\n\t                // timestamp\n\t                dateObj = new Date(date * 1000);\n\t            } else {\n\t                throw new Twig.Error(\"Unable to parse date \" + date);\n\t            }\n\t            return dateObj;\n\t        },\n\t        block: function(block) {\n\t            if (this.originalBlockTokens[block]) {\n\t                return Twig.logic.parse.apply(this, [this.originalBlockTokens[block], this.context]).output;\n\t            } else {\n\t                return this.blocks[block];\n\t            }\n\t        },\n\t        parent: function() {\n\t            // Add a placeholder\n\t            return Twig.placeholders.parent;\n\t        },\n\t        attribute: function(object, method, params) {\n\t            if (Twig.lib.is('Object', object)) {\n\t                if (object.hasOwnProperty(method)) {\n\t                    if (typeof object[method] === \"function\") {\n\t                        return object[method].apply(undefined, params);\n\t                    }\n\t                    else {\n\t                        return object[method];\n\t                    }\n\t                }\n\t            }\n\t            // Array will return element 0-index\n\t            return object[method] || undefined;\n\t        },\n\t        max: function(values) {\n\t            if(Twig.lib.is(\"Object\", values)) {\n\t                delete values[\"_keys\"];\n\t                return Twig.lib.max(values);\n\t            }\n\n\t            return Twig.lib.max.apply(null, arguments);\n\t        },\n\t        min: function(values) {\n\t            if(Twig.lib.is(\"Object\", values)) {\n\t                delete values[\"_keys\"];\n\t                return Twig.lib.min(values);\n\t            }\n\n\t            return Twig.lib.min.apply(null, arguments);\n\t        },\n\t        template_from_string: function(template) {\n\t            if (template === undefined) {\n\t                template = '';\n\t            }\n\t            return Twig.Templates.parsers.twig({\n\t                options: this.options,\n\t                data: template\n\t            });\n\t        },\n\t        random: function(value) {\n\t            var LIMIT_INT31 = 0x80000000;\n\n\t            function getRandomNumber(n) {\n\t                var random = Math.floor(Math.random() * LIMIT_INT31);\n\t                var limits = [0, n];\n\t                var min = Math.min.apply(null, limits),\n\t                    max = Math.max.apply(null, limits);\n\t                return min + Math.floor((max - min + 1) * random / LIMIT_INT31);\n\t            }\n\n\t            if(Twig.lib.is(\"Number\", value)) {\n\t                return getRandomNumber(value);\n\t            }\n\n\t            if(Twig.lib.is(\"String\", value)) {\n\t                return value.charAt(getRandomNumber(value.length-1));\n\t            }\n\n\t            if(Twig.lib.is(\"Array\", value)) {\n\t                return value[getRandomNumber(value.length-1)];\n\t            }\n\n\t            if(Twig.lib.is(\"Object\", value)) {\n\t                var keys = Object.keys(value);\n\t                return value[keys[getRandomNumber(keys.length-1)]];\n\t            }\n\n\t            return getRandomNumber(LIMIT_INT31-1);\n\t        },\n\n\t        /**\n\t         * Returns the content of a template without rendering it\n\t         * @param {string} name\n\t         * @param {boolean} [ignore_missing=false]\n\t         * @returns {string}\n\t         */\n\t        source: function(name, ignore_missing) {\n\t            var templateSource;\n\t            var templateFound = false;\n\t            var isNodeEnvironment = typeof module !== 'undefined' && typeof module.exports !== 'undefined' && typeof window === 'undefined';\n\t            var loader;\n\t            var path;\n\n\t            //if we are running in a node.js environment, set the loader to 'fs' and ensure the\n\t            // path is relative to the CWD of the running script\n\t            //else, set the loader to 'ajax' and set the path to the value of name\n\t            if (isNodeEnvironment) {\n\t                loader = 'fs';\n\t                path = __dirname + '/' + name;\n\t            } else {\n\t                loader = 'ajax';\n\t                path = name;\n\t            }\n\n\t            //build the params object\n\t            var params = {\n\t                id: name,\n\t                path: path,\n\t                method: loader,\n\t                parser: 'source',\n\t                async: false,\n\t                fetchTemplateSource: true\n\t            };\n\n\t            //default ignore_missing to false\n\t            if (typeof ignore_missing === 'undefined') {\n\t                ignore_missing = false;\n\t            }\n\n\t            //try to load the remote template\n\t            //\n\t            //on exception, log it\n\t            try {\n\t                templateSource = Twig.Templates.loadRemote(name, params);\n\n\t                //if the template is undefined or null, set the template to an empty string and do NOT flip the\n\t                // boolean indicating we found the template\n\t                //\n\t                //else, all is good! flip the boolean indicating we found the template\n\t                if (typeof templateSource === 'undefined' || templateSource === null) {\n\t                    templateSource = '';\n\t                } else {\n\t                    templateFound = true;\n\t                }\n\t            } catch (e) {\n\t                Twig.log.debug('Twig.functions.source: ', 'Problem loading template  ', e);\n\t            }\n\n\t            //if the template was NOT found AND we are not ignoring missing templates, return the same message\n\t            // that is returned by the PHP implementation of the twig source() function\n\t            //\n\t            //else, return the template source\n\t            if (!templateFound && !ignore_missing) {\n\t                return TEMPLATE_NOT_FOUND_MESSAGE.replace('{name}', name);\n\t            } else {\n\t                return templateSource;\n\t            }\n\t        }\n\t    };\n\n\t    Twig._function = function(_function, value, params) {\n\t        if (!Twig.functions[_function]) {\n\t            throw \"Unable to find function \" + _function;\n\t        }\n\t        return Twig.functions[_function](value, params);\n\t    };\n\n\t    Twig._function.extend = function(_function, definition) {\n\t        Twig.functions[_function] = definition;\n\t    };\n\n\t    return Twig;\n\n\t};\n\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// ## twig.lib.js\n\t//\n\t// This file contains 3rd party libraries used within twig.\n\t//\n\t// Copies of the licenses for the code included here can be found in the\n\t// LICENSES.md file.\n\t//\n\n\tmodule.exports = function(Twig) {\n\n\t    // Namespace for libraries\n\t    Twig.lib = { };\n\n\t    Twig.lib.sprintf = __webpack_require__(8);\n\t    Twig.lib.vsprintf = __webpack_require__(9);\n\t    Twig.lib.round = __webpack_require__(10);\n\t    Twig.lib.max = __webpack_require__(11);\n\t    Twig.lib.min = __webpack_require__(12);\n\t    Twig.lib.strip_tags = __webpack_require__(13);\n\t    Twig.lib.strtotime = __webpack_require__(14);\n\t    Twig.lib.date = __webpack_require__(15);\n\t    Twig.lib.boolval = __webpack_require__(16);\n\n\t    Twig.lib.is = function(type, obj) {\n\t        var clas = Object.prototype.toString.call(obj).slice(8, -1);\n\t        return obj !== undefined && obj !== null && clas === type;\n\t    };\n\n\t    // shallow-copy an object\n\t    Twig.lib.copy = function(src) {\n\t        var target = {},\n\t            key;\n\t        for (key in src)\n\t            target[key] = src[key];\n\n\t        return target;\n\t    };\n\n\t    Twig.lib.extend = function (src, add) {\n\t        var keys = Object.keys(add),\n\t            i;\n\n\t        i = keys.length;\n\n\t        while (i--) {\n\t            src[keys[i]] = add[keys[i]];\n\t        }\n\n\t        return src;\n\t    };\n\n\t    Twig.lib.replaceAll = function(string, search, replace) {\n\t        return string.split(search).join(replace);\n\t    };\n\n\t    // chunk an array (arr) into arrays of (size) items, returns an array of arrays, or an empty array on invalid input\n\t    Twig.lib.chunkArray = function (arr, size) {\n\t        var returnVal = [],\n\t            x = 0,\n\t            len = arr.length;\n\n\t        if (size < 1 || !Twig.lib.is(\"Array\", arr)) {\n\t            return [];\n\t        }\n\n\t        while (x < len) {\n\t            returnVal.push(arr.slice(x, x += size));\n\t        }\n\n\t        return returnVal;\n\t    };\n\n\t    return Twig;\n\t};\n\n\n/***/ },\n/* 8 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\n\tmodule.exports = function sprintf() {\n\t  //  discuss at: http://locutus.io/php/sprintf/\n\t  // original by: Ash Searle (http://hexmen.com/blog/)\n\t  // improved by: Michael White (http://getsprink.com)\n\t  // improved by: Jack\n\t  // improved by: Kevin van Zonneveld (http://kvz.io)\n\t  // improved by: Kevin van Zonneveld (http://kvz.io)\n\t  // improved by: Kevin van Zonneveld (http://kvz.io)\n\t  // improved by: Dj\n\t  // improved by: Allidylls\n\t  //    input by: Paulo Freitas\n\t  //    input by: Brett Zamir (http://brett-zamir.me)\n\t  //   example 1: sprintf(\"%01.2f\", 123.1)\n\t  //   returns 1: '123.10'\n\t  //   example 2: sprintf(\"[%10s]\", 'monkey')\n\t  //   returns 2: '[    monkey]'\n\t  //   example 3: sprintf(\"[%'#10s]\", 'monkey')\n\t  //   returns 3: '[####monkey]'\n\t  //   example 4: sprintf(\"%d\", 123456789012345)\n\t  //   returns 4: '123456789012345'\n\t  //   example 5: sprintf('%-03s', 'E')\n\t  //   returns 5: 'E00'\n\n\t  var regex = /%%|%(\\d+\\$)?([-+'#0 ]*)(\\*\\d+\\$|\\*|\\d+)?(?:\\.(\\*\\d+\\$|\\*|\\d+))?([scboxXuideEfFgG])/g;\n\t  var a = arguments;\n\t  var i = 0;\n\t  var format = a[i++];\n\n\t  var _pad = function _pad(str, len, chr, leftJustify) {\n\t    if (!chr) {\n\t      chr = ' ';\n\t    }\n\t    var padding = str.length >= len ? '' : new Array(1 + len - str.length >>> 0).join(chr);\n\t    return leftJustify ? str + padding : padding + str;\n\t  };\n\n\t  var justify = function justify(value, prefix, leftJustify, minWidth, zeroPad, customPadChar) {\n\t    var diff = minWidth - value.length;\n\t    if (diff > 0) {\n\t      if (leftJustify || !zeroPad) {\n\t        value = _pad(value, minWidth, customPadChar, leftJustify);\n\t      } else {\n\t        value = [value.slice(0, prefix.length), _pad('', diff, '0', true), value.slice(prefix.length)].join('');\n\t      }\n\t    }\n\t    return value;\n\t  };\n\n\t  var _formatBaseX = function _formatBaseX(value, base, prefix, leftJustify, minWidth, precision, zeroPad) {\n\t    // Note: casts negative numbers to positive ones\n\t    var number = value >>> 0;\n\t    prefix = prefix && number && {\n\t      '2': '0b',\n\t      '8': '0',\n\t      '16': '0x'\n\t    }[base] || '';\n\t    value = prefix + _pad(number.toString(base), precision || 0, '0', false);\n\t    return justify(value, prefix, leftJustify, minWidth, zeroPad);\n\t  };\n\n\t  // _formatString()\n\t  var _formatString = function _formatString(value, leftJustify, minWidth, precision, zeroPad, customPadChar) {\n\t    if (precision !== null && precision !== undefined) {\n\t      value = value.slice(0, precision);\n\t    }\n\t    return justify(value, '', leftJustify, minWidth, zeroPad, customPadChar);\n\t  };\n\n\t  // doFormat()\n\t  var doFormat = function doFormat(substring, valueIndex, flags, minWidth, precision, type) {\n\t    var number, prefix, method, textTransform, value;\n\n\t    if (substring === '%%') {\n\t      return '%';\n\t    }\n\n\t    // parse flags\n\t    var leftJustify = false;\n\t    var positivePrefix = '';\n\t    var zeroPad = false;\n\t    var prefixBaseX = false;\n\t    var customPadChar = ' ';\n\t    var flagsl = flags.length;\n\t    var j;\n\t    for (j = 0; j < flagsl; j++) {\n\t      switch (flags.charAt(j)) {\n\t        case ' ':\n\t          positivePrefix = ' ';\n\t          break;\n\t        case '+':\n\t          positivePrefix = '+';\n\t          break;\n\t        case '-':\n\t          leftJustify = true;\n\t          break;\n\t        case \"'\":\n\t          customPadChar = flags.charAt(j + 1);\n\t          break;\n\t        case '0':\n\t          zeroPad = true;\n\t          customPadChar = '0';\n\t          break;\n\t        case '#':\n\t          prefixBaseX = true;\n\t          break;\n\t      }\n\t    }\n\n\t    // parameters may be null, undefined, empty-string or real valued\n\t    // we want to ignore null, undefined and empty-string values\n\t    if (!minWidth) {\n\t      minWidth = 0;\n\t    } else if (minWidth === '*') {\n\t      minWidth = +a[i++];\n\t    } else if (minWidth.charAt(0) === '*') {\n\t      minWidth = +a[minWidth.slice(1, -1)];\n\t    } else {\n\t      minWidth = +minWidth;\n\t    }\n\n\t    // Note: undocumented perl feature:\n\t    if (minWidth < 0) {\n\t      minWidth = -minWidth;\n\t      leftJustify = true;\n\t    }\n\n\t    if (!isFinite(minWidth)) {\n\t      throw new Error('sprintf: (minimum-)width must be finite');\n\t    }\n\n\t    if (!precision) {\n\t      precision = 'fFeE'.indexOf(type) > -1 ? 6 : type === 'd' ? 0 : undefined;\n\t    } else if (precision === '*') {\n\t      precision = +a[i++];\n\t    } else if (precision.charAt(0) === '*') {\n\t      precision = +a[precision.slice(1, -1)];\n\t    } else {\n\t      precision = +precision;\n\t    }\n\n\t    // grab value using valueIndex if required?\n\t    value = valueIndex ? a[valueIndex.slice(0, -1)] : a[i++];\n\n\t    switch (type) {\n\t      case 's':\n\t        return _formatString(value + '', leftJustify, minWidth, precision, zeroPad, customPadChar);\n\t      case 'c':\n\t        return _formatString(String.fromCharCode(+value), leftJustify, minWidth, precision, zeroPad);\n\t      case 'b':\n\t        return _formatBaseX(value, 2, prefixBaseX, leftJustify, minWidth, precision, zeroPad);\n\t      case 'o':\n\t        return _formatBaseX(value, 8, prefixBaseX, leftJustify, minWidth, precision, zeroPad);\n\t      case 'x':\n\t        return _formatBaseX(value, 16, prefixBaseX, leftJustify, minWidth, precision, zeroPad);\n\t      case 'X':\n\t        return _formatBaseX(value, 16, prefixBaseX, leftJustify, minWidth, precision, zeroPad).toUpperCase();\n\t      case 'u':\n\t        return _formatBaseX(value, 10, prefixBaseX, leftJustify, minWidth, precision, zeroPad);\n\t      case 'i':\n\t      case 'd':\n\t        number = +value || 0;\n\t        // Plain Math.round doesn't just truncate\n\t        number = Math.round(number - number % 1);\n\t        prefix = number < 0 ? '-' : positivePrefix;\n\t        value = prefix + _pad(String(Math.abs(number)), precision, '0', false);\n\t        return justify(value, prefix, leftJustify, minWidth, zeroPad);\n\t      case 'e':\n\t      case 'E':\n\t      case 'f': // @todo: Should handle locales (as per setlocale)\n\t      case 'F':\n\t      case 'g':\n\t      case 'G':\n\t        number = +value;\n\t        prefix = number < 0 ? '-' : positivePrefix;\n\t        method = ['toExponential', 'toFixed', 'toPrecision']['efg'.indexOf(type.toLowerCase())];\n\t        textTransform = ['toString', 'toUpperCase']['eEfFgG'.indexOf(type) % 2];\n\t        value = prefix + Math.abs(number)[method](precision);\n\t        return justify(value, prefix, leftJustify, minWidth, zeroPad)[textTransform]();\n\t      default:\n\t        return substring;\n\t    }\n\t  };\n\n\t  return format.replace(regex, doFormat);\n\t};\n\t//# sourceMappingURL=sprintf.js.map\n\n/***/ },\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tmodule.exports = function vsprintf(format, args) {\n\t  //  discuss at: http://locutus.io/php/vsprintf/\n\t  // original by: ejsanders\n\t  //   example 1: vsprintf('%04d-%02d-%02d', [1988, 8, 1])\n\t  //   returns 1: '1988-08-01'\n\n\t  var sprintf = __webpack_require__(8);\n\n\t  return sprintf.apply(this, [format].concat(args));\n\t};\n\t//# sourceMappingURL=vsprintf.js.map\n\n/***/ },\n/* 10 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\n\tmodule.exports = function round(value, precision, mode) {\n\t  //  discuss at: http://locutus.io/php/round/\n\t  // original by: Philip Peterson\n\t  //  revised by: Onno Marsman (https://twitter.com/onnomarsman)\n\t  //  revised by: T.Wild\n\t  //  revised by: Rafał Kukawski (http://blog.kukawski.pl)\n\t  //    input by: Greenseed\n\t  //    input by: meo\n\t  //    input by: William\n\t  //    input by: Josep Sanz (http://www.ws3.es/)\n\t  // bugfixed by: Brett Zamir (http://brett-zamir.me)\n\t  //      note 1: Great work. Ideas for improvement:\n\t  //      note 1: - code more compliant with developer guidelines\n\t  //      note 1: - for implementing PHP constant arguments look at\n\t  //      note 1: the pathinfo() function, it offers the greatest\n\t  //      note 1: flexibility & compatibility possible\n\t  //   example 1: round(1241757, -3)\n\t  //   returns 1: 1242000\n\t  //   example 2: round(3.6)\n\t  //   returns 2: 4\n\t  //   example 3: round(2.835, 2)\n\t  //   returns 3: 2.84\n\t  //   example 4: round(1.1749999999999, 2)\n\t  //   returns 4: 1.17\n\t  //   example 5: round(58551.799999999996, 2)\n\t  //   returns 5: 58551.8\n\n\t  var m, f, isHalf, sgn; // helper variables\n\t  // making sure precision is integer\n\t  precision |= 0;\n\t  m = Math.pow(10, precision);\n\t  value *= m;\n\t  // sign of the number\n\t  sgn = value > 0 | -(value < 0);\n\t  isHalf = value % 1 === 0.5 * sgn;\n\t  f = Math.floor(value);\n\n\t  if (isHalf) {\n\t    switch (mode) {\n\t      case 'PHP_ROUND_HALF_DOWN':\n\t        // rounds .5 toward zero\n\t        value = f + (sgn < 0);\n\t        break;\n\t      case 'PHP_ROUND_HALF_EVEN':\n\t        // rouds .5 towards the next even integer\n\t        value = f + f % 2 * sgn;\n\t        break;\n\t      case 'PHP_ROUND_HALF_ODD':\n\t        // rounds .5 towards the next odd integer\n\t        value = f + !(f % 2);\n\t        break;\n\t      default:\n\t        // rounds .5 away from zero\n\t        value = f + (sgn > 0);\n\t    }\n\t  }\n\n\t  return (isHalf ? value : Math.round(value)) / m;\n\t};\n\t//# sourceMappingURL=round.js.map\n\n/***/ },\n/* 11 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\n\tvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n\tmodule.exports = function max() {\n\t  //  discuss at: http://locutus.io/php/max/\n\t  // original by: Onno Marsman (https://twitter.com/onnomarsman)\n\t  //  revised by: Onno Marsman (https://twitter.com/onnomarsman)\n\t  // improved by: Jack\n\t  //      note 1: Long code cause we're aiming for maximum PHP compatibility\n\t  //   example 1: max(1, 3, 5, 6, 7)\n\t  //   returns 1: 7\n\t  //   example 2: max([2, 4, 5])\n\t  //   returns 2: 5\n\t  //   example 3: max(0, 'hello')\n\t  //   returns 3: 0\n\t  //   example 4: max('hello', 0)\n\t  //   returns 4: 'hello'\n\t  //   example 5: max(-1, 'hello')\n\t  //   returns 5: 'hello'\n\t  //   example 6: max([2, 4, 8], [2, 5, 7])\n\t  //   returns 6: [2, 5, 7]\n\n\t  var ar;\n\t  var retVal;\n\t  var i = 0;\n\t  var n = 0;\n\t  var argv = arguments;\n\t  var argc = argv.length;\n\t  var _obj2Array = function _obj2Array(obj) {\n\t    if (Object.prototype.toString.call(obj) === '[object Array]') {\n\t      return obj;\n\t    } else {\n\t      var ar = [];\n\t      for (var i in obj) {\n\t        if (obj.hasOwnProperty(i)) {\n\t          ar.push(obj[i]);\n\t        }\n\t      }\n\t      return ar;\n\t    }\n\t  };\n\t  var _compare = function _compare(current, next) {\n\t    var i = 0;\n\t    var n = 0;\n\t    var tmp = 0;\n\t    var nl = 0;\n\t    var cl = 0;\n\n\t    if (current === next) {\n\t      return 0;\n\t    } else if ((typeof current === 'undefined' ? 'undefined' : _typeof(current)) === 'object') {\n\t      if ((typeof next === 'undefined' ? 'undefined' : _typeof(next)) === 'object') {\n\t        current = _obj2Array(current);\n\t        next = _obj2Array(next);\n\t        cl = current.length;\n\t        nl = next.length;\n\t        if (nl > cl) {\n\t          return 1;\n\t        } else if (nl < cl) {\n\t          return -1;\n\t        }\n\t        for (i = 0, n = cl; i < n; ++i) {\n\t          tmp = _compare(current[i], next[i]);\n\t          if (tmp === 1) {\n\t            return 1;\n\t          } else if (tmp === -1) {\n\t            return -1;\n\t          }\n\t        }\n\t        return 0;\n\t      }\n\t      return -1;\n\t    } else if ((typeof next === 'undefined' ? 'undefined' : _typeof(next)) === 'object') {\n\t      return 1;\n\t    } else if (isNaN(next) && !isNaN(current)) {\n\t      if (current === 0) {\n\t        return 0;\n\t      }\n\t      return current < 0 ? 1 : -1;\n\t    } else if (isNaN(current) && !isNaN(next)) {\n\t      if (next === 0) {\n\t        return 0;\n\t      }\n\t      return next > 0 ? 1 : -1;\n\t    }\n\n\t    if (next === current) {\n\t      return 0;\n\t    }\n\n\t    return next > current ? 1 : -1;\n\t  };\n\n\t  if (argc === 0) {\n\t    throw new Error('At least one value should be passed to max()');\n\t  } else if (argc === 1) {\n\t    if (_typeof(argv[0]) === 'object') {\n\t      ar = _obj2Array(argv[0]);\n\t    } else {\n\t      throw new Error('Wrong parameter count for max()');\n\t    }\n\t    if (ar.length === 0) {\n\t      throw new Error('Array must contain at least one element for max()');\n\t    }\n\t  } else {\n\t    ar = argv;\n\t  }\n\n\t  retVal = ar[0];\n\t  for (i = 1, n = ar.length; i < n; ++i) {\n\t    if (_compare(retVal, ar[i]) === 1) {\n\t      retVal = ar[i];\n\t    }\n\t  }\n\n\t  return retVal;\n\t};\n\t//# sourceMappingURL=max.js.map\n\n/***/ },\n/* 12 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\n\tvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n\tmodule.exports = function min() {\n\t  //  discuss at: http://locutus.io/php/min/\n\t  // original by: Onno Marsman (https://twitter.com/onnomarsman)\n\t  //  revised by: Onno Marsman (https://twitter.com/onnomarsman)\n\t  // improved by: Jack\n\t  //      note 1: Long code cause we're aiming for maximum PHP compatibility\n\t  //   example 1: min(1, 3, 5, 6, 7)\n\t  //   returns 1: 1\n\t  //   example 2: min([2, 4, 5])\n\t  //   returns 2: 2\n\t  //   example 3: min(0, 'hello')\n\t  //   returns 3: 0\n\t  //   example 4: min('hello', 0)\n\t  //   returns 4: 'hello'\n\t  //   example 5: min(-1, 'hello')\n\t  //   returns 5: -1\n\t  //   example 6: min([2, 4, 8], [2, 5, 7])\n\t  //   returns 6: [2, 4, 8]\n\n\t  var ar;\n\t  var retVal;\n\t  var i = 0;\n\t  var n = 0;\n\t  var argv = arguments;\n\t  var argc = argv.length;\n\t  var _obj2Array = function _obj2Array(obj) {\n\t    if (Object.prototype.toString.call(obj) === '[object Array]') {\n\t      return obj;\n\t    }\n\t    var ar = [];\n\t    for (var i in obj) {\n\t      if (obj.hasOwnProperty(i)) {\n\t        ar.push(obj[i]);\n\t      }\n\t    }\n\t    return ar;\n\t  };\n\n\t  var _compare = function _compare(current, next) {\n\t    var i = 0;\n\t    var n = 0;\n\t    var tmp = 0;\n\t    var nl = 0;\n\t    var cl = 0;\n\n\t    if (current === next) {\n\t      return 0;\n\t    } else if ((typeof current === 'undefined' ? 'undefined' : _typeof(current)) === 'object') {\n\t      if ((typeof next === 'undefined' ? 'undefined' : _typeof(next)) === 'object') {\n\t        current = _obj2Array(current);\n\t        next = _obj2Array(next);\n\t        cl = current.length;\n\t        nl = next.length;\n\t        if (nl > cl) {\n\t          return 1;\n\t        } else if (nl < cl) {\n\t          return -1;\n\t        }\n\t        for (i = 0, n = cl; i < n; ++i) {\n\t          tmp = _compare(current[i], next[i]);\n\t          if (tmp === 1) {\n\t            return 1;\n\t          } else if (tmp === -1) {\n\t            return -1;\n\t          }\n\t        }\n\t        return 0;\n\t      }\n\t      return -1;\n\t    } else if ((typeof next === 'undefined' ? 'undefined' : _typeof(next)) === 'object') {\n\t      return 1;\n\t    } else if (isNaN(next) && !isNaN(current)) {\n\t      if (current === 0) {\n\t        return 0;\n\t      }\n\t      return current < 0 ? 1 : -1;\n\t    } else if (isNaN(current) && !isNaN(next)) {\n\t      if (next === 0) {\n\t        return 0;\n\t      }\n\t      return next > 0 ? 1 : -1;\n\t    }\n\n\t    if (next === current) {\n\t      return 0;\n\t    }\n\n\t    return next > current ? 1 : -1;\n\t  };\n\n\t  if (argc === 0) {\n\t    throw new Error('At least one value should be passed to min()');\n\t  } else if (argc === 1) {\n\t    if (_typeof(argv[0]) === 'object') {\n\t      ar = _obj2Array(argv[0]);\n\t    } else {\n\t      throw new Error('Wrong parameter count for min()');\n\t    }\n\n\t    if (ar.length === 0) {\n\t      throw new Error('Array must contain at least one element for min()');\n\t    }\n\t  } else {\n\t    ar = argv;\n\t  }\n\n\t  retVal = ar[0];\n\n\t  for (i = 1, n = ar.length; i < n; ++i) {\n\t    if (_compare(retVal, ar[i]) === -1) {\n\t      retVal = ar[i];\n\t    }\n\t  }\n\n\t  return retVal;\n\t};\n\t//# sourceMappingURL=min.js.map\n\n/***/ },\n/* 13 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\n\tmodule.exports = function strip_tags(input, allowed) {\n\t  // eslint-disable-line camelcase\n\t  //  discuss at: http://locutus.io/php/strip_tags/\n\t  // original by: Kevin van Zonneveld (http://kvz.io)\n\t  // improved by: Luke Godfrey\n\t  // improved by: Kevin van Zonneveld (http://kvz.io)\n\t  //    input by: Pul\n\t  //    input by: Alex\n\t  //    input by: Marc Palau\n\t  //    input by: Brett Zamir (http://brett-zamir.me)\n\t  //    input by: Bobby Drake\n\t  //    input by: Evertjan Garretsen\n\t  // bugfixed by: Kevin van Zonneveld (http://kvz.io)\n\t  // bugfixed by: Onno Marsman (https://twitter.com/onnomarsman)\n\t  // bugfixed by: Kevin van Zonneveld (http://kvz.io)\n\t  // bugfixed by: Kevin van Zonneveld (http://kvz.io)\n\t  // bugfixed by: Eric Nagel\n\t  // bugfixed by: Kevin van Zonneveld (http://kvz.io)\n\t  // bugfixed by: Tomasz Wesolowski\n\t  //  revised by: Rafał Kukawski (http://blog.kukawski.pl)\n\t  //   example 1: strip_tags('<p>Kevin</p> <br /><b>van</b> <i>Zonneveld</i>', '<i><b>')\n\t  //   returns 1: 'Kevin <b>van</b> <i>Zonneveld</i>'\n\t  //   example 2: strip_tags('<p>Kevin <img src=\"someimage.png\" onmouseover=\"someFunction()\">van <i>Zonneveld</i></p>', '<p>')\n\t  //   returns 2: '<p>Kevin van Zonneveld</p>'\n\t  //   example 3: strip_tags(\"<a href='http://kvz.io'>Kevin van Zonneveld</a>\", \"<a>\")\n\t  //   returns 3: \"<a href='http://kvz.io'>Kevin van Zonneveld</a>\"\n\t  //   example 4: strip_tags('1 < 5 5 > 1')\n\t  //   returns 4: '1 < 5 5 > 1'\n\t  //   example 5: strip_tags('1 <br/> 1')\n\t  //   returns 5: '1  1'\n\t  //   example 6: strip_tags('1 <br/> 1', '<br>')\n\t  //   returns 6: '1 <br/> 1'\n\t  //   example 7: strip_tags('1 <br/> 1', '<br><br/>')\n\t  //   returns 7: '1 <br/> 1'\n\n\t  // making sure the allowed arg is a string containing only tags in lowercase (<a><b><c>)\n\t  allowed = (((allowed || '') + '').toLowerCase().match(/<[a-z][a-z0-9]*>/g) || []).join('');\n\n\t  var tags = /<\\/?([a-z][a-z0-9]*)\\b[^>]*>/gi;\n\t  var commentsAndPhpTags = /<!--[\\s\\S]*?-->|<\\?(?:php)?[\\s\\S]*?\\?>/gi;\n\n\t  return input.replace(commentsAndPhpTags, '').replace(tags, function ($0, $1) {\n\t    return allowed.indexOf('<' + $1.toLowerCase() + '>') > -1 ? $0 : '';\n\t  });\n\t};\n\t//# sourceMappingURL=strip_tags.js.map\n\n/***/ },\n/* 14 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\n\tmodule.exports = function strtotime(text, now) {\n\t  //  discuss at: http://locutus.io/php/strtotime/\n\t  // original by: Caio Ariede (http://caioariede.com)\n\t  // improved by: Kevin van Zonneveld (http://kvz.io)\n\t  // improved by: Caio Ariede (http://caioariede.com)\n\t  // improved by: A. Matías Quezada (http://amatiasq.com)\n\t  // improved by: preuter\n\t  // improved by: Brett Zamir (http://brett-zamir.me)\n\t  // improved by: Mirko Faber\n\t  //    input by: David\n\t  // bugfixed by: Wagner B. Soares\n\t  // bugfixed by: Artur Tchernychev\n\t  // bugfixed by: Stephan Bösch-Plepelits (http://github.com/plepe)\n\t  //      note 1: Examples all have a fixed timestamp to prevent\n\t  //      note 1: tests to fail because of variable time(zones)\n\t  //   example 1: strtotime('+1 day', 1129633200)\n\t  //   returns 1: 1129719600\n\t  //   example 2: strtotime('+1 week 2 days 4 hours 2 seconds', 1129633200)\n\t  //   returns 2: 1130425202\n\t  //   example 3: strtotime('last month', 1129633200)\n\t  //   returns 3: 1127041200\n\t  //   example 4: strtotime('2009-05-04 08:30:00 GMT')\n\t  //   returns 4: 1241425800\n\t  //   example 5: strtotime('2009-05-04 08:30:00+00')\n\t  //   returns 5: 1241425800\n\t  //   example 6: strtotime('2009-05-04 08:30:00+02:00')\n\t  //   returns 6: 1241418600\n\t  //   example 7: strtotime('2009-05-04T08:30:00Z')\n\t  //   returns 7: 1241425800\n\n\t  var parsed;\n\t  var match;\n\t  var today;\n\t  var year;\n\t  var date;\n\t  var days;\n\t  var ranges;\n\t  var len;\n\t  var times;\n\t  var regex;\n\t  var i;\n\t  var fail = false;\n\n\t  if (!text) {\n\t    return fail;\n\t  }\n\n\t  // Unecessary spaces\n\t  text = text.replace(/^\\s+|\\s+$/g, '').replace(/\\s{2,}/g, ' ').replace(/[\\t\\r\\n]/g, '').toLowerCase();\n\n\t  // in contrast to php, js Date.parse function interprets:\n\t  // dates given as yyyy-mm-dd as in timezone: UTC,\n\t  // dates with \".\" or \"-\" as MDY instead of DMY\n\t  // dates with two-digit years differently\n\t  // etc...etc...\n\t  // ...therefore we manually parse lots of common date formats\n\t  var pattern = new RegExp(['^(\\\\d{1,4})', '([\\\\-\\\\.\\\\/:])', '(\\\\d{1,2})', '([\\\\-\\\\.\\\\/:])', '(\\\\d{1,4})', '(?:\\\\s(\\\\d{1,2}):(\\\\d{2})?:?(\\\\d{2})?)?', '(?:\\\\s([A-Z]+)?)?$'].join(''));\n\t  match = text.match(pattern);\n\n\t  if (match && match[2] === match[4]) {\n\t    if (match[1] > 1901) {\n\t      switch (match[2]) {\n\t        case '-':\n\t          // YYYY-M-D\n\t          if (match[3] > 12 || match[5] > 31) {\n\t            return fail;\n\t          }\n\n\t          return new Date(match[1], parseInt(match[3], 10) - 1, match[5], match[6] || 0, match[7] || 0, match[8] || 0, match[9] || 0) / 1000;\n\t        case '.':\n\t          // YYYY.M.D is not parsed by strtotime()\n\t          return fail;\n\t        case '/':\n\t          // YYYY/M/D\n\t          if (match[3] > 12 || match[5] > 31) {\n\t            return fail;\n\t          }\n\n\t          return new Date(match[1], parseInt(match[3], 10) - 1, match[5], match[6] || 0, match[7] || 0, match[8] || 0, match[9] || 0) / 1000;\n\t      }\n\t    } else if (match[5] > 1901) {\n\t      switch (match[2]) {\n\t        case '-':\n\t          // D-M-YYYY\n\t          if (match[3] > 12 || match[1] > 31) {\n\t            return fail;\n\t          }\n\n\t          return new Date(match[5], parseInt(match[3], 10) - 1, match[1], match[6] || 0, match[7] || 0, match[8] || 0, match[9] || 0) / 1000;\n\t        case '.':\n\t          // D.M.YYYY\n\t          if (match[3] > 12 || match[1] > 31) {\n\t            return fail;\n\t          }\n\n\t          return new Date(match[5], parseInt(match[3], 10) - 1, match[1], match[6] || 0, match[7] || 0, match[8] || 0, match[9] || 0) / 1000;\n\t        case '/':\n\t          // M/D/YYYY\n\t          if (match[1] > 12 || match[3] > 31) {\n\t            return fail;\n\t          }\n\n\t          return new Date(match[5], parseInt(match[1], 10) - 1, match[3], match[6] || 0, match[7] || 0, match[8] || 0, match[9] || 0) / 1000;\n\t      }\n\t    } else {\n\t      switch (match[2]) {\n\t        case '-':\n\t          // YY-M-D\n\t          if (match[3] > 12 || match[5] > 31 || match[1] < 70 && match[1] > 38) {\n\t            return fail;\n\t          }\n\n\t          year = match[1] >= 0 && match[1] <= 38 ? +match[1] + 2000 : match[1];\n\t          return new Date(year, parseInt(match[3], 10) - 1, match[5], match[6] || 0, match[7] || 0, match[8] || 0, match[9] || 0) / 1000;\n\t        case '.':\n\t          // D.M.YY or H.MM.SS\n\t          if (match[5] >= 70) {\n\t            // D.M.YY\n\t            if (match[3] > 12 || match[1] > 31) {\n\t              return fail;\n\t            }\n\n\t            return new Date(match[5], parseInt(match[3], 10) - 1, match[1], match[6] || 0, match[7] || 0, match[8] || 0, match[9] || 0) / 1000;\n\t          }\n\t          if (match[5] < 60 && !match[6]) {\n\t            // H.MM.SS\n\t            if (match[1] > 23 || match[3] > 59) {\n\t              return fail;\n\t            }\n\n\t            today = new Date();\n\t            return new Date(today.getFullYear(), today.getMonth(), today.getDate(), match[1] || 0, match[3] || 0, match[5] || 0, match[9] || 0) / 1000;\n\t          }\n\n\t          // invalid format, cannot be parsed\n\t          return fail;\n\t        case '/':\n\t          // M/D/YY\n\t          if (match[1] > 12 || match[3] > 31 || match[5] < 70 && match[5] > 38) {\n\t            return fail;\n\t          }\n\n\t          year = match[5] >= 0 && match[5] <= 38 ? +match[5] + 2000 : match[5];\n\t          return new Date(year, parseInt(match[1], 10) - 1, match[3], match[6] || 0, match[7] || 0, match[8] || 0, match[9] || 0) / 1000;\n\t        case ':':\n\t          // HH:MM:SS\n\t          if (match[1] > 23 || match[3] > 59 || match[5] > 59) {\n\t            return fail;\n\t          }\n\n\t          today = new Date();\n\t          return new Date(today.getFullYear(), today.getMonth(), today.getDate(), match[1] || 0, match[3] || 0, match[5] || 0) / 1000;\n\t      }\n\t    }\n\t  }\n\n\t  // other formats and \"now\" should be parsed by Date.parse()\n\t  if (text === 'now') {\n\t    return now === null || isNaN(now) ? new Date().getTime() / 1000 | 0 : now | 0;\n\t  }\n\t  if (!isNaN(parsed = Date.parse(text))) {\n\t    return parsed / 1000 | 0;\n\t  }\n\t  // Browsers !== Chrome have problems parsing ISO 8601 date strings, as they do\n\t  // not accept lower case characters, space, or shortened time zones.\n\t  // Therefore, fix these problems and try again.\n\t  // Examples:\n\t  //   2015-04-15 20:33:59+02\n\t  //   2015-04-15 20:33:59z\n\t  //   2015-04-15t20:33:59+02:00\n\t  pattern = new RegExp(['^([0-9]{4}-[0-9]{2}-[0-9]{2})', '[ t]', '([0-9]{2}:[0-9]{2}:[0-9]{2}(\\\\.[0-9]+)?)', '([\\\\+-][0-9]{2}(:[0-9]{2})?|z)'].join(''));\n\t  match = text.match(pattern);\n\t  if (match) {\n\t    // @todo: time zone information\n\t    if (match[4] === 'z') {\n\t      match[4] = 'Z';\n\t    } else if (match[4].match(/^([+-][0-9]{2})$/)) {\n\t      match[4] = match[4] + ':00';\n\t    }\n\n\t    if (!isNaN(parsed = Date.parse(match[1] + 'T' + match[2] + match[4]))) {\n\t      return parsed / 1000 | 0;\n\t    }\n\t  }\n\n\t  date = now ? new Date(now * 1000) : new Date();\n\t  days = {\n\t    'sun': 0,\n\t    'mon': 1,\n\t    'tue': 2,\n\t    'wed': 3,\n\t    'thu': 4,\n\t    'fri': 5,\n\t    'sat': 6\n\t  };\n\t  ranges = {\n\t    'yea': 'FullYear',\n\t    'mon': 'Month',\n\t    'day': 'Date',\n\t    'hou': 'Hours',\n\t    'min': 'Minutes',\n\t    'sec': 'Seconds'\n\t  };\n\n\t  function lastNext(type, range, modifier) {\n\t    var diff;\n\t    var day = days[range];\n\n\t    if (typeof day !== 'undefined') {\n\t      diff = day - date.getDay();\n\n\t      if (diff === 0) {\n\t        diff = 7 * modifier;\n\t      } else if (diff > 0 && type === 'last') {\n\t        diff -= 7;\n\t      } else if (diff < 0 && type === 'next') {\n\t        diff += 7;\n\t      }\n\n\t      date.setDate(date.getDate() + diff);\n\t    }\n\t  }\n\n\t  function process(val) {\n\t    // @todo: Reconcile this with regex using \\s, taking into account\n\t    // browser issues with split and regexes\n\t    var splt = val.split(' ');\n\t    var type = splt[0];\n\t    var range = splt[1].substring(0, 3);\n\t    var typeIsNumber = /\\d+/.test(type);\n\t    var ago = splt[2] === 'ago';\n\t    var num = (type === 'last' ? -1 : 1) * (ago ? -1 : 1);\n\n\t    if (typeIsNumber) {\n\t      num *= parseInt(type, 10);\n\t    }\n\n\t    if (ranges.hasOwnProperty(range) && !splt[1].match(/^mon(day|\\.)?$/i)) {\n\t      return date['set' + ranges[range]](date['get' + ranges[range]]() + num);\n\t    }\n\n\t    if (range === 'wee') {\n\t      return date.setDate(date.getDate() + num * 7);\n\t    }\n\n\t    if (type === 'next' || type === 'last') {\n\t      lastNext(type, range, num);\n\t    } else if (!typeIsNumber) {\n\t      return false;\n\t    }\n\n\t    return true;\n\t  }\n\n\t  times = '(years?|months?|weeks?|days?|hours?|minutes?|min|seconds?|sec' + '|sunday|sun\\\\.?|monday|mon\\\\.?|tuesday|tue\\\\.?|wednesday|wed\\\\.?' + '|thursday|thu\\\\.?|friday|fri\\\\.?|saturday|sat\\\\.?)';\n\t  regex = '([+-]?\\\\d+\\\\s' + times + '|' + '(last|next)\\\\s' + times + ')(\\\\sago)?';\n\n\t  match = text.match(new RegExp(regex, 'gi'));\n\t  if (!match) {\n\t    return fail;\n\t  }\n\n\t  for (i = 0, len = match.length; i < len; i++) {\n\t    if (!process(match[i])) {\n\t      return fail;\n\t    }\n\t  }\n\n\t  return date.getTime() / 1000;\n\t};\n\t//# sourceMappingURL=strtotime.js.map\n\n/***/ },\n/* 15 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\n\tmodule.exports = function date(format, timestamp) {\n\t  //  discuss at: http://locutus.io/php/date/\n\t  // original by: Carlos R. L. Rodrigues (http://www.jsfromhell.com)\n\t  // original by: gettimeofday\n\t  //    parts by: Peter-Paul Koch (http://www.quirksmode.org/js/beat.html)\n\t  // improved by: Kevin van Zonneveld (http://kvz.io)\n\t  // improved by: MeEtc (http://yass.meetcweb.com)\n\t  // improved by: Brad Touesnard\n\t  // improved by: Tim Wiel\n\t  // improved by: Bryan Elliott\n\t  // improved by: David Randall\n\t  // improved by: Theriault (https://github.com/Theriault)\n\t  // improved by: Theriault (https://github.com/Theriault)\n\t  // improved by: Brett Zamir (http://brett-zamir.me)\n\t  // improved by: Theriault (https://github.com/Theriault)\n\t  // improved by: Thomas Beaucourt (http://www.webapp.fr)\n\t  // improved by: JT\n\t  // improved by: Theriault (https://github.com/Theriault)\n\t  // improved by: Rafał Kukawski (http://blog.kukawski.pl)\n\t  // improved by: Theriault (https://github.com/Theriault)\n\t  //    input by: Brett Zamir (http://brett-zamir.me)\n\t  //    input by: majak\n\t  //    input by: Alex\n\t  //    input by: Martin\n\t  //    input by: Alex Wilson\n\t  //    input by: Haravikk\n\t  // bugfixed by: Kevin van Zonneveld (http://kvz.io)\n\t  // bugfixed by: majak\n\t  // bugfixed by: Kevin van Zonneveld (http://kvz.io)\n\t  // bugfixed by: Brett Zamir (http://brett-zamir.me)\n\t  // bugfixed by: omid (http://locutus.io/php/380:380#comment_137122)\n\t  // bugfixed by: Chris (http://www.devotis.nl/)\n\t  //      note 1: Uses global: locutus to store the default timezone\n\t  //      note 1: Although the function potentially allows timezone info\n\t  //      note 1: (see notes), it currently does not set\n\t  //      note 1: per a timezone specified by date_default_timezone_set(). Implementers might use\n\t  //      note 1: $locutus.currentTimezoneOffset and\n\t  //      note 1: $locutus.currentTimezoneDST set by that function\n\t  //      note 1: in order to adjust the dates in this function\n\t  //      note 1: (or our other date functions!) accordingly\n\t  //   example 1: date('H:m:s \\\\m \\\\i\\\\s \\\\m\\\\o\\\\n\\\\t\\\\h', 1062402400)\n\t  //   returns 1: '07:09:40 m is month'\n\t  //   example 2: date('F j, Y, g:i a', 1062462400)\n\t  //   returns 2: 'September 2, 2003, 12:26 am'\n\t  //   example 3: date('Y W o', 1062462400)\n\t  //   returns 3: '2003 36 2003'\n\t  //   example 4: var $x = date('Y m d', (new Date()).getTime() / 1000)\n\t  //   example 4: $x = $x + ''\n\t  //   example 4: var $result = $x.length // 2009 01 09\n\t  //   returns 4: 10\n\t  //   example 5: date('W', 1104534000)\n\t  //   returns 5: '52'\n\t  //   example 6: date('B t', 1104534000)\n\t  //   returns 6: '999 31'\n\t  //   example 7: date('W U', 1293750000.82); // 2010-12-31\n\t  //   returns 7: '52 1293750000'\n\t  //   example 8: date('W', 1293836400); // 2011-01-01\n\t  //   returns 8: '52'\n\t  //   example 9: date('W Y-m-d', 1293974054); // 2011-01-02\n\t  //   returns 9: '52 2011-01-02'\n\t  //        test: skip-1 skip-2 skip-5\n\n\t  var jsdate, f;\n\t  // Keep this here (works, but for code commented-out below for file size reasons)\n\t  // var tal= [];\n\t  var txtWords = ['Sun', 'Mon', 'Tues', 'Wednes', 'Thurs', 'Fri', 'Satur', 'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n\t  // trailing backslash -> (dropped)\n\t  // a backslash followed by any character (including backslash) -> the character\n\t  // empty string -> empty string\n\t  var formatChr = /\\\\?(.?)/gi;\n\t  var formatChrCb = function formatChrCb(t, s) {\n\t    return f[t] ? f[t]() : s;\n\t  };\n\t  var _pad = function _pad(n, c) {\n\t    n = String(n);\n\t    while (n.length < c) {\n\t      n = '0' + n;\n\t    }\n\t    return n;\n\t  };\n\t  f = {\n\t    // Day\n\t    d: function d() {\n\t      // Day of month w/leading 0; 01..31\n\t      return _pad(f.j(), 2);\n\t    },\n\t    D: function D() {\n\t      // Shorthand day name; Mon...Sun\n\t      return f.l().slice(0, 3);\n\t    },\n\t    j: function j() {\n\t      // Day of month; 1..31\n\t      return jsdate.getDate();\n\t    },\n\t    l: function l() {\n\t      // Full day name; Monday...Sunday\n\t      return txtWords[f.w()] + 'day';\n\t    },\n\t    N: function N() {\n\t      // ISO-8601 day of week; 1[Mon]..7[Sun]\n\t      return f.w() || 7;\n\t    },\n\t    S: function S() {\n\t      // Ordinal suffix for day of month; st, nd, rd, th\n\t      var j = f.j();\n\t      var i = j % 10;\n\t      if (i <= 3 && parseInt(j % 100 / 10, 10) === 1) {\n\t        i = 0;\n\t      }\n\t      return ['st', 'nd', 'rd'][i - 1] || 'th';\n\t    },\n\t    w: function w() {\n\t      // Day of week; 0[Sun]..6[Sat]\n\t      return jsdate.getDay();\n\t    },\n\t    z: function z() {\n\t      // Day of year; 0..365\n\t      var a = new Date(f.Y(), f.n() - 1, f.j());\n\t      var b = new Date(f.Y(), 0, 1);\n\t      return Math.round((a - b) / 864e5);\n\t    },\n\n\t    // Week\n\t    W: function W() {\n\t      // ISO-8601 week number\n\t      var a = new Date(f.Y(), f.n() - 1, f.j() - f.N() + 3);\n\t      var b = new Date(a.getFullYear(), 0, 4);\n\t      return _pad(1 + Math.round((a - b) / 864e5 / 7), 2);\n\t    },\n\n\t    // Month\n\t    F: function F() {\n\t      // Full month name; January...December\n\t      return txtWords[6 + f.n()];\n\t    },\n\t    m: function m() {\n\t      // Month w/leading 0; 01...12\n\t      return _pad(f.n(), 2);\n\t    },\n\t    M: function M() {\n\t      // Shorthand month name; Jan...Dec\n\t      return f.F().slice(0, 3);\n\t    },\n\t    n: function n() {\n\t      // Month; 1...12\n\t      return jsdate.getMonth() + 1;\n\t    },\n\t    t: function t() {\n\t      // Days in month; 28...31\n\t      return new Date(f.Y(), f.n(), 0).getDate();\n\t    },\n\n\t    // Year\n\t    L: function L() {\n\t      // Is leap year?; 0 or 1\n\t      var j = f.Y();\n\t      return j % 4 === 0 & j % 100 !== 0 | j % 400 === 0;\n\t    },\n\t    o: function o() {\n\t      // ISO-8601 year\n\t      var n = f.n();\n\t      var W = f.W();\n\t      var Y = f.Y();\n\t      return Y + (n === 12 && W < 9 ? 1 : n === 1 && W > 9 ? -1 : 0);\n\t    },\n\t    Y: function Y() {\n\t      // Full year; e.g. 1980...2010\n\t      return jsdate.getFullYear();\n\t    },\n\t    y: function y() {\n\t      // Last two digits of year; 00...99\n\t      return f.Y().toString().slice(-2);\n\t    },\n\n\t    // Time\n\t    a: function a() {\n\t      // am or pm\n\t      return jsdate.getHours() > 11 ? 'pm' : 'am';\n\t    },\n\t    A: function A() {\n\t      // AM or PM\n\t      return f.a().toUpperCase();\n\t    },\n\t    B: function B() {\n\t      // Swatch Internet time; 000..999\n\t      var H = jsdate.getUTCHours() * 36e2;\n\t      // Hours\n\t      var i = jsdate.getUTCMinutes() * 60;\n\t      // Minutes\n\t      // Seconds\n\t      var s = jsdate.getUTCSeconds();\n\t      return _pad(Math.floor((H + i + s + 36e2) / 86.4) % 1e3, 3);\n\t    },\n\t    g: function g() {\n\t      // 12-Hours; 1..12\n\t      return f.G() % 12 || 12;\n\t    },\n\t    G: function G() {\n\t      // 24-Hours; 0..23\n\t      return jsdate.getHours();\n\t    },\n\t    h: function h() {\n\t      // 12-Hours w/leading 0; 01..12\n\t      return _pad(f.g(), 2);\n\t    },\n\t    H: function H() {\n\t      // 24-Hours w/leading 0; 00..23\n\t      return _pad(f.G(), 2);\n\t    },\n\t    i: function i() {\n\t      // Minutes w/leading 0; 00..59\n\t      return _pad(jsdate.getMinutes(), 2);\n\t    },\n\t    s: function s() {\n\t      // Seconds w/leading 0; 00..59\n\t      return _pad(jsdate.getSeconds(), 2);\n\t    },\n\t    u: function u() {\n\t      // Microseconds; 000000-999000\n\t      return _pad(jsdate.getMilliseconds() * 1000, 6);\n\t    },\n\n\t    // Timezone\n\t    e: function e() {\n\t      // Timezone identifier; e.g. Atlantic/Azores, ...\n\t      // The following works, but requires inclusion of the very large\n\t      // timezone_abbreviations_list() function.\n\t      /*              return that.date_default_timezone_get();\n\t       */\n\t      var msg = 'Not supported (see source code of date() for timezone on how to add support)';\n\t      throw new Error(msg);\n\t    },\n\t    I: function I() {\n\t      // DST observed?; 0 or 1\n\t      // Compares Jan 1 minus Jan 1 UTC to Jul 1 minus Jul 1 UTC.\n\t      // If they are not equal, then DST is observed.\n\t      var a = new Date(f.Y(), 0);\n\t      // Jan 1\n\t      var c = Date.UTC(f.Y(), 0);\n\t      // Jan 1 UTC\n\t      var b = new Date(f.Y(), 6);\n\t      // Jul 1\n\t      // Jul 1 UTC\n\t      var d = Date.UTC(f.Y(), 6);\n\t      return a - c !== b - d ? 1 : 0;\n\t    },\n\t    O: function O() {\n\t      // Difference to GMT in hour format; e.g. +0200\n\t      var tzo = jsdate.getTimezoneOffset();\n\t      var a = Math.abs(tzo);\n\t      return (tzo > 0 ? '-' : '+') + _pad(Math.floor(a / 60) * 100 + a % 60, 4);\n\t    },\n\t    P: function P() {\n\t      // Difference to GMT w/colon; e.g. +02:00\n\t      var O = f.O();\n\t      return O.substr(0, 3) + ':' + O.substr(3, 2);\n\t    },\n\t    T: function T() {\n\t      // The following works, but requires inclusion of the very\n\t      // large timezone_abbreviations_list() function.\n\t      /*              var abbr, i, os, _default;\n\t      if (!tal.length) {\n\t        tal = that.timezone_abbreviations_list();\n\t      }\n\t      if ($locutus && $locutus.default_timezone) {\n\t        _default = $locutus.default_timezone;\n\t        for (abbr in tal) {\n\t          for (i = 0; i < tal[abbr].length; i++) {\n\t            if (tal[abbr][i].timezone_id === _default) {\n\t              return abbr.toUpperCase();\n\t            }\n\t          }\n\t        }\n\t      }\n\t      for (abbr in tal) {\n\t        for (i = 0; i < tal[abbr].length; i++) {\n\t          os = -jsdate.getTimezoneOffset() * 60;\n\t          if (tal[abbr][i].offset === os) {\n\t            return abbr.toUpperCase();\n\t          }\n\t        }\n\t      }\n\t      */\n\t      return 'UTC';\n\t    },\n\t    Z: function Z() {\n\t      // Timezone offset in seconds (-43200...50400)\n\t      return -jsdate.getTimezoneOffset() * 60;\n\t    },\n\n\t    // Full Date/Time\n\t    c: function c() {\n\t      // ISO-8601 date.\n\t      return 'Y-m-d\\\\TH:i:sP'.replace(formatChr, formatChrCb);\n\t    },\n\t    r: function r() {\n\t      // RFC 2822\n\t      return 'D, d M Y H:i:s O'.replace(formatChr, formatChrCb);\n\t    },\n\t    U: function U() {\n\t      // Seconds since UNIX epoch\n\t      return jsdate / 1000 | 0;\n\t    }\n\t  };\n\n\t  var _date = function _date(format, timestamp) {\n\t    jsdate = timestamp === undefined ? new Date() // Not provided\n\t    : timestamp instanceof Date ? new Date(timestamp) // JS Date()\n\t    : new Date(timestamp * 1000) // UNIX timestamp (auto-convert to int)\n\t    ;\n\t    return format.replace(formatChr, formatChrCb);\n\t  };\n\n\t  return _date(format, timestamp);\n\t};\n\t//# sourceMappingURL=date.js.map\n\n/***/ },\n/* 16 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\n\tmodule.exports = function boolval(mixedVar) {\n\t  // original by: Will Rowe\n\t  //   example 1: boolval(true)\n\t  //   returns 1: true\n\t  //   example 2: boolval(false)\n\t  //   returns 2: false\n\t  //   example 3: boolval(0)\n\t  //   returns 3: false\n\t  //   example 4: boolval(0.0)\n\t  //   returns 4: false\n\t  //   example 5: boolval('')\n\t  //   returns 5: false\n\t  //   example 6: boolval('0')\n\t  //   returns 6: false\n\t  //   example 7: boolval([])\n\t  //   returns 7: false\n\t  //   example 8: boolval('')\n\t  //   returns 8: false\n\t  //   example 9: boolval(null)\n\t  //   returns 9: false\n\t  //   example 10: boolval(undefined)\n\t  //   returns 10: false\n\t  //   example 11: boolval('true')\n\t  //   returns 11: true\n\n\t  if (mixedVar === false) {\n\t    return false;\n\t  }\n\n\t  if (mixedVar === 0 || mixedVar === 0.0) {\n\t    return false;\n\t  }\n\n\t  if (mixedVar === '' || mixedVar === '0') {\n\t    return false;\n\t  }\n\n\t  if (Array.isArray(mixedVar) && mixedVar.length === 0) {\n\t    return false;\n\t  }\n\n\t  if (mixedVar === null || mixedVar === undefined) {\n\t    return false;\n\t  }\n\n\t  return true;\n\t};\n\t//# sourceMappingURL=boolval.js.map\n\n/***/ },\n/* 17 */\n/***/ function(module, exports) {\n\n\tmodule.exports = function(Twig) {\n\t    'use strict';\n\n\t    Twig.Templates.registerLoader('ajax', function(location, params, callback, error_callback) {\n\t        var template,\n\t            xmlhttp,\n\t            precompiled = params.precompiled,\n\t            parser = this.parsers[params.parser] || this.parser.twig;\n\n\t        if (typeof XMLHttpRequest === \"undefined\") {\n\t            throw new Twig.Error('Unsupported platform: Unable to do ajax requests ' +\n\t                                 'because there is no \"XMLHTTPRequest\" implementation');\n\t        }\n\n\t        xmlhttp = new XMLHttpRequest();\n\t        xmlhttp.onreadystatechange = function() {\n\t            var data = null;\n\n\t            if(xmlhttp.readyState === 4) {\n\t                if (xmlhttp.status === 200 || (window.cordova && xmlhttp.status == 0)) {\n\t                    Twig.log.debug(\"Got template \", xmlhttp.responseText);\n\n\t                    if (precompiled === true) {\n\t                        data = JSON.parse(xmlhttp.responseText);\n\t                    } else {\n\t                        data = xmlhttp.responseText;\n\t                    }\n\n\t                    params.url = location;\n\t                    params.data = data;\n\n\t                    template = parser.call(this, params);\n\n\t                    if (typeof callback === 'function') {\n\t                        callback(template);\n\t                    }\n\t                } else {\n\t                    if (typeof error_callback === 'function') {\n\t                        error_callback(xmlhttp);\n\t                    }\n\t                }\n\t            }\n\t        };\n\t        xmlhttp.open(\"GET\", location, !!params.async);\n\t        xmlhttp.send();\n\n\t        if (params.async) {\n\t            // TODO: return deferred promise\n\t            return true;\n\t        } else {\n\t            return template;\n\t        }\n\t    });\n\n\t};\n\n\n/***/ },\n/* 18 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = function(Twig) {\n\t    'use strict';\n\n\t    var fs, path;\n\n\t    try {\n\t    \t// require lib dependencies at runtime\n\t    \tfs = __webpack_require__(19);\n\t    \tpath = __webpack_require__(20);\n\t    } catch (e) {\n\t    \t// NOTE: this is in a try/catch to avoid errors cross platform\n\t    }\n\n\t    Twig.Templates.registerLoader('fs', function(location, params, callback, error_callback) {\n\t        var template,\n\t            data = null,\n\t            precompiled = params.precompiled,\n\t            parser = this.parsers[params.parser] || this.parser.twig;\n\n\t        if (!fs || !path) {\n\t            throw new Twig.Error('Unsupported platform: Unable to load from file ' +\n\t                                 'because there is no \"fs\" or \"path\" implementation');\n\t        }\n\n\t        var loadTemplateFn = function(err, data) {\n\t            if (err) {\n\t                if (typeof error_callback === 'function') {\n\t                    error_callback(err);\n\t                }\n\t                return;\n\t            }\n\n\t            if (precompiled === true) {\n\t                data = JSON.parse(data);\n\t            }\n\n\t            params.data = data;\n\t            params.path = params.path || location;\n\n\t            // template is in data\n\t            template = parser.call(this, params);\n\n\t            if (typeof callback === 'function') {\n\t                callback(template);\n\t            }\n\t        };\n\t        params.path = params.path || location;\n\n\t        if (params.async) {\n\t            fs.stat(params.path, function (err, stats) {\n\t                if (err || !stats.isFile()) {\n\t                    if (typeof error_callback === 'function') {\n\t                        error_callback(new Twig.Error('Unable to find template file ' + params.path));\n\t                    }\n\t                    return;\n\t                }\n\t                fs.readFile(params.path, 'utf8', loadTemplateFn);\n\t            });\n\t            // TODO: return deferred promise\n\t            return true;\n\t        } else {\n\t            try {\n\t                if (!fs.statSync(params.path).isFile()) {\n\t                    throw new Twig.Error('Unable to find template file ' + params.path);\n\t                }\n\t            } catch (err) {\n\t                throw new Twig.Error('Unable to find template file ' + params.path);\n\t            }\n\t            data = fs.readFileSync(params.path, 'utf8');\n\t            loadTemplateFn(undefined, data);\n\t            return template\n\t        }\n\t    });\n\n\t};\n\n\n/***/ },\n/* 19 */\n/***/ function(module, exports) {\n\n\tmodule.exports = __webpack_require__(28);\n\n/***/ },\n/* 20 */\n/***/ function(module, exports) {\n\n\tmodule.exports = __webpack_require__(29);\n\n/***/ },\n/* 21 */\n/***/ function(module, exports) {\n\n\t// ## twig.logic.js\n\t//\n\t// This file handles tokenizing, compiling and parsing logic tokens. {% ... %}\n\tmodule.exports = function (Twig) {\n\t    \"use strict\";\n\n\t    /**\n\t     * Namespace for logic handling.\n\t     */\n\t    Twig.logic = {};\n\n\t    /**\n\t     * Logic token types.\n\t     */\n\t    Twig.logic.type = {\n\t        if_:       'Twig.logic.type.if',\n\t        endif:     'Twig.logic.type.endif',\n\t        for_:      'Twig.logic.type.for',\n\t        endfor:    'Twig.logic.type.endfor',\n\t        else_:     'Twig.logic.type.else',\n\t        elseif:    'Twig.logic.type.elseif',\n\t        set:       'Twig.logic.type.set',\n\t        setcapture:'Twig.logic.type.setcapture',\n\t        endset:    'Twig.logic.type.endset',\n\t        filter:    'Twig.logic.type.filter',\n\t        endfilter: 'Twig.logic.type.endfilter',\n\t        shortblock: 'Twig.logic.type.shortblock',\n\t        block:     'Twig.logic.type.block',\n\t        endblock:  'Twig.logic.type.endblock',\n\t        extends_:  'Twig.logic.type.extends',\n\t        use:       'Twig.logic.type.use',\n\t        include:   'Twig.logic.type.include',\n\t        spaceless: 'Twig.logic.type.spaceless',\n\t        endspaceless: 'Twig.logic.type.endspaceless',\n\t        macro:     'Twig.logic.type.macro',\n\t        endmacro:  'Twig.logic.type.endmacro',\n\t        import_:   'Twig.logic.type.import',\n\t        from:      'Twig.logic.type.from',\n\t        embed:     'Twig.logic.type.embed',\n\t        endembed:  'Twig.logic.type.endembed'\n\t    };\n\n\n\t    // Regular expressions for handling logic tokens.\n\t    //\n\t    // Properties:\n\t    //\n\t    //      type:  The type of expression this matches\n\t    //\n\t    //      regex: A regular expression that matches the format of the token\n\t    //\n\t    //      next:  What logic tokens (if any) pop this token off the logic stack. If empty, the\n\t    //             logic token is assumed to not require an end tag and isn't push onto the stack.\n\t    //\n\t    //      open:  Does this tag open a logic expression or is it standalone. For example,\n\t    //             {% endif %} cannot exist without an opening {% if ... %} tag, so open = false.\n\t    //\n\t    //  Functions:\n\t    //\n\t    //      compile: A function that handles compiling the token into an output token ready for\n\t    //               parsing with the parse function.\n\t    //\n\t    //      parse:   A function that parses the compiled token into output (HTML / whatever the\n\t    //               template represents).\n\t    Twig.logic.definitions = [\n\t        {\n\t            /**\n\t             * If type logic tokens.\n\t             *\n\t             *  Format: {% if expression %}\n\t             */\n\t            type: Twig.logic.type.if_,\n\t            regex: /^if\\s+([\\s\\S]+)$/,\n\t            next: [\n\t                Twig.logic.type.else_,\n\t                Twig.logic.type.elseif,\n\t                Twig.logic.type.endif\n\t            ],\n\t            open: true,\n\t            compile: function (token) {\n\t                var expression = token.match[1];\n\t                // Compile the expression.\n\t                token.stack = Twig.expression.compile.apply(this, [{\n\t                    type:  Twig.expression.type.expression,\n\t                    value: expression\n\t                }]).stack;\n\t                delete token.match;\n\t                return token;\n\t            },\n\t            parse: function (token, context, chain) {\n\t                var that = this;\n\n\t                return Twig.expression.parseAsync.apply(this, [token.stack, context])\n\t                .then(function(result) {\n\t                    chain = true;\n\n\t                    if (Twig.lib.boolval(result)) {\n\t                        chain = false;\n\n\t                        return Twig.parseAsync.apply(that, [token.output, context]);\n\t                    }\n\n\t                    return '';\n\t                })\n\t                .then(function(output) {\n\t                    return {\n\t                        chain: chain,\n\t                        output: output\n\t                    };\n\t                });\n\t            }\n\t        },\n\t        {\n\t            /**\n\t             * Else if type logic tokens.\n\t             *\n\t             *  Format: {% elseif expression %}\n\t             */\n\t            type: Twig.logic.type.elseif,\n\t            regex: /^elseif\\s+([^\\s].*)$/,\n\t            next: [\n\t                Twig.logic.type.else_,\n\t                Twig.logic.type.elseif,\n\t                Twig.logic.type.endif\n\t            ],\n\t            open: false,\n\t            compile: function (token) {\n\t                var expression = token.match[1];\n\t                // Compile the expression.\n\t                token.stack = Twig.expression.compile.apply(this, [{\n\t                    type:  Twig.expression.type.expression,\n\t                    value: expression\n\t                }]).stack;\n\t                delete token.match;\n\t                return token;\n\t            },\n\t            parse: function (token, context, chain) {\n\t                var that = this;\n\n\t                return Twig.expression.parseAsync.apply(this, [token.stack, context])\n\t                .then(function(result) {\n\t                    if (chain && Twig.lib.boolval(result)) {\n\t                        chain = false;\n\n\t                        return Twig.parseAsync.apply(that, [token.output, context]);\n\t                    }\n\n\t                    return '';\n\t                })\n\t                .then(function(output) {\n\t                    return {\n\t                        chain: chain,\n\t                        output: output\n\t                    }\n\t                });\n\t            }\n\t        },\n\t        {\n\t            /**\n\t             * Else if type logic tokens.\n\t             *\n\t             *  Format: {% elseif expression %}\n\t             */\n\t            type: Twig.logic.type.else_,\n\t            regex: /^else$/,\n\t            next: [\n\t                Twig.logic.type.endif,\n\t                Twig.logic.type.endfor\n\t            ],\n\t            open: false,\n\t            parse: function (token, context, chain) {\n\t                var promise = Twig.Promise.resolve('');\n\n\t                if (chain) {\n\t                    promise = Twig.parseAsync.apply(this, [token.output, context]);\n\t                }\n\n\t                return promise.then(function(output) {\n\t                    return {\n\t                        chain: chain,\n\t                        output: output\n\t                    };\n\t                });\n\t            }\n\t        },\n\t        {\n\t            /**\n\t             * End if type logic tokens.\n\t             *\n\t             *  Format: {% endif %}\n\t             */\n\t            type: Twig.logic.type.endif,\n\t            regex: /^endif$/,\n\t            next: [ ],\n\t            open: false\n\t        },\n\t        {\n\t            /**\n\t             * For type logic tokens.\n\t             *\n\t             *  Format: {% for expression %}\n\t             */\n\t            type: Twig.logic.type.for_,\n\t            regex: /^for\\s+([a-zA-Z0-9_,\\s]+)\\s+in\\s+([^\\s].*?)(?:\\s+if\\s+([^\\s].*))?$/,\n\t            next: [\n\t                Twig.logic.type.else_,\n\t                Twig.logic.type.endfor\n\t            ],\n\t            open: true,\n\t            compile: function (token) {\n\t                var key_value = token.match[1],\n\t                    expression = token.match[2],\n\t                    conditional = token.match[3],\n\t                    kv_split = null;\n\n\t                token.key_var = null;\n\t                token.value_var = null;\n\n\t                if (key_value.indexOf(\",\") >= 0) {\n\t                    kv_split = key_value.split(',');\n\t                    if (kv_split.length === 2) {\n\t                        token.key_var = kv_split[0].trim();\n\t                        token.value_var = kv_split[1].trim();\n\t                    } else {\n\t                        throw new Twig.Error(\"Invalid expression in for loop: \" + key_value);\n\t                    }\n\t                } else {\n\t                    token.value_var = key_value;\n\t                }\n\n\t                // Valid expressions for a for loop\n\t                //   for item     in expression\n\t                //   for key,item in expression\n\n\t                // Compile the expression.\n\t                token.expression = Twig.expression.compile.apply(this, [{\n\t                    type:  Twig.expression.type.expression,\n\t                    value: expression\n\t                }]).stack;\n\n\t                // Compile the conditional (if available)\n\t                if (conditional) {\n\t                    token.conditional = Twig.expression.compile.apply(this, [{\n\t                        type:  Twig.expression.type.expression,\n\t                        value: conditional\n\t                    }]).stack;\n\t                }\n\n\t                delete token.match;\n\t                return token;\n\t            },\n\t            parse: function (token, context, continue_chain) {\n\t                // Parse expression\n\t                var output = [],\n\t                    len,\n\t                    index = 0,\n\t                    keyset,\n\t                    that = this,\n\t                    conditional = token.conditional,\n\t                    buildLoop = function(index, len) {\n\t                        var isConditional = conditional !== undefined;\n\t                        return {\n\t                            index: index+1,\n\t                            index0: index,\n\t                            revindex: isConditional?undefined:len-index,\n\t                            revindex0: isConditional?undefined:len-index-1,\n\t                            first: (index === 0),\n\t                            last: isConditional?undefined:(index === len-1),\n\t                            length: isConditional?undefined:len,\n\t                            parent: context\n\t                        };\n\t                    },\n\t                    // run once for each iteration of the loop\n\t                    loop = function(key, value) {\n\t                        var inner_context = Twig.ChildContext(context);\n\n\t                        inner_context[token.value_var] = value;\n\n\t                        if (token.key_var) {\n\t                            inner_context[token.key_var] = key;\n\t                        }\n\n\t                        // Loop object\n\t                        inner_context.loop = buildLoop(index, len);\n\n\t                        var promise = conditional === undefined ?\n\t                            Twig.Promise.resolve(true) :\n\t                            Twig.expression.parseAsync.apply(that, [conditional, inner_context]);\n\n\t                        promise.then(function(condition) {\n\t                            if (!condition)\n\t                                return;\n\n\t                            return Twig.parseAsync.apply(that, [token.output, inner_context])\n\t                            .then(function(o) {\n\t                                output.push(o);\n\t                                index += 1;\n\t                            });\n\t                        })\n\t                        .then(function() {\n\t                            // Delete loop-related variables from the context\n\t                            delete inner_context['loop'];\n\t                            delete inner_context[token.value_var];\n\t                            delete inner_context[token.key_var];\n\n\t                            // Merge in values that exist in context but have changed\n\t                            // in inner_context.\n\t                            Twig.merge(context, inner_context, true);\n\t                        });\n\t                    };\n\n\n\t                return Twig.expression.parseAsync.apply(this, [token.expression, context])\n\t                .then(function(result) {\n\t                    if (Twig.lib.is('Array', result)) {\n\t                        len = result.length;\n\t                        Twig.async.forEach(result, function (value) {\n\t                            var key = index;\n\n\t                            return loop(key, value);\n\t                        });\n\t                    } else if (Twig.lib.is('Object', result)) {\n\t                        if (result._keys !== undefined) {\n\t                            keyset = result._keys;\n\t                        } else {\n\t                            keyset = Object.keys(result);\n\t                        }\n\t                        len = keyset.length;\n\t                        Twig.forEach(keyset, function(key) {\n\t                            // Ignore the _keys property, it's internal to twig.js\n\t                            if (key === \"_keys\") return;\n\n\t                            loop(key,  result[key]);\n\t                        });\n\t                    }\n\n\t                    // Only allow else statements if no output was generated\n\t                    continue_chain = (output.length === 0);\n\n\t                    return {\n\t                        chain: continue_chain,\n\t                        output: Twig.output.apply(that, [output])\n\t                    };\n\t                });\n\t            }\n\t        },\n\t        {\n\t            /**\n\t             * End if type logic tokens.\n\t             *\n\t             *  Format: {% endif %}\n\t             */\n\t            type: Twig.logic.type.endfor,\n\t            regex: /^endfor$/,\n\t            next: [ ],\n\t            open: false\n\t        },\n\t        {\n\t            /**\n\t             * Set type logic tokens.\n\t             *\n\t             *  Format: {% set key = expression %}\n\t             */\n\t            type: Twig.logic.type.set,\n\t            regex: /^set\\s+([a-zA-Z0-9_,\\s]+)\\s*=\\s*([\\s\\S]+)$/,\n\t            next: [ ],\n\t            open: true,\n\t            compile: function (token) {\n\t                var key = token.match[1].trim(),\n\t                    expression = token.match[2],\n\t                    // Compile the expression.\n\t                    expression_stack  = Twig.expression.compile.apply(this, [{\n\t                        type:  Twig.expression.type.expression,\n\t                        value: expression\n\t                    }]).stack;\n\n\t                token.key = key;\n\t                token.expression = expression_stack;\n\n\t                delete token.match;\n\t                return token;\n\t            },\n\t            parse: function (token, context, continue_chain) {\n\t                var key = token.key;\n\n\t                return Twig.expression.parseAsync.apply(this, [token.expression, context])\n\t                .then(function(value) {\n\t                    if (value === context) {\n\t                        /*  If storing the context in a variable, it needs to be a clone of the current state of context.\n\t                            Otherwise we have a context with infinite recursion.\n\t                            Fixes #341\n\t                        */\n\t                        value = Twig.lib.copy(value);\n\t                    }\n\n\t                    context[key] = value;\n\n\t                    return {\n\t                        chain: continue_chain,\n\t                        context: context\n\t                    };\n\t                });\n\t            }\n\t        },\n\t        {\n\t            /**\n\t             * Set capture type logic tokens.\n\t             *\n\t             *  Format: {% set key %}\n\t             */\n\t            type: Twig.logic.type.setcapture,\n\t            regex: /^set\\s+([a-zA-Z0-9_,\\s]+)$/,\n\t            next: [\n\t                Twig.logic.type.endset\n\t            ],\n\t            open: true,\n\t            compile: function (token) {\n\t                var key = token.match[1].trim();\n\n\t                token.key = key;\n\n\t                delete token.match;\n\t                return token;\n\t            },\n\t            parse: function (token, context, continue_chain) {\n\t                var that = this,\n\t                    key = token.key;\n\n\t                return Twig.parseAsync.apply(this, [token.output, context])\n\t                .then(function(value) {\n\t                    // set on both the global and local context\n\t                    that.context[key] = value;\n\t                    context[key] = value;\n\n\t                    return {\n\t                        chain: continue_chain,\n\t                        context: context\n\t                    };\n\t                });\n\t            }\n\t        },\n\t        {\n\t            /**\n\t             * End set type block logic tokens.\n\t             *\n\t             *  Format: {% endset %}\n\t             */\n\t            type: Twig.logic.type.endset,\n\t            regex: /^endset$/,\n\t            next: [ ],\n\t            open: false\n\t        },\n\t        {\n\t            /**\n\t             * Filter logic tokens.\n\t             *\n\t             *  Format: {% filter upper %} or {% filter lower|escape %}\n\t             */\n\t            type: Twig.logic.type.filter,\n\t            regex: /^filter\\s+(.+)$/,\n\t            next: [\n\t                Twig.logic.type.endfilter\n\t            ],\n\t            open: true,\n\t            compile: function (token) {\n\t                var expression = \"|\" + token.match[1].trim();\n\t                // Compile the expression.\n\t                token.stack = Twig.expression.compile.apply(this, [{\n\t                    type:  Twig.expression.type.expression,\n\t                    value: expression\n\t                }]).stack;\n\t                delete token.match;\n\t                return token;\n\t            },\n\t            parse: function (token, context, chain) {\n\t                return Twig.parseAsync.apply(this, [token.output, context])\n\t                .then(function(unfiltered) {\n\t                    var stack = [{\n\t                        type: Twig.expression.type.string,\n\t                        value: unfiltered\n\t                    }].concat(token.stack);\n\n\t                    return Twig.expression.parseAsync.apply(that, [stack, context]);\n\t                })\n\t                .then(function(output) {\n\t                    return {\n\t                        chain: chain,\n\t                        output: output\n\t                    }\n\t                });\n\t            }\n\t        },\n\t        {\n\t            /**\n\t             * End filter logic tokens.\n\t             *\n\t             *  Format: {% endfilter %}\n\t             */\n\t            type: Twig.logic.type.endfilter,\n\t            regex: /^endfilter$/,\n\t            next: [ ],\n\t            open: false\n\t        },\n\t        {\n\t            /**\n\t             * Block logic tokens.\n\t             *\n\t             *  Format: {% block title %}\n\t             */\n\t            type: Twig.logic.type.block,\n\t            regex: /^block\\s+([a-zA-Z0-9_]+)$/,\n\t            next: [\n\t                Twig.logic.type.endblock\n\t            ],\n\t            open: true,\n\t            compile: function (token) {\n\t                token.block = token.match[1].trim();\n\t                delete token.match;\n\t                return token;\n\t            },\n\t            parse: function (token, context, chain) {\n\t                var that = this,\n\t                    block_output,\n\t                    output,\n\t                    promise = Twig.Promise.resolve(),\n\t                    isImported = Twig.indexOf(this.importedBlocks, token.block) > -1,\n\t                    hasParent = this.blocks[token.block] && Twig.indexOf(this.blocks[token.block], Twig.placeholders.parent) > -1;\n\n\t                // Don't override previous blocks unless they're imported with \"use\"\n\t                // Loops should be exempted as well.\n\t                if (this.blocks[token.block] === undefined || isImported || hasParent || context.loop || token.overwrite) {\n\t                    if (token.expression) {\n\t                        promise = Twig.expression.parseAsync.apply(this, [token.output, context])\n\t                        .then(function(value) {\n\t                            return Twig.expression.parseAsync.apply(that, [{\n\t                                type: Twig.expression.type.string,\n\t                                value: value\n\t                            }, context]);\n\t                        });\n\t                    } else {\n\t                        promise = Twig.parseAsync.apply(this, [token.output, context])\n\t                        .then(function(value) {\n\t                            return Twig.expression.parseAsync.apply(that, [{\n\t                                type: Twig.expression.type.string,\n\t                                value: value\n\t                            }, context]);\n\t                        });\n\t                    }\n\n\t                    promise = promise.then(function(block_output) {\n\t                        if (isImported) {\n\t                            // once the block is overridden, remove it from the list of imported blocks\n\t                            that.importedBlocks.splice(that.importedBlocks.indexOf(token.block), 1);\n\t                        }\n\n\t                        if (hasParent) {\n\t                            that.blocks[token.block] = Twig.Markup(that.blocks[token.block].replace(Twig.placeholders.parent, block_output));\n\t                        } else {\n\t                            that.blocks[token.block] = block_output;\n\t                        }\n\n\t                        that.originalBlockTokens[token.block] = {\n\t                            type: token.type,\n\t                            block: token.block,\n\t                            output: token.output,\n\t                            overwrite: true\n\t                        };\n\t                    });\n\t                }\n\n\t                return promise.then(function() {\n\t                    // Check if a child block has been set from a template extending this one.\n\t                    if (that.child.blocks[token.block]) {\n\t                        output = that.child.blocks[token.block];\n\t                    } else {\n\t                        output = that.blocks[token.block];\n\t                    }\n\n\t                    return {\n\t                        chain: chain,\n\t                        output: output\n\t                    };\n\t                });\n\t            }\n\t        },\n\t        {\n\t            /**\n\t             * Block shorthand logic tokens.\n\t             *\n\t             *  Format: {% block title expression %}\n\t             */\n\t            type: Twig.logic.type.shortblock,\n\t            regex: /^block\\s+([a-zA-Z0-9_]+)\\s+(.+)$/,\n\t            next: [ ],\n\t            open: true,\n\t            compile: function (token) {\n\t                token.expression = token.match[2].trim();\n\n\t                token.output = Twig.expression.compile({\n\t                    type: Twig.expression.type.expression,\n\t                    value: token.expression\n\t                }).stack;\n\n\t                token.block = token.match[1].trim();\n\t                delete token.match;\n\t                return token;\n\t            },\n\t            parse: function (token, context, chain) {\n\t                return Twig.logic.handler[Twig.logic.type.block].parse.apply(this, arguments);\n\t            }\n\t        },\n\t        {\n\t            /**\n\t             * End block logic tokens.\n\t             *\n\t             *  Format: {% endblock %}\n\t             */\n\t            type: Twig.logic.type.endblock,\n\t            regex: /^endblock(?:\\s+([a-zA-Z0-9_]+))?$/,\n\t            next: [ ],\n\t            open: false\n\t        },\n\t        {\n\t            /**\n\t             * Block logic tokens.\n\t             *\n\t             *  Format: {% extends \"template.twig\" %}\n\t             */\n\t            type: Twig.logic.type.extends_,\n\t            regex: /^extends\\s+(.+)$/,\n\t            next: [ ],\n\t            open: true,\n\t            compile: function (token) {\n\t                var expression = token.match[1].trim();\n\t                delete token.match;\n\n\t                token.stack   = Twig.expression.compile.apply(this, [{\n\t                    type:  Twig.expression.type.expression,\n\t                    value: expression\n\t                }]).stack;\n\n\t                return token;\n\t            },\n\t            parse: function (token, context, chain) {\n\t                var template,\n\t                    that = this,\n\t                    innerContext = Twig.ChildContext(context);\n\n\t                // Resolve filename\n\t                return Twig.expression.parseAsync.apply(this, [token.stack, context])\n\t                .then(function(file) {\n\t                    // Set parent template\n\t                    that.extend = file;\n\n\t                    if (file instanceof Twig.Template) {\n\t                        template = file;\n\t                    } else {\n\t                        // Import file\n\t                        template = that.importFile(file);\n\t                    }\n\n\t                    // Render the template in case it puts anything in its context\n\t                    return template.renderAsync(innerContext);\n\t                })\n\t                .then(function() {\n\t                    // Extend the parent context with the extended context\n\t                    Twig.lib.extend(context, innerContext);\n\n\t                    return {\n\t                        chain: chain,\n\t                        output: ''\n\t                    };\n\t                });\n\t            }\n\t        },\n\t        {\n\t            /**\n\t             * Block logic tokens.\n\t             *\n\t             *  Format: {% use \"template.twig\" %}\n\t             */\n\t            type: Twig.logic.type.use,\n\t            regex: /^use\\s+(.+)$/,\n\t            next: [ ],\n\t            open: true,\n\t            compile: function (token) {\n\t                var expression = token.match[1].trim();\n\t                delete token.match;\n\n\t                token.stack = Twig.expression.compile.apply(this, [{\n\t                    type:  Twig.expression.type.expression,\n\t                    value: expression\n\t                }]).stack;\n\n\t                return token;\n\t            },\n\t            parse: function (token, context, chain) {\n\t                var that = this;\n\n\t                // Resolve filename\n\t                return Twig.expression.parseAsync.apply(this, [token.stack, context])\n\t                .then(function(file) {\n\t                    // Import blocks\n\t                    that.importBlocks(file);\n\n\t                    return {\n\t                        chain: chain,\n\t                        output: ''\n\t                    };\n\t                });\n\t            }\n\t        },\n\t        {\n\t            /**\n\t             * Block logic tokens.\n\t             *\n\t             *  Format: {% includes \"template.twig\" [with {some: 'values'} only] %}\n\t             */\n\t            type: Twig.logic.type.include,\n\t            regex: /^include\\s+(.+?)(?:\\s|$)(ignore missing(?:\\s|$))?(?:with\\s+([\\S\\s]+?))?(?:\\s|$)(only)?$/,\n\t            next: [ ],\n\t            open: true,\n\t            compile: function (token) {\n\t                var match = token.match,\n\t                    expression = match[1].trim(),\n\t                    ignoreMissing = match[2] !== undefined,\n\t                    withContext = match[3],\n\t                    only = ((match[4] !== undefined) && match[4].length);\n\n\t                delete token.match;\n\n\t                token.only = only;\n\t                token.ignoreMissing = ignoreMissing;\n\n\t                token.stack = Twig.expression.compile.apply(this, [{\n\t                    type:  Twig.expression.type.expression,\n\t                    value: expression\n\t                }]).stack;\n\n\t                if (withContext !== undefined) {\n\t                    token.withStack = Twig.expression.compile.apply(this, [{\n\t                        type:  Twig.expression.type.expression,\n\t                        value: withContext.trim()\n\t                    }]).stack;\n\t                }\n\n\t                return token;\n\t            },\n\t            parse: function (token, context, chain) {\n\t                // Resolve filename\n\t                var innerContext = {},\n\t                    i,\n\t                    template,\n\t                    that = this,\n\t                    promise = Twig.Promise.resolve();\n\n\t                if (!token.only) {\n\t                    innerContext = Twig.ChildContext(context);\n\t                }\n\n\t                if (token.withStack !== undefined) {\n\t                    promise = Twig.expression.parseAsync.apply(this, [token.withStack, context])\n\t                    .then(function(withContext) {\n\t                        for (i in withContext) {\n\t                            if (withContext.hasOwnProperty(i))\n\t                                innerContext[i] = withContext[i];\n\t                        }\n\t                    });\n\t                }\n\n\t                return promise\n\t                .then(function() {\n\t                    return Twig.expression.parseAsync.apply(that, [token.stack, context]);\n\t                })\n\t                .then(function(file) {\n\t                    if (file instanceof Twig.Template) {\n\t                        template = file;\n\t                    } else {\n\t                        // Import file\n\t                        try {\n\t                            template = that.importFile(file);\n\t                        } catch (err) {\n\t                            if (token.ignoreMissing) {\n\t                                return '';\n\t                            }\n\n\t                            throw err;\n\t                        }\n\t                    }\n\n\t                    return template.renderAsync(innerContext);\n\t                })\n\t                .then(function(output) {\n\t                    return {\n\t                        chain: chain,\n\t                        output: output\n\t                    };\n\t                });\n\t            }\n\t        },\n\t        {\n\t            type: Twig.logic.type.spaceless,\n\t            regex: /^spaceless$/,\n\t            next: [\n\t                Twig.logic.type.endspaceless\n\t            ],\n\t            open: true,\n\n\t            // Parse the html and return it without any spaces between tags\n\t            parse: function (token, context, chain) {\n\t                // Parse the output without any filter\n\t                return Twig.parseAsync.apply(this, [token.output, context])\n\t                .then(function(unfiltered) {\n\t                    var // A regular expression to find closing and opening tags with spaces between them\n\t                        rBetweenTagSpaces = />\\s+</g,\n\t                        // Replace all space between closing and opening html tags\n\t                        output = unfiltered.replace(rBetweenTagSpaces,'><').trim();\n\t                        // Rewrap output as a Twig.Markup\n\t                        output = Twig.Markup(output);\n\t                    return {\n\t                        chain: chain,\n\t                        output: output\n\t                    };\n\t                });\n\t            }\n\t        },\n\n\t        // Add the {% endspaceless %} token\n\t        {\n\t            type: Twig.logic.type.endspaceless,\n\t            regex: /^endspaceless$/,\n\t            next: [ ],\n\t            open: false\n\t        },\n\t        {\n\t            /**\n\t             * Macro logic tokens.\n\t             *\n\t             * Format: {% maro input(name, value, type, size) %}\n\t             *\n\t             */\n\t            type: Twig.logic.type.macro,\n\t            regex: /^macro\\s+([a-zA-Z0-9_]+)\\s*\\(\\s*((?:[a-zA-Z0-9_]+(?:,\\s*)?)*)\\s*\\)$/,\n\t            next: [\n\t                Twig.logic.type.endmacro\n\t            ],\n\t            open: true,\n\t            compile: function (token) {\n\t                var macroName = token.match[1],\n\t                    parameters = token.match[2].split(/[\\s,]+/);\n\n\t                //TODO: Clean up duplicate check\n\t                for (var i=0; i<parameters.length; i++) {\n\t                    for (var j=0; j<parameters.length; j++){\n\t                        if (parameters[i] === parameters[j] && i !== j) {\n\t                            throw new Twig.Error(\"Duplicate arguments for parameter: \"+ parameters[i]);\n\t                        }\n\t                    }\n\t                }\n\n\t                token.macroName = macroName;\n\t                token.parameters = parameters;\n\n\t                delete token.match;\n\t                return token;\n\t            },\n\t            parse: function (token, context, chain) {\n\t                var template = this;\n\t                this.macros[token.macroName] = function() {\n\t                    // Pass global context and other macros\n\t                    var macroContext = {\n\t                        _self: template.macros\n\t                    }\n\t                    // Add parameters from context to macroContext\n\t                    for (var i=0; i<token.parameters.length; i++) {\n\t                        var prop = token.parameters[i];\n\t                        if(typeof arguments[i] !== 'undefined') {\n\t                            macroContext[prop] = arguments[i];\n\t                        } else {\n\t                            macroContext[prop] = undefined;\n\t                        }\n\t                    }\n\n\t                    // Render\n\t                    return Twig.parseAsync.apply(template, [token.output, macroContext]);\n\t                };\n\n\t                return {\n\t                    chain: chain,\n\t                    output: ''\n\t                };\n\n\t            }\n\t        },\n\t        {\n\t            /**\n\t             * End macro logic tokens.\n\t             *\n\t             * Format: {% endmacro %}\n\t             */\n\t             type: Twig.logic.type.endmacro,\n\t             regex: /^endmacro$/,\n\t             next: [ ],\n\t             open: false\n\t        },\n\t        {\n\t            /*\n\t            * import logic tokens.\n\t            *\n\t            * Format: {% import \"template.twig\" as form %}\n\t            */\n\t            type: Twig.logic.type.import_,\n\t            regex: /^import\\s+(.+)\\s+as\\s+([a-zA-Z0-9_]+)$/,\n\t            next: [ ],\n\t            open: true,\n\t            compile: function (token) {\n\t                var expression = token.match[1].trim(),\n\t                    contextName = token.match[2].trim();\n\t                delete token.match;\n\n\t                token.expression = expression;\n\t                token.contextName = contextName;\n\n\t                token.stack = Twig.expression.compile.apply(this, [{\n\t                    type: Twig.expression.type.expression,\n\t                    value: expression\n\t                }]).stack;\n\n\t                return token;\n\t            },\n\t            parse: function (token, context, chain) {\n\t                var that = this,\n\t                    output = { chain: chain, output: '' };\n\n\t                if (token.expression === '_self') {\n\t                    context[token.contextName] = this.macros;\n\t                    return Twig.Promise.resolve(output);\n\t                }\n\n\t                return Twig.expression.parseAsync.apply(this, [token.stack, context])\n\t                .then(function(file) {\n\t                    return that.importFile(file || token.expression);\n\t                })\n\t                .then(function(template) {\n\t                    context[token.contextName] = template.renderAsync({}, {output: 'macros'});\n\n\t                    return output;\n\t                });\n\t            }\n\t        },\n\t        {\n\t            /*\n\t            * from logic tokens.\n\t            *\n\t            * Format: {% from \"template.twig\" import func as form %}\n\t            */\n\t            type: Twig.logic.type.from,\n\t            regex: /^from\\s+(.+)\\s+import\\s+([a-zA-Z0-9_, ]+)$/,\n\t            next: [ ],\n\t            open: true,\n\t            compile: function (token) {\n\t                var expression = token.match[1].trim(),\n\t                    macroExpressions = token.match[2].trim().split(/\\s*,\\s*/),\n\t                    macroNames = {};\n\n\t                for (var i=0; i<macroExpressions.length; i++) {\n\t                    var res = macroExpressions[i];\n\n\t                    // match function as variable\n\t                    var macroMatch = res.match(/^([a-zA-Z0-9_]+)\\s+as\\s+([a-zA-Z0-9_]+)$/);\n\t                    if (macroMatch) {\n\t                        macroNames[macroMatch[1].trim()] = macroMatch[2].trim();\n\t                    }\n\t                    else if (res.match(/^([a-zA-Z0-9_]+)$/)) {\n\t                        macroNames[res] = res;\n\t                    }\n\t                    else {\n\t                        // ignore import\n\t                    }\n\n\t                }\n\n\t                delete token.match;\n\n\t                token.expression = expression;\n\t                token.macroNames = macroNames;\n\n\t                token.stack = Twig.expression.compile.apply(this, [{\n\t                    type: Twig.expression.type.expression,\n\t                    value: expression\n\t                }]).stack;\n\n\t                return token;\n\t            },\n\t            parse: function (token, context, chain) {\n\t                var that = this,\n\t                    promise = Twig.Promise.resolve(this.macros);\n\n\t                if (token.expression !== \"_self\") {\n\t                    promise = Twig.expression.parseAsync.apply(this, [token.stack, context])\n\t                    .then(function(file) {\n\t                        return that.importFile(file || token.expression);\n\t                    })\n\t                    .then(function(template) {\n\t                        return template.renderAsync({}, {output: 'macros'});\n\t                    });\n\t                }\n\n\t                return promise\n\t                .then(function(macros) {\n\t                    for (var macroName in token.macroNames) {\n\t                        if (macros.hasOwnProperty(macroName)) {\n\t                            context[token.macroNames[macroName]] = macros[macroName];\n\t                        }\n\t                    }\n\n\t                    return {\n\t                        chain: chain,\n\t                        output: ''\n\t                    }\n\t                });\n\t            }\n\t        },\n\t        {\n\t            /**\n\t             * The embed tag combines the behaviour of include and extends.\n\t             * It allows you to include another template's contents, just like include does.\n\t             *\n\t             *  Format: {% embed \"template.twig\" [with {some: 'values'} only] %}\n\t             */\n\t            type: Twig.logic.type.embed,\n\t            regex: /^embed\\s+(.+?)(?:\\s|$)(ignore missing(?:\\s|$))?(?:with\\s+([\\S\\s]+?))?(?:\\s|$)(only)?$/,\n\t            next: [\n\t                Twig.logic.type.endembed\n\t            ],\n\t            open: true,\n\t            compile: function (token) {\n\t                var match = token.match,\n\t                    expression = match[1].trim(),\n\t                    ignoreMissing = match[2] !== undefined,\n\t                    withContext = match[3],\n\t                    only = ((match[4] !== undefined) && match[4].length);\n\n\t                delete token.match;\n\n\t                token.only = only;\n\t                token.ignoreMissing = ignoreMissing;\n\n\t                token.stack = Twig.expression.compile.apply(this, [{\n\t                    type:  Twig.expression.type.expression,\n\t                    value: expression\n\t                }]).stack;\n\n\t                if (withContext !== undefined) {\n\t                    token.withStack = Twig.expression.compile.apply(this, [{\n\t                        type:  Twig.expression.type.expression,\n\t                        value: withContext.trim()\n\t                    }]).stack;\n\t                }\n\n\t                return token;\n\t            },\n\t            parse: function (token, context, chain) {\n\t                // Resolve filename\n\t                var innerContext = {},\n\t                    that = this,\n\t                    i,\n\t                    template,\n\t                    promise = Twig.Promise.resolve();\n\n\t                if (!token.only) {\n\t                    for (i in context) {\n\t                        if (context.hasOwnProperty(i))\n\t                            innerContext[i] = context[i];\n\t                    }\n\t                }\n\n\t                if (token.withStack !== undefined) {\n\t                    promise = Twig.expression.parseAsync.apply(this, [token.withStack, context])\n\t                    .then(function(withContext) {\n\t                        for (i in withContext) {\n\t                            if (withContext.hasOwnProperty(i))\n\t                                innerContext[i] = withContext[i];\n\t                        }\n\t                    });\n\t                }\n\n\t                return promise.then(function() {\n\t                    return Twig.expression.parseAsync.apply(that, [token.stack, innerContext]);\n\t                })\n\t                .then(function(file) {\n\t                    if (file instanceof Twig.Template) {\n\t                        template = file;\n\t                    } else {\n\t                        // Import file\n\t                        try {\n\t                            template = that.importFile(file);\n\t                        } catch (err) {\n\t                            if (token.ignoreMissing) {\n\t                                return '';\n\t                            }\n\n\t                            throw err;\n\t                        }\n\t                    }\n\n\t                    // reset previous blocks\n\t                    that.blocks = {};\n\n\t                    // parse tokens. output will be not used\n\t                    return Twig.parseAsync.apply(that, [token.output, innerContext])\n\t                    .then(function() {\n\t                        // render tempalte with blocks defined in embed block\n\t                        return template.renderAsync(innerContext, {'blocks':that.blocks});\n\t                    });\n\t                })\n\t                .then(function(output) {\n\t                    return {\n\t                        chain: chain,\n\t                        output: output\n\t                    };\n\t                });\n\t            }\n\t        },\n\t        /* Add the {% endembed %} token\n\t         *\n\t         */\n\t        {\n\t            type: Twig.logic.type.endembed,\n\t            regex: /^endembed$/,\n\t            next: [ ],\n\t            open: false\n\t        }\n\n\t    ];\n\n\n\t    /**\n\t     * Registry for logic handlers.\n\t     */\n\t    Twig.logic.handler = {};\n\n\t    /**\n\t     * Define a new token type, available at Twig.logic.type.{type}\n\t     */\n\t    Twig.logic.extendType = function (type, value) {\n\t        value = value || (\"Twig.logic.type\" + type);\n\t        Twig.logic.type[type] = value;\n\t    };\n\n\t    /**\n\t     * Extend the logic parsing functionality with a new token definition.\n\t     *\n\t     * // Define a new tag\n\t     * Twig.logic.extend({\n\t     *     type: Twig.logic.type.{type},\n\t     *     // The pattern to match for this token\n\t     *     regex: ...,\n\t     *     // What token types can follow this token, leave blank if any.\n\t     *     next: [ ... ]\n\t     *     // Create and return compiled version of the token\n\t     *     compile: function(token) { ... }\n\t     *     // Parse the compiled token with the context provided by the render call\n\t     *     //   and whether this token chain is complete.\n\t     *     parse: function(token, context, chain) { ... }\n\t     * });\n\t     *\n\t     * @param {Object} definition The new logic expression.\n\t     */\n\t    Twig.logic.extend = function (definition) {\n\n\t        if (!definition.type) {\n\t            throw new Twig.Error(\"Unable to extend logic definition. No type provided for \" + definition);\n\t        } else {\n\t            Twig.logic.extendType(definition.type);\n\t        }\n\t        Twig.logic.handler[definition.type] = definition;\n\t    };\n\n\t    // Extend with built-in expressions\n\t    while (Twig.logic.definitions.length > 0) {\n\t        Twig.logic.extend(Twig.logic.definitions.shift());\n\t    }\n\n\t    /**\n\t     * Compile a logic token into an object ready for parsing.\n\t     *\n\t     * @param {Object} raw_token An uncompiled logic token.\n\t     *\n\t     * @return {Object} A compiled logic token, ready for parsing.\n\t     */\n\t    Twig.logic.compile = function (raw_token) {\n\t        var expression = raw_token.value.trim(),\n\t            token = Twig.logic.tokenize.apply(this, [expression]),\n\t            token_template = Twig.logic.handler[token.type];\n\n\t        // Check if the token needs compiling\n\t        if (token_template.compile) {\n\t            token = token_template.compile.apply(this, [token]);\n\t            Twig.log.trace(\"Twig.logic.compile: \", \"Compiled logic token to \", token);\n\t        }\n\n\t        return token;\n\t    };\n\n\t    /**\n\t     * Tokenize logic expressions. This function matches token expressions against regular\n\t     * expressions provided in token definitions provided with Twig.logic.extend.\n\t     *\n\t     * @param {string} expression the logic token expression to tokenize\n\t     *                (i.e. what's between {% and %})\n\t     *\n\t     * @return {Object} The matched token with type set to the token type and match to the regex match.\n\t     */\n\t    Twig.logic.tokenize = function (expression) {\n\t        var token = {},\n\t            token_template_type = null,\n\t            token_type = null,\n\t            token_regex = null,\n\t            regex_array = null,\n\t            regex = null,\n\t            match = null;\n\n\t        // Ignore whitespace around expressions.\n\t        expression = expression.trim();\n\n\t        for (token_template_type in Twig.logic.handler) {\n\t            if (Twig.logic.handler.hasOwnProperty(token_template_type)) {\n\t                // Get the type and regex for this template type\n\t                token_type = Twig.logic.handler[token_template_type].type;\n\t                token_regex = Twig.logic.handler[token_template_type].regex;\n\n\t                // Handle multiple regular expressions per type.\n\t                regex_array = [];\n\t                if (token_regex instanceof Array) {\n\t                    regex_array = token_regex;\n\t                } else {\n\t                    regex_array.push(token_regex);\n\t                }\n\n\t                // Check regular expressions in the order they were specified in the definition.\n\t                while (regex_array.length > 0) {\n\t                    regex = regex_array.shift();\n\t                    match = regex.exec(expression.trim());\n\t                    if (match !== null) {\n\t                        token.type  = token_type;\n\t                        token.match = match;\n\t                        Twig.log.trace(\"Twig.logic.tokenize: \", \"Matched a \", token_type, \" regular expression of \", match);\n\t                        return token;\n\t                    }\n\t                }\n\t            }\n\t        }\n\n\t        // No regex matches\n\t        throw new Twig.Error(\"Unable to parse '\" + expression.trim() + \"'\");\n\t    };\n\n\t    /**\n\t     * Parse a logic token within a given context.\n\t     *\n\t     * What are logic chains?\n\t     *      Logic chains represent a series of tokens that are connected,\n\t     *          for example:\n\t     *          {% if ... %} {% else %} {% endif %}\n\t     *\n\t     *      The chain parameter is used to signify if a chain is open of closed.\n\t     *      open:\n\t     *          More tokens in this chain should be parsed.\n\t     *      closed:\n\t     *          This token chain has completed parsing and any additional\n\t     *          tokens (else, elseif, etc...) should be ignored.\n\t     *\n\t     * @param {Object} token The compiled token.\n\t     * @param {Object} context The render context.\n\t     * @param {boolean} chain Is this an open logic chain. If false, that means a\n\t     *                        chain is closed and no further cases should be parsed.\n\t     */\n\t    Twig.logic.parse = function (token, context, chain, allow_async) {\n\t        var output = '',\n\t            promise,\n\t            is_async = true,\n\t            token_template;\n\n\t        context = context || { };\n\n\t        Twig.log.debug(\"Twig.logic.parse: \", \"Parsing logic token \", token);\n\n\t        token_template = Twig.logic.handler[token.type];\n\n\t        if (token_template.parse) {\n\t            output = token_template.parse.apply(this, [token, context, chain]);\n\t        }\n\n\t        promise = Twig.isPromise(output) ? output : Twig.Promise.resolve(output);\n\n\t        promise.then(function(o) {\n\t            is_async = false;\n\t            output = o;\n\t        });\n\n\t        if (allow_async)\n\t            return promise || Twig.Promise.resolve(output);\n\n\t        if (is_async)\n\t            throw new Twig.Error('You are using Twig.js in sync mode in combination with async extensions.');\n\n\t        return output;\n\t    };\n\n\t    return Twig;\n\n\t};\n\n\n/***/ },\n/* 22 */\n/***/ function(module, exports) {\n\n\tmodule.exports = function(Twig) {\n\t    'use strict';\n\n\t    Twig.Templates.registerParser('source', function(params) {\n\t        return params.data || '';\n\t    });\n\t};\n\n\n/***/ },\n/* 23 */\n/***/ function(module, exports) {\n\n\tmodule.exports = function(Twig) {\n\t    'use strict';\n\n\t    Twig.Templates.registerParser('twig', function(params) {\n\t        return new Twig.Template(params);\n\t    });\n\t};\n\n\n/***/ },\n/* 24 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// ## twig.path.js\n\t//\n\t// This file handles path parsing\n\tmodule.exports = function (Twig) {\n\t    \"use strict\";\n\n\t    /**\n\t     * Namespace for path handling.\n\t     */\n\t    Twig.path = {};\n\n\t    /**\n\t     * Generate the canonical version of a url based on the given base path and file path and in\n\t     * the previously registered namespaces.\n\t     *\n\t     * @param  {string} template The Twig Template\n\t     * @param  {string} file     The file path, may be relative and may contain namespaces.\n\t     *\n\t     * @return {string}          The canonical version of the path\n\t     */\n\t     Twig.path.parsePath = function(template, file) {\n\t        var namespaces = null,\n\t            file = file || \"\";\n\n\t        if (typeof template === 'object' && typeof template.options === 'object') {\n\t            namespaces = template.options.namespaces;\n\t        }\n\n\t        if (typeof namespaces === 'object' && (file.indexOf('::') > 0) || file.indexOf('@') >= 0){\n\t            for (var k in namespaces){\n\t                if (namespaces.hasOwnProperty(k)) {\n\t                    file = file.replace(k + '::', namespaces[k]);\n\t                    file = file.replace('@' + k, namespaces[k]);\n\t                }\n\t            }\n\n\t            return file;\n\t        }\n\n\t        return Twig.path.relativePath(template, file);\n\t    };\n\n\t    /**\n\t     * Generate the relative canonical version of a url based on the given base path and file path.\n\t     *\n\t     * @param {Twig.Template} template The Twig.Template.\n\t     * @param {string} file The file path, relative to the base path.\n\t     *\n\t     * @return {string} The canonical version of the path.\n\t     */\n\t    Twig.path.relativePath = function(template, file) {\n\t        var base,\n\t            base_path,\n\t            sep_chr = \"/\",\n\t            new_path = [],\n\t            file = file || \"\",\n\t            val;\n\n\t        if (template.url) {\n\t            if (typeof template.base !== 'undefined') {\n\t                base = template.base + ((template.base.charAt(template.base.length-1) === '/') ? '' : '/');\n\t            } else {\n\t                base = template.url;\n\t            }\n\t        } else if (template.path) {\n\t            // Get the system-specific path separator\n\t            var path = __webpack_require__(20),\n\t                sep = path.sep || sep_chr,\n\t                relative = new RegExp(\"^\\\\.{1,2}\" + sep.replace(\"\\\\\", \"\\\\\\\\\"));\n\t            file = file.replace(/\\//g, sep);\n\n\t            if (template.base !== undefined && file.match(relative) == null) {\n\t                file = file.replace(template.base, '');\n\t                base = template.base + sep;\n\t            } else {\n\t                base = path.normalize(template.path);\n\t            }\n\n\t            base = base.replace(sep+sep, sep);\n\t            sep_chr = sep;\n\t        } else if ((template.name || template.id) && template.method && template.method !== 'fs' && template.method !== 'ajax') {\n\t            // Custom registered loader\n\t            base = template.base || template.name || template.id;\n\t        } else {\n\t            throw new Twig.Error(\"Cannot extend an inline template.\");\n\t        }\n\n\t        base_path = base.split(sep_chr);\n\n\t        // Remove file from url\n\t        base_path.pop();\n\t        base_path = base_path.concat(file.split(sep_chr));\n\n\t        while (base_path.length > 0) {\n\t            val = base_path.shift();\n\t            if (val == \".\") {\n\t                // Ignore\n\t            } else if (val == \"..\" && new_path.length > 0 && new_path[new_path.length-1] != \"..\") {\n\t                new_path.pop();\n\t            } else {\n\t                new_path.push(val);\n\t            }\n\t        }\n\n\t        return new_path.join(sep_chr);\n\t    };\n\n\t    return Twig;\n\t};\n\n\n/***/ },\n/* 25 */\n/***/ function(module, exports) {\n\n\t// ## twig.tests.js\n\t//\n\t// This file handles expression tests. (is empty, is not defined, etc...)\n\tmodule.exports = function (Twig) {\n\t    \"use strict\";\n\t    Twig.tests = {\n\t        empty: function(value) {\n\t            if (value === null || value === undefined) return true;\n\t            // Handler numbers\n\t            if (typeof value === \"number\") return false; // numbers are never \"empty\"\n\t            // Handle strings and arrays\n\t            if (value.length && value.length > 0) return false;\n\t            // Handle objects\n\t            for (var key in value) {\n\t                if (value.hasOwnProperty(key)) return false;\n\t            }\n\t            return true;\n\t        },\n\t        odd: function(value) {\n\t            return value % 2 === 1;\n\t        },\n\t        even: function(value) {\n\t            return value % 2 === 0;\n\t        },\n\t        divisibleby: function(value, params) {\n\t            return value % params[0] === 0;\n\t        },\n\t        defined: function(value) {\n\t            return value !== undefined;\n\t        },\n\t        none: function(value) {\n\t            return value === null;\n\t        },\n\t        'null': function(value) {\n\t            return this.none(value); // Alias of none\n\t        },\n\t        'same as': function(value, params) {\n\t            return value === params[0];\n\t        },\n\t        sameas: function(value, params) {\n\t            console.warn('`sameas` is deprecated use `same as`');\n\t            return Twig.tests['same as'](value, params);\n\t        },\n\t        iterable: function(value) {\n\t            return value && (Twig.lib.is(\"Array\", value) || Twig.lib.is(\"Object\", value));\n\t        }\n\t        /*\n\t        constant ?\n\t         */\n\t    };\n\n\t    Twig.test = function(test, value, params) {\n\t        if (!Twig.tests[test]) {\n\t            throw \"Test \" + test + \" is not defined.\";\n\t        }\n\t        return Twig.tests[test](value, params);\n\t    };\n\n\t    Twig.test.extend = function(test, definition) {\n\t        Twig.tests[test] = definition;\n\t    };\n\n\t    return Twig;\n\t};\n\n\n/***/ },\n/* 26 */\n/***/ function(module, exports) {\n\n\t// ## twig.async.js\n\t//\n\t// This file handles asynchronous tasks within twig.\n\tmodule.exports = function (Twig) {\n\t    \"use strict\";\n\n\t    Twig.parseAsync = function (tokens, context) {\n\t        return Twig.parse.apply(this, [tokens, context, true]);\n\t    }\n\n\t    Twig.expression.parseAsync = function (tokens, context, tokens_are_parameters) {\n\t        return Twig.expression.parse.apply(this, [tokens, context, tokens_are_parameters, true]);\n\t    }\n\n\t    Twig.logic.parseAsync = function (token, context, chain) {\n\t        return Twig.logic.parse.apply(this, [token, context, chain, true]);\n\t    }\n\n\t    Twig.Template.prototype.renderAsync = function (context, params) {\n\t        return this.render(context, params, true);\n\t    }\n\n\t    Twig.async = {};\n\n\t    /**\n\t     * Checks for `thenable` objects\n\t     */\n\t    Twig.isPromise = function(obj) {\n\t        return obj && (typeof obj.then == 'function');\n\t    }\n\n\t    /**\n\t     * An alternate implementation of a Promise that does not fully follow\n\t     * the spec, but instead works fully synchronous while still being\n\t     * thenable.\n\t     *\n\t     * These promises can be mixed with regular promises at which point\n\t     * the synchronous behaviour is lost.\n\t     */\n\t    Twig.Promise = function(executor) {\n\t        // State\n\t        var state = 'unknown';\n\t        var value = null;\n\t        var handlers = null;\n\n\t        function changeState(newState, v) {\n\t            state = newState;\n\t            value = v;\n\t            notify();\n\t        };\n\t        function onResolve(v) { changeState('resolve', v); }\n\t        function onReject(e) { changeState('reject', e); }\n\n\t        function notify() {\n\t            if (!handlers) return;\n\n\t            Twig.forEach(handlers, function(h) {\n\t                append(h.resolve, h.reject);\n\t            });\n\t            handlers = null;\n\t        }\n\n\t        function append(onResolved, onRejected) {\n\t            var h = {\n\t                resolve: onResolved,\n\t                reject: onRejected\n\t            };\n\n\t            // The promise has yet to be rejected or resolved.\n\t            if (state == 'unknown') {\n\t                handlers = handlers || [];\n\t                return handlers.push(h);\n\t            }\n\n\t            // The state has been changed to either resolve, or reject\n\t            // which means we should call the handler.\n\t            if (h[state])\n\t                h[state](value);\n\t        }\n\n\t        function run(fn, resolve, reject) {\n\t            var done = false;\n\t            try {\n\t                fn(function(v) {\n\t                    if (done) return;\n\t                    done = true;\n\t                    resolve(v);\n\t                }, function(e) {\n\t                    if (done) return;\n\t                    done = true;\n\t                    reject(e);\n\t                });\n\t            } catch(e) {\n\t                done = true;\n\t                reject(e);\n\t            }\n\t        }\n\n\t        function ready(result) {\n\t            try {\n\t                if (!Twig.isPromise(result)) {\n\t                    return onResolve(result);\n\t                }\n\n\t                run(result.then.bind(result), ready, onReject);\n\t            } catch (e) {\n\t                onReject(e);\n\t            }\n\t        }\n\n\t        run(executor, ready, onReject);\n\n\t        return {\n\t            then: function(onResolved, onRejected) {\n\t                var hasResolved = typeof onResolved == 'function';\n\t                var hasRejected = typeof onRejected == 'function';\n\n\t                return new Twig.Promise(function(resolve, reject) {\n\t                    append(function(result) {\n\t                        if (hasResolved) {\n\t                            try {\n\t                                resolve(onResolved(result));\n\t                            } catch (e) {\n\t                                reject(e);\n\t                            }\n\t                        } else {\n\t                            resolve(result);\n\t                        }\n\t                    }, function(err) {\n\t                        if (hasRejected) {\n\t                            try {\n\t                                resolve(onRejected(err));\n\t                            } catch (e) {\n\t                                reject(e);\n\t                            }\n\t                        } else {\n\t                            reject(err);\n\t                        }\n\t                    });\n\t                });\n\t            },\n\t            catch: function(onRejected) {\n\t                return this.then(null, onRejected);\n\t            }\n\t        };\n\t    }\n\n\t    Twig.Promise.resolve = function(value) {\n\t        return new Twig.Promise(function(resolve) {\n\t            resolve(value);\n\t        });\n\t    };\n\n\t    Twig.Promise.reject = function(e) {\n\t        return new Twig.Promise(function(resolve, reject) {\n\t            reject(e);\n\t        });\n\t    };\n\n\t    Twig.Promise.all = function(promises) {\n\t        var results = [];\n\n\t        return Twig.async.forEach(promises, function(p, index) {\n\t            if (!Twig.isPromise(p)) {\n\t                results[index] = p;\n\t                return;\n\t            }\n\n\t            return p.then(function(v) {\n\t                results[index] = v;\n\t            });\n\t        })\n\t        .then(function() {\n\t            return results;\n\t        });\n\t    };\n\n\t    /**\n\t    * Go over each item in a fashion compatible with Twig.forEach,\n\t    * allow the function to return a promise or call the third argument\n\t    * to signal it is finished.\n\t    *\n\t    * Each item in the array will be called sequentially.\n\t    */\n\t    Twig.async.forEach = function forEachAsync(arr, callback) {\n\t        var arg_index = 0;\n\t        var callbacks = {};\n\t        var promise = new Twig.Promise(function(resolve, reject) {\n\t            callbacks = {\n\t                resolve: resolve,\n\t                reject: reject\n\t            };\n\t        });\n\n\t        function fail(err) {\n\t            callbacks.reject(err);\n\t        }\n\n\t        function next(value) {\n\t            if (!Twig.isPromise(value))\n\t                return iterate();\n\n\t            value.then(next, fail);\n\t        }\n\n\t        function iterate() {\n\t            var index = arg_index++;\n\n\t            if (index == arr.length) {\n\t                callbacks.resolve();\n\t                return;\n\t            }\n\n\t            next(callback(arr[index], index));\n\t        }\n\n\t        iterate();\n\n\t        return promise;\n\t    };\n\n\t    return Twig;\n\n\t};\n\n\n/***/ },\n/* 27 */\n/***/ function(module, exports) {\n\n\t// ## twig.exports.js\n\t//\n\t// This file provides extension points and other hooks into the twig functionality.\n\n\tmodule.exports = function (Twig) {\n\t    \"use strict\";\n\t    Twig.exports = {\n\t        VERSION: Twig.VERSION\n\t    };\n\n\t    /**\n\t     * Create and compile a twig.js template.\n\t     *\n\t     * @param {Object} param Paramteres for creating a Twig template.\n\t     *\n\t     * @return {Twig.Template} A Twig template ready for rendering.\n\t     */\n\t    Twig.exports.twig = function twig(params) {\n\t        'use strict';\n\t        var id = params.id,\n\t            options = {\n\t                strict_variables: params.strict_variables || false,\n\t                // TODO: turn autoscape on in the next major version\n\t                autoescape: params.autoescape != null && params.autoescape || false,\n\t                allowInlineIncludes: params.allowInlineIncludes || false,\n\t                rethrow: params.rethrow || false,\n\t                namespaces: params.namespaces\n\t            };\n\n\t        if (Twig.cache && id) {\n\t            Twig.validateId(id);\n\t        }\n\n\t        if (params.debug !== undefined) {\n\t            Twig.debug = params.debug;\n\t        }\n\t        if (params.trace !== undefined) {\n\t            Twig.trace = params.trace;\n\t        }\n\n\t        if (params.data !== undefined) {\n\t            return Twig.Templates.parsers.twig({\n\t                data: params.data,\n\t                path: params.hasOwnProperty('path') ? params.path : undefined,\n\t                module: params.module,\n\t                id:   id,\n\t                options: options\n\t            });\n\n\t        } else if (params.ref !== undefined) {\n\t            if (params.id !== undefined) {\n\t                throw new Twig.Error(\"Both ref and id cannot be set on a twig.js template.\");\n\t            }\n\t            return Twig.Templates.load(params.ref);\n\t        \n\t        } else if (params.method !== undefined) {\n\t            if (!Twig.Templates.isRegisteredLoader(params.method)) {\n\t                throw new Twig.Error('Loader for \"' + params.method + '\" is not defined.');\n\t            }\n\t            return Twig.Templates.loadRemote(params.name || params.href || params.path || id || undefined, {\n\t                id: id,\n\t                method: params.method,\n\t                parser: params.parser || 'twig',\n\t                base: params.base,\n\t                module: params.module,\n\t                precompiled: params.precompiled,\n\t                async: params.async,\n\t                options: options\n\n\t            }, params.load, params.error);\n\n\t        } else if (params.href !== undefined) {\n\t            return Twig.Templates.loadRemote(params.href, {\n\t                id: id,\n\t                method: 'ajax',\n\t                parser: params.parser || 'twig',\n\t                base: params.base,\n\t                module: params.module,\n\t                precompiled: params.precompiled,\n\t                async: params.async,\n\t                options: options\n\n\t            }, params.load, params.error);\n\n\t        } else if (params.path !== undefined) {\n\t            return Twig.Templates.loadRemote(params.path, {\n\t                id: id,\n\t                method: 'fs',\n\t                parser: params.parser || 'twig',\n\t                base: params.base,\n\t                module: params.module,\n\t                precompiled: params.precompiled,\n\t                async: params.async,\n\t                options: options\n\n\t            }, params.load, params.error);\n\t        }\n\t    };\n\n\t    // Extend Twig with a new filter.\n\t    Twig.exports.extendFilter = function(filter, definition) {\n\t        Twig.filter.extend(filter, definition);\n\t    };\n\n\t    // Extend Twig with a new function.\n\t    Twig.exports.extendFunction = function(fn, definition) {\n\t        Twig._function.extend(fn, definition);\n\t    };\n\n\t    // Extend Twig with a new test.\n\t    Twig.exports.extendTest = function(test, definition) {\n\t        Twig.test.extend(test, definition);\n\t    };\n\n\t    // Extend Twig with a new definition.\n\t    Twig.exports.extendTag = function(definition) {\n\t        Twig.logic.extend(definition);\n\t    };\n\n\t    // Provide an environment for extending Twig core.\n\t    // Calls fn with the internal Twig object.\n\t    Twig.exports.extend = function(fn) {\n\t        fn(Twig);\n\t    };\n\n\n\t    /**\n\t     * Provide an extension for use with express 2.\n\t     *\n\t     * @param {string} markup The template markup.\n\t     * @param {array} options The express options.\n\t     *\n\t     * @return {string} The rendered template.\n\t     */\n\t    Twig.exports.compile = function(markup, options) {\n\t        var id = options.filename,\n\t            path = options.filename,\n\t            template;\n\n\t        // Try to load the template from the cache\n\t        template = new Twig.Template({\n\t            data: markup,\n\t            path: path,\n\t            id: id,\n\t            options: options.settings['twig options']\n\t        }); // Twig.Templates.load(id) ||\n\n\t        return function(context) {\n\t            return template.render(context);\n\t        };\n\t    };\n\n\t    /**\n\t     * Provide an extension for use with express 3.\n\t     *\n\t     * @param {string} path The location of the template file on disk.\n\t     * @param {Object|Function} The options or callback.\n\t     * @param {Function} fn callback.\n\t     * \n\t     * @throws Twig.Error\n\t     */\n\t    Twig.exports.renderFile = function(path, options, fn) {\n\t        // handle callback in options\n\t        if (typeof options === 'function') {\n\t            fn = options;\n\t            options = {};\n\t        }\n\n\t        options = options || {};\n\n\t        var settings = options.settings || {};\n\n\t        var params = {\n\t            path: path,\n\t            base: settings.views,\n\t            load: function(template) {\n\t                // render and return template as a simple string, see https://github.com/twigjs/twig.js/pull/348 for more information\n\t                fn(null, '' + template.render(options));\n\t            }\n\t        };\n\n\t        // mixin any options provided to the express app.\n\t        var view_options = settings['twig options'];\n\n\t        if (view_options) {\n\t            for (var option in view_options) {\n\t                if (view_options.hasOwnProperty(option)) {\n\t                    params[option] = view_options[option];\n\t                }\n\t            }\n\t        }\n\n\t        Twig.exports.twig(params);\n\t    };\n\n\t    // Express 3 handler\n\t    Twig.exports.__express = Twig.exports.renderFile;\n\n\t    /**\n\t     * Shoud Twig.js cache templates.\n\t     * Disable during development to see changes to templates without\n\t     * reloading, and disable in production to improve performance.\n\t     *\n\t     * @param {boolean} cache\n\t     */\n\t    Twig.exports.cache = function(cache) {\n\t        Twig.cache = cache;\n\t    };\n\n\t    //We need to export the path module so we can effectively test it\n\t    Twig.exports.path = Twig.path;\n\n\t    //Export our filters.\n\t    //Resolves #307\n\t    Twig.exports.filters = Twig.filters;\n\n\t    return Twig;\n\t};\n\n\n/***/ }\n/******/ ])\n});\n;\n/* WEBPACK VAR INJECTION */}.call(exports, \"/\"))\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 28 */
/***/ (function(module, exports) {

	eval("/* (ignored) */\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZnMgKGlnbm9yZWQpPzM0MzUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiMjguanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiAoaWdub3JlZCkgKi9cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyBmcyAoaWdub3JlZClcbi8vIG1vZHVsZSBpZCA9IDI4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

	eval("/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// resolves . and .. elements in a path array with directory names there\n// must be no slashes, empty elements, or device names (c:\\) in the array\n// (so also no leading and trailing slashes - it does not distinguish\n// relative and absolute paths)\nfunction normalizeArray(parts, allowAboveRoot) {\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = parts.length - 1; i >= 0; i--) {\n    var last = parts[i];\n    if (last === '.') {\n      parts.splice(i, 1);\n    } else if (last === '..') {\n      parts.splice(i, 1);\n      up++;\n    } else if (up) {\n      parts.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (allowAboveRoot) {\n    for (; up--; up) {\n      parts.unshift('..');\n    }\n  }\n\n  return parts;\n}\n\n// Split a filename into [root, dir, basename, ext], unix version\n// 'root' is just a slash, or nothing.\nvar splitPathRe =\n    /^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?|)(\\.[^.\\/]*|))(?:[\\/]*)$/;\nvar splitPath = function(filename) {\n  return splitPathRe.exec(filename).slice(1);\n};\n\n// path.resolve([from ...], to)\n// posix version\nexports.resolve = function() {\n  var resolvedPath = '',\n      resolvedAbsolute = false;\n\n  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    var path = (i >= 0) ? arguments[i] : process.cwd();\n\n    // Skip empty and invalid entries\n    if (typeof path !== 'string') {\n      throw new TypeError('Arguments to path.resolve must be strings');\n    } else if (!path) {\n      continue;\n    }\n\n    resolvedPath = path + '/' + resolvedPath;\n    resolvedAbsolute = path.charAt(0) === '/';\n  }\n\n  // At this point the path should be resolved to a full absolute path, but\n  // handle relative paths to be safe (might happen when process.cwd() fails)\n\n  // Normalize the path\n  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {\n    return !!p;\n  }), !resolvedAbsolute).join('/');\n\n  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';\n};\n\n// path.normalize(path)\n// posix version\nexports.normalize = function(path) {\n  var isAbsolute = exports.isAbsolute(path),\n      trailingSlash = substr(path, -1) === '/';\n\n  // Normalize the path\n  path = normalizeArray(filter(path.split('/'), function(p) {\n    return !!p;\n  }), !isAbsolute).join('/');\n\n  if (!path && !isAbsolute) {\n    path = '.';\n  }\n  if (path && trailingSlash) {\n    path += '/';\n  }\n\n  return (isAbsolute ? '/' : '') + path;\n};\n\n// posix version\nexports.isAbsolute = function(path) {\n  return path.charAt(0) === '/';\n};\n\n// posix version\nexports.join = function() {\n  var paths = Array.prototype.slice.call(arguments, 0);\n  return exports.normalize(filter(paths, function(p, index) {\n    if (typeof p !== 'string') {\n      throw new TypeError('Arguments to path.join must be strings');\n    }\n    return p;\n  }).join('/'));\n};\n\n\n// path.relative(from, to)\n// posix version\nexports.relative = function(from, to) {\n  from = exports.resolve(from).substr(1);\n  to = exports.resolve(to).substr(1);\n\n  function trim(arr) {\n    var start = 0;\n    for (; start < arr.length; start++) {\n      if (arr[start] !== '') break;\n    }\n\n    var end = arr.length - 1;\n    for (; end >= 0; end--) {\n      if (arr[end] !== '') break;\n    }\n\n    if (start > end) return [];\n    return arr.slice(start, end - start + 1);\n  }\n\n  var fromParts = trim(from.split('/'));\n  var toParts = trim(to.split('/'));\n\n  var length = Math.min(fromParts.length, toParts.length);\n  var samePartsLength = length;\n  for (var i = 0; i < length; i++) {\n    if (fromParts[i] !== toParts[i]) {\n      samePartsLength = i;\n      break;\n    }\n  }\n\n  var outputParts = [];\n  for (var i = samePartsLength; i < fromParts.length; i++) {\n    outputParts.push('..');\n  }\n\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\n\n  return outputParts.join('/');\n};\n\nexports.sep = '/';\nexports.delimiter = ':';\n\nexports.dirname = function(path) {\n  var result = splitPath(path),\n      root = result[0],\n      dir = result[1];\n\n  if (!root && !dir) {\n    // No dirname whatsoever\n    return '.';\n  }\n\n  if (dir) {\n    // It has a dirname, strip trailing slash\n    dir = dir.substr(0, dir.length - 1);\n  }\n\n  return root + dir;\n};\n\n\nexports.basename = function(path, ext) {\n  var f = splitPath(path)[2];\n  // TODO: make this comparison case-insensitive on windows?\n  if (ext && f.substr(-1 * ext.length) === ext) {\n    f = f.substr(0, f.length - ext.length);\n  }\n  return f;\n};\n\n\nexports.extname = function(path) {\n  return splitPath(path)[3];\n};\n\nfunction filter (xs, f) {\n    if (xs.filter) return xs.filter(f);\n    var res = [];\n    for (var i = 0; i < xs.length; i++) {\n        if (f(xs[i], i, xs)) res.push(xs[i]);\n    }\n    return res;\n}\n\n// String.prototype.substr - negative index don't work in IE8\nvar substr = 'ab'.substr(-1) === 'b'\n    ? function (str, start, len) { return str.substr(start, len) }\n    : function (str, start, len) {\n        if (start < 0) start = str.length + start;\n        return str.substr(start, len);\n    }\n;\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(18)))\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3BhdGgtYnJvd3NlcmlmeS9pbmRleC5qcz84MDNhIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0MsUUFBUTtBQUN4QztBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsVUFBVSxNQUFNO0FBQ2hCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QixJQUFJO0FBQ2pDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLG9DQUFvQyw4QkFBOEI7QUFDbEU7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxVQUFVLG9CQUFvQjtBQUM5QjtBQUNBOztBQUVBO0FBQ0EsVUFBVSxVQUFVO0FBQ3BCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGlCQUFpQixZQUFZO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSwrQkFBK0Isc0JBQXNCO0FBQ3JEO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsZUFBZTtBQUNsQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esa0NBQWtDO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiMjkuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuLy8gcmVzb2x2ZXMgLiBhbmQgLi4gZWxlbWVudHMgaW4gYSBwYXRoIGFycmF5IHdpdGggZGlyZWN0b3J5IG5hbWVzIHRoZXJlXG4vLyBtdXN0IGJlIG5vIHNsYXNoZXMsIGVtcHR5IGVsZW1lbnRzLCBvciBkZXZpY2UgbmFtZXMgKGM6XFwpIGluIHRoZSBhcnJheVxuLy8gKHNvIGFsc28gbm8gbGVhZGluZyBhbmQgdHJhaWxpbmcgc2xhc2hlcyAtIGl0IGRvZXMgbm90IGRpc3Rpbmd1aXNoXG4vLyByZWxhdGl2ZSBhbmQgYWJzb2x1dGUgcGF0aHMpXG5mdW5jdGlvbiBub3JtYWxpemVBcnJheShwYXJ0cywgYWxsb3dBYm92ZVJvb3QpIHtcbiAgLy8gaWYgdGhlIHBhdGggdHJpZXMgdG8gZ28gYWJvdmUgdGhlIHJvb3QsIGB1cGAgZW5kcyB1cCA+IDBcbiAgdmFyIHVwID0gMDtcbiAgZm9yICh2YXIgaSA9IHBhcnRzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgdmFyIGxhc3QgPSBwYXJ0c1tpXTtcbiAgICBpZiAobGFzdCA9PT0gJy4nKSB7XG4gICAgICBwYXJ0cy5zcGxpY2UoaSwgMSk7XG4gICAgfSBlbHNlIGlmIChsYXN0ID09PSAnLi4nKSB7XG4gICAgICBwYXJ0cy5zcGxpY2UoaSwgMSk7XG4gICAgICB1cCsrO1xuICAgIH0gZWxzZSBpZiAodXApIHtcbiAgICAgIHBhcnRzLnNwbGljZShpLCAxKTtcbiAgICAgIHVwLS07XG4gICAgfVxuICB9XG5cbiAgLy8gaWYgdGhlIHBhdGggaXMgYWxsb3dlZCB0byBnbyBhYm92ZSB0aGUgcm9vdCwgcmVzdG9yZSBsZWFkaW5nIC4uc1xuICBpZiAoYWxsb3dBYm92ZVJvb3QpIHtcbiAgICBmb3IgKDsgdXAtLTsgdXApIHtcbiAgICAgIHBhcnRzLnVuc2hpZnQoJy4uJyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHBhcnRzO1xufVxuXG4vLyBTcGxpdCBhIGZpbGVuYW1lIGludG8gW3Jvb3QsIGRpciwgYmFzZW5hbWUsIGV4dF0sIHVuaXggdmVyc2lvblxuLy8gJ3Jvb3QnIGlzIGp1c3QgYSBzbGFzaCwgb3Igbm90aGluZy5cbnZhciBzcGxpdFBhdGhSZSA9XG4gICAgL14oXFwvP3wpKFtcXHNcXFNdKj8pKCg/OlxcLnsxLDJ9fFteXFwvXSs/fCkoXFwuW14uXFwvXSp8KSkoPzpbXFwvXSopJC87XG52YXIgc3BsaXRQYXRoID0gZnVuY3Rpb24oZmlsZW5hbWUpIHtcbiAgcmV0dXJuIHNwbGl0UGF0aFJlLmV4ZWMoZmlsZW5hbWUpLnNsaWNlKDEpO1xufTtcblxuLy8gcGF0aC5yZXNvbHZlKFtmcm9tIC4uLl0sIHRvKVxuLy8gcG9zaXggdmVyc2lvblxuZXhwb3J0cy5yZXNvbHZlID0gZnVuY3Rpb24oKSB7XG4gIHZhciByZXNvbHZlZFBhdGggPSAnJyxcbiAgICAgIHJlc29sdmVkQWJzb2x1dGUgPSBmYWxzZTtcblxuICBmb3IgKHZhciBpID0gYXJndW1lbnRzLmxlbmd0aCAtIDE7IGkgPj0gLTEgJiYgIXJlc29sdmVkQWJzb2x1dGU7IGktLSkge1xuICAgIHZhciBwYXRoID0gKGkgPj0gMCkgPyBhcmd1bWVudHNbaV0gOiBwcm9jZXNzLmN3ZCgpO1xuXG4gICAgLy8gU2tpcCBlbXB0eSBhbmQgaW52YWxpZCBlbnRyaWVzXG4gICAgaWYgKHR5cGVvZiBwYXRoICE9PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnRzIHRvIHBhdGgucmVzb2x2ZSBtdXN0IGJlIHN0cmluZ3MnKTtcbiAgICB9IGVsc2UgaWYgKCFwYXRoKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICByZXNvbHZlZFBhdGggPSBwYXRoICsgJy8nICsgcmVzb2x2ZWRQYXRoO1xuICAgIHJlc29sdmVkQWJzb2x1dGUgPSBwYXRoLmNoYXJBdCgwKSA9PT0gJy8nO1xuICB9XG5cbiAgLy8gQXQgdGhpcyBwb2ludCB0aGUgcGF0aCBzaG91bGQgYmUgcmVzb2x2ZWQgdG8gYSBmdWxsIGFic29sdXRlIHBhdGgsIGJ1dFxuICAvLyBoYW5kbGUgcmVsYXRpdmUgcGF0aHMgdG8gYmUgc2FmZSAobWlnaHQgaGFwcGVuIHdoZW4gcHJvY2Vzcy5jd2QoKSBmYWlscylcblxuICAvLyBOb3JtYWxpemUgdGhlIHBhdGhcbiAgcmVzb2x2ZWRQYXRoID0gbm9ybWFsaXplQXJyYXkoZmlsdGVyKHJlc29sdmVkUGF0aC5zcGxpdCgnLycpLCBmdW5jdGlvbihwKSB7XG4gICAgcmV0dXJuICEhcDtcbiAgfSksICFyZXNvbHZlZEFic29sdXRlKS5qb2luKCcvJyk7XG5cbiAgcmV0dXJuICgocmVzb2x2ZWRBYnNvbHV0ZSA/ICcvJyA6ICcnKSArIHJlc29sdmVkUGF0aCkgfHwgJy4nO1xufTtcblxuLy8gcGF0aC5ub3JtYWxpemUocGF0aClcbi8vIHBvc2l4IHZlcnNpb25cbmV4cG9ydHMubm9ybWFsaXplID0gZnVuY3Rpb24ocGF0aCkge1xuICB2YXIgaXNBYnNvbHV0ZSA9IGV4cG9ydHMuaXNBYnNvbHV0ZShwYXRoKSxcbiAgICAgIHRyYWlsaW5nU2xhc2ggPSBzdWJzdHIocGF0aCwgLTEpID09PSAnLyc7XG5cbiAgLy8gTm9ybWFsaXplIHRoZSBwYXRoXG4gIHBhdGggPSBub3JtYWxpemVBcnJheShmaWx0ZXIocGF0aC5zcGxpdCgnLycpLCBmdW5jdGlvbihwKSB7XG4gICAgcmV0dXJuICEhcDtcbiAgfSksICFpc0Fic29sdXRlKS5qb2luKCcvJyk7XG5cbiAgaWYgKCFwYXRoICYmICFpc0Fic29sdXRlKSB7XG4gICAgcGF0aCA9ICcuJztcbiAgfVxuICBpZiAocGF0aCAmJiB0cmFpbGluZ1NsYXNoKSB7XG4gICAgcGF0aCArPSAnLyc7XG4gIH1cblxuICByZXR1cm4gKGlzQWJzb2x1dGUgPyAnLycgOiAnJykgKyBwYXRoO1xufTtcblxuLy8gcG9zaXggdmVyc2lvblxuZXhwb3J0cy5pc0Fic29sdXRlID0gZnVuY3Rpb24ocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICcvJztcbn07XG5cbi8vIHBvc2l4IHZlcnNpb25cbmV4cG9ydHMuam9pbiA9IGZ1bmN0aW9uKCkge1xuICB2YXIgcGF0aHMgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDApO1xuICByZXR1cm4gZXhwb3J0cy5ub3JtYWxpemUoZmlsdGVyKHBhdGhzLCBmdW5jdGlvbihwLCBpbmRleCkge1xuICAgIGlmICh0eXBlb2YgcCAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50cyB0byBwYXRoLmpvaW4gbXVzdCBiZSBzdHJpbmdzJyk7XG4gICAgfVxuICAgIHJldHVybiBwO1xuICB9KS5qb2luKCcvJykpO1xufTtcblxuXG4vLyBwYXRoLnJlbGF0aXZlKGZyb20sIHRvKVxuLy8gcG9zaXggdmVyc2lvblxuZXhwb3J0cy5yZWxhdGl2ZSA9IGZ1bmN0aW9uKGZyb20sIHRvKSB7XG4gIGZyb20gPSBleHBvcnRzLnJlc29sdmUoZnJvbSkuc3Vic3RyKDEpO1xuICB0byA9IGV4cG9ydHMucmVzb2x2ZSh0bykuc3Vic3RyKDEpO1xuXG4gIGZ1bmN0aW9uIHRyaW0oYXJyKSB7XG4gICAgdmFyIHN0YXJ0ID0gMDtcbiAgICBmb3IgKDsgc3RhcnQgPCBhcnIubGVuZ3RoOyBzdGFydCsrKSB7XG4gICAgICBpZiAoYXJyW3N0YXJ0XSAhPT0gJycpIGJyZWFrO1xuICAgIH1cblxuICAgIHZhciBlbmQgPSBhcnIubGVuZ3RoIC0gMTtcbiAgICBmb3IgKDsgZW5kID49IDA7IGVuZC0tKSB7XG4gICAgICBpZiAoYXJyW2VuZF0gIT09ICcnKSBicmVhaztcbiAgICB9XG5cbiAgICBpZiAoc3RhcnQgPiBlbmQpIHJldHVybiBbXTtcbiAgICByZXR1cm4gYXJyLnNsaWNlKHN0YXJ0LCBlbmQgLSBzdGFydCArIDEpO1xuICB9XG5cbiAgdmFyIGZyb21QYXJ0cyA9IHRyaW0oZnJvbS5zcGxpdCgnLycpKTtcbiAgdmFyIHRvUGFydHMgPSB0cmltKHRvLnNwbGl0KCcvJykpO1xuXG4gIHZhciBsZW5ndGggPSBNYXRoLm1pbihmcm9tUGFydHMubGVuZ3RoLCB0b1BhcnRzLmxlbmd0aCk7XG4gIHZhciBzYW1lUGFydHNMZW5ndGggPSBsZW5ndGg7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoZnJvbVBhcnRzW2ldICE9PSB0b1BhcnRzW2ldKSB7XG4gICAgICBzYW1lUGFydHNMZW5ndGggPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgdmFyIG91dHB1dFBhcnRzID0gW107XG4gIGZvciAodmFyIGkgPSBzYW1lUGFydHNMZW5ndGg7IGkgPCBmcm9tUGFydHMubGVuZ3RoOyBpKyspIHtcbiAgICBvdXRwdXRQYXJ0cy5wdXNoKCcuLicpO1xuICB9XG5cbiAgb3V0cHV0UGFydHMgPSBvdXRwdXRQYXJ0cy5jb25jYXQodG9QYXJ0cy5zbGljZShzYW1lUGFydHNMZW5ndGgpKTtcblxuICByZXR1cm4gb3V0cHV0UGFydHMuam9pbignLycpO1xufTtcblxuZXhwb3J0cy5zZXAgPSAnLyc7XG5leHBvcnRzLmRlbGltaXRlciA9ICc6JztcblxuZXhwb3J0cy5kaXJuYW1lID0gZnVuY3Rpb24ocGF0aCkge1xuICB2YXIgcmVzdWx0ID0gc3BsaXRQYXRoKHBhdGgpLFxuICAgICAgcm9vdCA9IHJlc3VsdFswXSxcbiAgICAgIGRpciA9IHJlc3VsdFsxXTtcblxuICBpZiAoIXJvb3QgJiYgIWRpcikge1xuICAgIC8vIE5vIGRpcm5hbWUgd2hhdHNvZXZlclxuICAgIHJldHVybiAnLic7XG4gIH1cblxuICBpZiAoZGlyKSB7XG4gICAgLy8gSXQgaGFzIGEgZGlybmFtZSwgc3RyaXAgdHJhaWxpbmcgc2xhc2hcbiAgICBkaXIgPSBkaXIuc3Vic3RyKDAsIGRpci5sZW5ndGggLSAxKTtcbiAgfVxuXG4gIHJldHVybiByb290ICsgZGlyO1xufTtcblxuXG5leHBvcnRzLmJhc2VuYW1lID0gZnVuY3Rpb24ocGF0aCwgZXh0KSB7XG4gIHZhciBmID0gc3BsaXRQYXRoKHBhdGgpWzJdO1xuICAvLyBUT0RPOiBtYWtlIHRoaXMgY29tcGFyaXNvbiBjYXNlLWluc2Vuc2l0aXZlIG9uIHdpbmRvd3M/XG4gIGlmIChleHQgJiYgZi5zdWJzdHIoLTEgKiBleHQubGVuZ3RoKSA9PT0gZXh0KSB7XG4gICAgZiA9IGYuc3Vic3RyKDAsIGYubGVuZ3RoIC0gZXh0Lmxlbmd0aCk7XG4gIH1cbiAgcmV0dXJuIGY7XG59O1xuXG5cbmV4cG9ydHMuZXh0bmFtZSA9IGZ1bmN0aW9uKHBhdGgpIHtcbiAgcmV0dXJuIHNwbGl0UGF0aChwYXRoKVszXTtcbn07XG5cbmZ1bmN0aW9uIGZpbHRlciAoeHMsIGYpIHtcbiAgICBpZiAoeHMuZmlsdGVyKSByZXR1cm4geHMuZmlsdGVyKGYpO1xuICAgIHZhciByZXMgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHhzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChmKHhzW2ldLCBpLCB4cykpIHJlcy5wdXNoKHhzW2ldKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbn1cblxuLy8gU3RyaW5nLnByb3RvdHlwZS5zdWJzdHIgLSBuZWdhdGl2ZSBpbmRleCBkb24ndCB3b3JrIGluIElFOFxudmFyIHN1YnN0ciA9ICdhYicuc3Vic3RyKC0xKSA9PT0gJ2InXG4gICAgPyBmdW5jdGlvbiAoc3RyLCBzdGFydCwgbGVuKSB7IHJldHVybiBzdHIuc3Vic3RyKHN0YXJ0LCBsZW4pIH1cbiAgICA6IGZ1bmN0aW9uIChzdHIsIHN0YXJ0LCBsZW4pIHtcbiAgICAgICAgaWYgKHN0YXJ0IDwgMCkgc3RhcnQgPSBzdHIubGVuZ3RoICsgc3RhcnQ7XG4gICAgICAgIHJldHVybiBzdHIuc3Vic3RyKHN0YXJ0LCBsZW4pO1xuICAgIH1cbjtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9wYXRoLWJyb3dzZXJpZnkvaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDI5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _Sidebar2 = __webpack_require__(5);\n\nvar _Sidebar3 = _interopRequireDefault(_Sidebar2);\n\nvar _EE = __webpack_require__(1);\n\nvar _EE2 = _interopRequireDefault(_EE);\n\nvar _flatpickr = __webpack_require__(31);\n\nvar _flatpickr2 = _interopRequireDefault(_flatpickr);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar PageSettings = function (_Sidebar) {\n    _inherits(PageSettings, _Sidebar);\n\n    function PageSettings() {\n        _classCallCheck(this, PageSettings);\n\n        return _possibleConstructorReturn(this, (PageSettings.__proto__ || Object.getPrototypeOf(PageSettings)).apply(this, arguments));\n    }\n\n    _createClass(PageSettings, [{\n        key: 'init',\n        value: function init() {\n            this.pageSettings = this.config.pageSettings;\n            this.content = this.render();\n        }\n    }, {\n        key: 'click',\n        value: function click() {\n            return this.content;\n        }\n    }, {\n        key: 'render',\n        value: function render() {\n            var form = document.createElement('form');\n            form.classList.add('fred--page_settings_form');\n\n            form.appendChild(this.getGeneralFields());\n            form.appendChild(this.getAdvancedFields());\n\n            var save = document.createElement('button');\n            save.setAttribute('type', 'button');\n            save.classList.add('fred--btn-sidebar', 'fred--settings_form_save');\n            save.innerText = 'Save';\n\n            save.addEventListener('click', function (e) {\n                e.preventDefault();\n                _EE2.default.emit('fred-save');\n            });\n\n            form.appendChild(save);\n\n            return form;\n        }\n    }, {\n        key: 'getGeneralFields',\n        value: function getGeneralFields() {\n            var fieldset = document.createElement('fieldset');\n\n            fieldset.appendChild(this.buildTextInput('pagetitle', 'Page Title'));\n            fieldset.appendChild(this.buildTextInput('longtitle', 'Long Title'));\n            fieldset.appendChild(this.buildTextAreaInput('description', 'Description'));\n            fieldset.appendChild(this.buildTextAreaInput('introtext', 'Intro Text'));\n            fieldset.appendChild(this.buildTextInput('menutitle', 'Menu Title'));\n            fieldset.appendChild(this.buildTextInput('alias', 'Alias'));\n            fieldset.appendChild(this.buildToggleInput('published', 'Published'));\n            fieldset.appendChild(this.buildToggleInput('hidemenu', 'Hide from Menu'));\n\n            return fieldset;\n        }\n    }, {\n        key: 'getAdvancedFields',\n        value: function getAdvancedFields() {\n            var dl = document.createElement('dl');\n\n            var dt = document.createElement('dt');\n            dt.setAttribute('role', 'tab');\n            dt.setAttribute('tabindex', '0');\n            dt.innerHTML = 'Advanced Settings';\n\n            dt.addEventListener('click', function (e) {\n                e.preventDefault();\n                dt.classList.toggle('active');\n            });\n\n            var dd = document.createElement('dd');\n            var fieldset = document.createElement('fieldset');\n            fieldset.classList.add('fred--page_settings_form_advanced');\n\n            fieldset.appendChild(this.buildDateTimeInput('publishedon', 'Published On'));\n            fieldset.appendChild(this.buildDateTimeInput('publishon', 'Publish On'));\n            fieldset.appendChild(this.buildDateTimeInput('unpublishon', 'Unpublish On'));\n            fieldset.appendChild(this.buildTextInput('menuindex', 'Menu Index'));\n            fieldset.appendChild(this.buildToggleInput('deleted', 'Deleted'));\n\n            dd.appendChild(fieldset);\n\n            dl.appendChild(dt);\n            dl.appendChild(dd);\n\n            return dl;\n        }\n    }, {\n        key: 'buildTextInput',\n        value: function buildTextInput(name, label) {\n            var _this2 = this;\n\n            var labelEl = document.createElement('label');\n            labelEl.innerHTML = label;\n\n            var input = document.createElement('input');\n            input.type = 'text';\n            input.value = this.pageSettings[name];\n\n            input.addEventListener('keyup', function (e) {\n                _this2.pageSettings[name] = input.value;\n\n                _EE2.default.emit('fred-page-setting-change', name, input.value, input);\n            });\n\n            _EE2.default.on('fred-page-setting-change', function (settingName, settingValue, sourceEl) {\n                if (input !== sourceEl && name === settingName) {\n                    _this2.pageSettings[settingName] = settingValue;\n                    input.value = settingValue;\n                }\n            });\n\n            labelEl.appendChild(input);\n\n            return labelEl;\n        }\n    }, {\n        key: 'buildTextAreaInput',\n        value: function buildTextAreaInput(name, label) {\n            var _this3 = this;\n\n            var labelEl = document.createElement('label');\n            labelEl.innerHTML = label;\n\n            var textarea = document.createElement('textarea');\n            textarea.innerHTML = this.pageSettings[name];\n\n            textarea.addEventListener('keyup', function (e) {\n                _this3.pageSettings[name] = textarea.value;\n\n                _EE2.default.emit('fred-page-setting-change', name, textarea.value, textarea);\n            });\n\n            _EE2.default.on('fred-page-setting-change', function (settingName, settingValue, sourceEl) {\n                if (textarea !== sourceEl && name === settingName) {\n                    _this3.pageSettings[settingName] = settingValue;\n                    textarea.value = settingValue;\n                }\n            });\n\n            labelEl.appendChild(textarea);\n\n            return labelEl;\n        }\n    }, {\n        key: 'buildToggleInput',\n        value: function buildToggleInput(name, label) {\n            var _this4 = this;\n\n            var labelEl = document.createElement('label');\n            labelEl.classList.add('fred--page_settings_form_checkbox', 'fred--toggle');\n            labelEl.innerHTML = label;\n\n            var input = document.createElement('input');\n            input.setAttribute('type', 'checkbox');\n            if (this.pageSettings[name] === true) {\n                input.setAttribute('checked', 'checked');\n            }\n\n            input.addEventListener('change', function (e) {\n                _this4.pageSettings[name] = e.target.checked;\n            });\n\n            var span = document.createElement('span');\n\n            labelEl.appendChild(input);\n            labelEl.appendChild(span);\n\n            return labelEl;\n        }\n    }, {\n        key: 'buildDateTimeInput',\n        value: function buildDateTimeInput(name, label) {\n            var _this5 = this;\n\n            var labelEl = document.createElement('label');\n            labelEl.innerHTML = label;\n\n            var group = document.createElement('div');\n            group.classList.add('fred--input-group', 'fred--datetime');\n\n            var input = document.createElement('input');\n\n            var picker = (0, _flatpickr2.default)(input, {\n                enableTime: true,\n                dateFormat: \"Y-m-d H:i\",\n                appendTo: group,\n                defaultDate: this.pageSettings[name] === 0 ? '' : this.pageSettings[name] * 1000,\n                onChange: function onChange(selectedDates) {\n                    if (selectedDates.length === 0) {\n                        _this5.pageSettings[name] = 0;\n                    } else {\n                        _this5.pageSettings[name] = selectedDates[0].getTime() / 1000;\n                    }\n                }\n            });\n\n            var clear = document.createElement('a');\n            clear.classList.add('fred--close-small');\n            clear.setAttribute('title', 'Clear');\n            clear.addEventListener('click', function (e) {\n                e.preventDefault();\n                picker.clear();\n            });\n\n            group.appendChild(input);\n            group.appendChild(clear);\n\n            labelEl.appendChild(group);\n\n            return labelEl;\n        }\n    }]);\n\n    return PageSettings;\n}(_Sidebar3.default);\n\nPageSettings.title = 'Page Settings';\nPageSettings.expandable = true;\nexports.default = PageSettings;\nmodule.exports = exports['default'];\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

	eval("/* flatpickr v4.4.3, @license MIT */\n(function (global, factory) {\n     true ? module.exports = factory() :\n    typeof define === 'function' && define.amd ? define(factory) :\n    (global.flatpickr = factory());\n}(this, (function () { 'use strict';\n\n    var pad = function pad(number) {\n      return (\"0\" + number).slice(-2);\n    };\n    var int = function int(bool) {\n      return bool === true ? 1 : 0;\n    };\n    function debounce(func, wait, immediate) {\n      if (immediate === void 0) {\n        immediate = false;\n      }\n\n      var timeout;\n      return function () {\n        var context = this,\n            args = arguments;\n        timeout !== null && clearTimeout(timeout);\n        timeout = window.setTimeout(function () {\n          timeout = null;\n          if (!immediate) func.apply(context, args);\n        }, wait);\n        if (immediate && !timeout) func.apply(context, args);\n      };\n    }\n    var arrayify = function arrayify(obj) {\n      return obj instanceof Array ? obj : [obj];\n    };\n\n    var do_nothing = function do_nothing() {\n      return undefined;\n    };\n\n    var monthToStr = function monthToStr(monthNumber, shorthand, locale) {\n      return locale.months[shorthand ? \"shorthand\" : \"longhand\"][monthNumber];\n    };\n    var revFormat = {\n      D: do_nothing,\n      F: function F(dateObj, monthName, locale) {\n        dateObj.setMonth(locale.months.longhand.indexOf(monthName));\n      },\n      G: function G(dateObj, hour) {\n        dateObj.setHours(parseFloat(hour));\n      },\n      H: function H(dateObj, hour) {\n        dateObj.setHours(parseFloat(hour));\n      },\n      J: function J(dateObj, day) {\n        dateObj.setDate(parseFloat(day));\n      },\n      K: function K(dateObj, amPM, locale) {\n        dateObj.setHours(dateObj.getHours() % 12 + 12 * int(new RegExp(locale.amPM[1], \"i\").test(amPM)));\n      },\n      M: function M(dateObj, shortMonth, locale) {\n        dateObj.setMonth(locale.months.shorthand.indexOf(shortMonth));\n      },\n      S: function S(dateObj, seconds) {\n        dateObj.setSeconds(parseFloat(seconds));\n      },\n      U: function U(_, unixSeconds) {\n        return new Date(parseFloat(unixSeconds) * 1000);\n      },\n      W: function W(dateObj, weekNum) {\n        var weekNumber = parseInt(weekNum);\n        return new Date(dateObj.getFullYear(), 0, 2 + (weekNumber - 1) * 7, 0, 0, 0, 0);\n      },\n      Y: function Y(dateObj, year) {\n        dateObj.setFullYear(parseFloat(year));\n      },\n      Z: function Z(_, ISODate) {\n        return new Date(ISODate);\n      },\n      d: function d(dateObj, day) {\n        dateObj.setDate(parseFloat(day));\n      },\n      h: function h(dateObj, hour) {\n        dateObj.setHours(parseFloat(hour));\n      },\n      i: function i(dateObj, minutes) {\n        dateObj.setMinutes(parseFloat(minutes));\n      },\n      j: function j(dateObj, day) {\n        dateObj.setDate(parseFloat(day));\n      },\n      l: do_nothing,\n      m: function m(dateObj, month) {\n        dateObj.setMonth(parseFloat(month) - 1);\n      },\n      n: function n(dateObj, month) {\n        dateObj.setMonth(parseFloat(month) - 1);\n      },\n      s: function s(dateObj, seconds) {\n        dateObj.setSeconds(parseFloat(seconds));\n      },\n      w: do_nothing,\n      y: function y(dateObj, year) {\n        dateObj.setFullYear(2000 + parseFloat(year));\n      }\n    };\n    var tokenRegex = {\n      D: \"(\\\\w+)\",\n      F: \"(\\\\w+)\",\n      G: \"(\\\\d\\\\d|\\\\d)\",\n      H: \"(\\\\d\\\\d|\\\\d)\",\n      J: \"(\\\\d\\\\d|\\\\d)\\\\w+\",\n      K: \"\",\n      M: \"(\\\\w+)\",\n      S: \"(\\\\d\\\\d|\\\\d)\",\n      U: \"(.+)\",\n      W: \"(\\\\d\\\\d|\\\\d)\",\n      Y: \"(\\\\d{4})\",\n      Z: \"(.+)\",\n      d: \"(\\\\d\\\\d|\\\\d)\",\n      h: \"(\\\\d\\\\d|\\\\d)\",\n      i: \"(\\\\d\\\\d|\\\\d)\",\n      j: \"(\\\\d\\\\d|\\\\d)\",\n      l: \"(\\\\w+)\",\n      m: \"(\\\\d\\\\d|\\\\d)\",\n      n: \"(\\\\d\\\\d|\\\\d)\",\n      s: \"(\\\\d\\\\d|\\\\d)\",\n      w: \"(\\\\d\\\\d|\\\\d)\",\n      y: \"(\\\\d{2})\"\n    };\n    var formats = {\n      Z: function Z(date) {\n        return date.toISOString();\n      },\n      D: function D(date, locale, options) {\n        return locale.weekdays.shorthand[formats.w(date, locale, options)];\n      },\n      F: function F(date, locale, options) {\n        return monthToStr(formats.n(date, locale, options) - 1, false, locale);\n      },\n      G: function G(date, locale, options) {\n        return pad(formats.h(date, locale, options));\n      },\n      H: function H(date) {\n        return pad(date.getHours());\n      },\n      J: function J(date, locale) {\n        return locale.ordinal !== undefined ? date.getDate() + locale.ordinal(date.getDate()) : date.getDate();\n      },\n      K: function K(date, locale) {\n        return locale.amPM[int(date.getHours() > 11)];\n      },\n      M: function M(date, locale) {\n        return monthToStr(date.getMonth(), true, locale);\n      },\n      S: function S(date) {\n        return pad(date.getSeconds());\n      },\n      U: function U(date) {\n        return date.getTime() / 1000;\n      },\n      W: function W(date, _, options) {\n        return options.getWeek(date);\n      },\n      Y: function Y(date) {\n        return date.getFullYear();\n      },\n      d: function d(date) {\n        return pad(date.getDate());\n      },\n      h: function h(date) {\n        return date.getHours() % 12 ? date.getHours() % 12 : 12;\n      },\n      i: function i(date) {\n        return pad(date.getMinutes());\n      },\n      j: function j(date) {\n        return date.getDate();\n      },\n      l: function l(date, locale) {\n        return locale.weekdays.longhand[date.getDay()];\n      },\n      m: function m(date) {\n        return pad(date.getMonth() + 1);\n      },\n      n: function n(date) {\n        return date.getMonth() + 1;\n      },\n      s: function s(date) {\n        return date.getSeconds();\n      },\n      w: function w(date) {\n        return date.getDay();\n      },\n      y: function y(date) {\n        return String(date.getFullYear()).substring(2);\n      }\n    };\n\n    var english = {\n      weekdays: {\n        shorthand: [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"],\n        longhand: [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"]\n      },\n      months: {\n        shorthand: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"],\n        longhand: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\n      },\n      daysInMonth: [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],\n      firstDayOfWeek: 0,\n      ordinal: function ordinal(nth) {\n        var s = nth % 100;\n        if (s > 3 && s < 21) return \"th\";\n\n        switch (s % 10) {\n          case 1:\n            return \"st\";\n\n          case 2:\n            return \"nd\";\n\n          case 3:\n            return \"rd\";\n\n          default:\n            return \"th\";\n        }\n      },\n      rangeSeparator: \" to \",\n      weekAbbreviation: \"Wk\",\n      scrollTitle: \"Scroll to increment\",\n      toggleTitle: \"Click to toggle\",\n      amPM: [\"AM\", \"PM\"],\n      yearAriaLabel: \"Year\"\n    };\n\n    var createDateFormatter = function createDateFormatter(_ref) {\n      var _ref$config = _ref.config,\n          config = _ref$config === void 0 ? defaults : _ref$config,\n          _ref$l10n = _ref.l10n,\n          l10n = _ref$l10n === void 0 ? english : _ref$l10n;\n      return function (dateObj, frmt, overrideLocale) {\n        if (config.formatDate !== undefined) return config.formatDate(dateObj, frmt);\n        var locale = overrideLocale || l10n;\n        return frmt.split(\"\").map(function (c, i, arr) {\n          return formats[c] && arr[i - 1] !== \"\\\\\" ? formats[c](dateObj, locale, config) : c !== \"\\\\\" ? c : \"\";\n        }).join(\"\");\n      };\n    };\n    var createDateParser = function createDateParser(_ref2) {\n      var _ref2$config = _ref2.config,\n          config = _ref2$config === void 0 ? defaults : _ref2$config,\n          _ref2$l10n = _ref2.l10n,\n          l10n = _ref2$l10n === void 0 ? english : _ref2$l10n;\n      return function (date, givenFormat, timeless) {\n        if (date !== 0 && !date) return undefined;\n        var parsedDate;\n        var date_orig = date;\n        if (date instanceof Date) parsedDate = new Date(date.getTime());else if (typeof date !== \"string\" && date.toFixed !== undefined) parsedDate = new Date(date);else if (typeof date === \"string\") {\n          var format = givenFormat || (config || defaults).dateFormat;\n          var datestr = String(date).trim();\n\n          if (datestr === \"today\") {\n            parsedDate = new Date();\n            timeless = true;\n          } else if (/Z$/.test(datestr) || /GMT$/.test(datestr)) parsedDate = new Date(date);else if (config && config.parseDate) parsedDate = config.parseDate(date, format);else {\n            parsedDate = !config || !config.noCalendar ? new Date(new Date().getFullYear(), 0, 1, 0, 0, 0, 0) : new Date(new Date().setHours(0, 0, 0, 0));\n            var matched,\n                ops = [];\n\n            for (var i = 0, matchIndex = 0, regexStr = \"\"; i < format.length; i++) {\n              var token = format[i];\n              var isBackSlash = token === \"\\\\\";\n              var escaped = format[i - 1] === \"\\\\\" || isBackSlash;\n\n              if (tokenRegex[token] && !escaped) {\n                regexStr += tokenRegex[token];\n                var match = new RegExp(regexStr).exec(date);\n\n                if (match && (matched = true)) {\n                  ops[token !== \"Y\" ? \"push\" : \"unshift\"]({\n                    fn: revFormat[token],\n                    val: match[++matchIndex]\n                  });\n                }\n              } else if (!isBackSlash) regexStr += \".\";\n\n              ops.forEach(function (_ref3) {\n                var fn = _ref3.fn,\n                    val = _ref3.val;\n                return parsedDate = fn(parsedDate, val, l10n) || parsedDate;\n              });\n            }\n\n            parsedDate = matched ? parsedDate : undefined;\n          }\n        }\n\n        if (!(parsedDate instanceof Date)) {\n          config.errorHandler(new Error(\"Invalid date provided: \" + date_orig));\n          return undefined;\n        }\n\n        if (timeless === true) parsedDate.setHours(0, 0, 0, 0);\n        return parsedDate;\n      };\n    };\n    function compareDates(date1, date2, timeless) {\n      if (timeless === void 0) {\n        timeless = true;\n      }\n\n      if (timeless !== false) {\n        return new Date(date1.getTime()).setHours(0, 0, 0, 0) - new Date(date2.getTime()).setHours(0, 0, 0, 0);\n      }\n\n      return date1.getTime() - date2.getTime();\n    }\n    var getWeek = function getWeek(givenDate) {\n      var date = new Date(givenDate.getTime());\n      date.setHours(0, 0, 0, 0);\n      date.setDate(date.getDate() + 3 - (date.getDay() + 6) % 7);\n      var week1 = new Date(date.getFullYear(), 0, 4);\n      return 1 + Math.round(((date.getTime() - week1.getTime()) / 86400000 - 3 + (week1.getDay() + 6) % 7) / 7);\n    };\n    var isBetween = function isBetween(ts, ts1, ts2) {\n      return ts > Math.min(ts1, ts2) && ts < Math.max(ts1, ts2);\n    };\n    var duration = {\n      DAY: 86400000\n    };\n\n    var defaults = {\n      _disable: [],\n      _enable: [],\n      allowInput: false,\n      altFormat: \"F j, Y\",\n      altInput: false,\n      altInputClass: \"form-control input\",\n      animate: typeof window === \"object\" && window.navigator.userAgent.indexOf(\"MSIE\") === -1,\n      ariaDateFormat: \"F j, Y\",\n      clickOpens: true,\n      closeOnSelect: true,\n      conjunction: \", \",\n      dateFormat: \"Y-m-d\",\n      defaultHour: 12,\n      defaultMinute: 0,\n      defaultSeconds: 0,\n      disable: [],\n      disableMobile: false,\n      enable: [],\n      enableSeconds: false,\n      enableTime: false,\n      errorHandler: console.warn,\n      getWeek: getWeek,\n      hourIncrement: 1,\n      ignoredFocusElements: [],\n      inline: false,\n      locale: \"default\",\n      minuteIncrement: 5,\n      mode: \"single\",\n      nextArrow: \"<svg version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 17 17'><g></g><path d='M13.207 8.472l-7.854 7.854-0.707-0.707 7.146-7.146-7.146-7.148 0.707-0.707 7.854 7.854z' /></svg>\",\n      noCalendar: false,\n      now: new Date(),\n      onChange: [],\n      onClose: [],\n      onDayCreate: [],\n      onDestroy: [],\n      onKeyDown: [],\n      onMonthChange: [],\n      onOpen: [],\n      onParseConfig: [],\n      onReady: [],\n      onValueUpdate: [],\n      onYearChange: [],\n      onPreCalendarPosition: [],\n      plugins: [],\n      position: \"auto\",\n      positionElement: undefined,\n      prevArrow: \"<svg version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 17 17'><g></g><path d='M5.207 8.471l7.146 7.147-0.707 0.707-7.853-7.854 7.854-7.853 0.707 0.707-7.147 7.146z' /></svg>\",\n      shorthandCurrentMonth: false,\n      showMonths: 1,\n      static: false,\n      time_24hr: false,\n      weekNumbers: false,\n      wrap: false\n    };\n\n    function toggleClass(elem, className, bool) {\n      if (bool === true) return elem.classList.add(className);\n      elem.classList.remove(className);\n    }\n    function createElement(tag, className, content) {\n      var e = window.document.createElement(tag);\n      className = className || \"\";\n      content = content || \"\";\n      e.className = className;\n      if (content !== undefined) e.textContent = content;\n      return e;\n    }\n    function clearNode(node) {\n      while (node.firstChild) {\n        node.removeChild(node.firstChild);\n      }\n    }\n    function findParent(node, condition) {\n      if (condition(node)) return node;else if (node.parentNode) return findParent(node.parentNode, condition);\n      return undefined;\n    }\n    function createNumberInput(inputClassName, opts) {\n      var wrapper = createElement(\"div\", \"numInputWrapper\"),\n          numInput = createElement(\"input\", \"numInput \" + inputClassName),\n          arrowUp = createElement(\"span\", \"arrowUp\"),\n          arrowDown = createElement(\"span\", \"arrowDown\");\n      numInput.type = \"text\";\n      numInput.pattern = \"\\\\d*\";\n      if (opts !== undefined) for (var key in opts) {\n        numInput.setAttribute(key, opts[key]);\n      }\n      wrapper.appendChild(numInput);\n      wrapper.appendChild(arrowUp);\n      wrapper.appendChild(arrowDown);\n      return wrapper;\n    }\n\n    if (typeof Object.assign !== \"function\") {\n      Object.assign = function (target) {\n        if (!target) {\n          throw TypeError(\"Cannot convert undefined or null to object\");\n        }\n\n        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          args[_key - 1] = arguments[_key];\n        }\n\n        var _loop = function _loop(source) {\n          if (source) {\n            Object.keys(source).forEach(function (key) {\n              return target[key] = source[key];\n            });\n          }\n        };\n\n        for (var _i = 0; _i < args.length; _i++) {\n          var source = args[_i];\n\n          _loop(source);\n        }\n\n        return target;\n      };\n    }\n\n    var DEBOUNCED_CHANGE_MS = 300;\n\n    function FlatpickrInstance(element, instanceConfig) {\n      var self = {\n        config: Object.assign({}, flatpickr.defaultConfig),\n        l10n: english\n      };\n      self.parseDate = createDateParser({\n        config: self.config,\n        l10n: self.l10n\n      });\n      self._handlers = [];\n      self._bind = bind;\n      self._setHoursFromDate = setHoursFromDate;\n      self.changeMonth = changeMonth;\n      self.changeYear = changeYear;\n      self.clear = clear;\n      self.close = close;\n      self._createElement = createElement;\n      self.destroy = destroy;\n      self.isEnabled = isEnabled;\n      self.jumpToDate = jumpToDate;\n      self.open = open;\n      self.redraw = redraw;\n      self.set = set;\n      self.setDate = setDate;\n      self.toggle = toggle;\n\n      function setupHelperFunctions() {\n        self.utils = {\n          getDaysInMonth: function getDaysInMonth(month, yr) {\n            if (month === void 0) {\n              month = self.currentMonth;\n            }\n\n            if (yr === void 0) {\n              yr = self.currentYear;\n            }\n\n            if (month === 1 && (yr % 4 === 0 && yr % 100 !== 0 || yr % 400 === 0)) return 29;\n            return self.l10n.daysInMonth[month];\n          }\n        };\n      }\n\n      function init() {\n        self.element = self.input = element;\n        self.isOpen = false;\n        parseConfig();\n        setupLocale();\n        setupInputs();\n        setupDates();\n        setupHelperFunctions();\n        if (!self.isMobile) build();\n        bindEvents();\n\n        if (self.selectedDates.length || self.config.noCalendar) {\n          if (self.config.enableTime) {\n            setHoursFromDate(self.config.noCalendar ? self.latestSelectedDateObj || self.config.minDate : undefined);\n          }\n\n          updateValue(false);\n        }\n\n        self.showTimeInput = self.selectedDates.length > 0 || self.config.noCalendar;\n\n        if (self.daysContainer !== undefined) {\n          self.calendarContainer.style.visibility = \"hidden\";\n          self.calendarContainer.style.display = \"block\";\n          var daysWidth = (self.daysContainer.offsetWidth + 1) * self.config.showMonths;\n          self.daysContainer.style.width = daysWidth + \"px\";\n          self.calendarContainer.style.width = daysWidth + \"px\";\n\n          if (self.weekWrapper !== undefined) {\n            self.calendarContainer.style.width = daysWidth + self.weekWrapper.offsetWidth + \"px\";\n          }\n\n          self.calendarContainer.style.visibility = \"visible\";\n          self.calendarContainer.style.display = null;\n        }\n\n        var isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);\n\n        if (!self.isMobile && isSafari) {\n          positionCalendar();\n        }\n\n        triggerEvent(\"onReady\");\n      }\n\n      function bindToInstance(fn) {\n        return fn.bind(self);\n      }\n\n      function updateTime(e) {\n        if (self.selectedDates.length === 0) return;\n        timeWrapper(e);\n\n        if (e.type !== \"input\") {\n          setHoursFromInputs();\n          updateValue();\n        } else {\n          setTimeout(function () {\n            setHoursFromInputs();\n            updateValue();\n          }, DEBOUNCED_CHANGE_MS);\n        }\n      }\n\n      function ampm2military(hour, amPM) {\n        return hour % 12 + 12 * int(amPM === self.l10n.amPM[1]);\n      }\n\n      function military2ampm(hour) {\n        switch (hour % 24) {\n          case 0:\n          case 12:\n            return 12;\n\n          default:\n            return hour % 12;\n        }\n      }\n\n      function setHoursFromInputs() {\n        if (self.hourElement === undefined || self.minuteElement === undefined) return;\n        var hours = (parseInt(self.hourElement.value.slice(-2), 10) || 0) % 24,\n            minutes = (parseInt(self.minuteElement.value, 10) || 0) % 60,\n            seconds = self.secondElement !== undefined ? (parseInt(self.secondElement.value, 10) || 0) % 60 : 0;\n        if (self.amPM !== undefined) hours = ampm2military(hours, self.amPM.textContent);\n        var limitMinHours = self.config.minTime !== undefined || self.config.minDate && self.minDateHasTime && self.latestSelectedDateObj && compareDates(self.latestSelectedDateObj, self.config.minDate, true) === 0;\n        var limitMaxHours = self.config.maxTime !== undefined || self.config.maxDate && self.maxDateHasTime && self.latestSelectedDateObj && compareDates(self.latestSelectedDateObj, self.config.maxDate, true) === 0;\n\n        if (limitMaxHours) {\n          var maxTime = self.config.maxTime !== undefined ? self.config.maxTime : self.config.maxDate;\n          hours = Math.min(hours, maxTime.getHours());\n          if (hours === maxTime.getHours()) minutes = Math.min(minutes, maxTime.getMinutes());\n          if (minutes === maxTime.getMinutes()) seconds = Math.min(seconds, maxTime.getSeconds());\n        }\n\n        if (limitMinHours) {\n          var minTime = self.config.minTime !== undefined ? self.config.minTime : self.config.minDate;\n          hours = Math.max(hours, minTime.getHours());\n          if (hours === minTime.getHours()) minutes = Math.max(minutes, minTime.getMinutes());\n          if (minutes === minTime.getMinutes()) seconds = Math.max(seconds, minTime.getSeconds());\n        }\n\n        setHours(hours, minutes, seconds);\n      }\n\n      function setHoursFromDate(dateObj) {\n        var date = dateObj || self.latestSelectedDateObj;\n        if (date) setHours(date.getHours(), date.getMinutes(), date.getSeconds());\n      }\n\n      function setHours(hours, minutes, seconds) {\n        if (self.latestSelectedDateObj !== undefined) {\n          self.latestSelectedDateObj.setHours(hours % 24, minutes, seconds || 0, 0);\n        }\n\n        if (!self.hourElement || !self.minuteElement || self.isMobile) return;\n        self.hourElement.value = pad(!self.config.time_24hr ? (12 + hours) % 12 + 12 * int(hours % 12 === 0) : hours);\n        self.minuteElement.value = pad(minutes);\n        if (self.amPM !== undefined) self.amPM.textContent = self.l10n.amPM[int(hours >= 12)];\n        if (self.secondElement !== undefined) self.secondElement.value = pad(seconds);\n      }\n\n      function onYearInput(event) {\n        var year = parseInt(event.target.value) + (event.delta || 0);\n\n        if (year.toString().length === 4 || event.key === \"Enter\") {\n          event.target.blur();\n          if (!/[^\\d]/.test(year.toString())) changeYear(year);\n        }\n      }\n\n      function bind(element, event, handler, options) {\n        if (event instanceof Array) return event.forEach(function (ev) {\n          return bind(element, ev, handler, options);\n        });\n        if (element instanceof Array) return element.forEach(function (el) {\n          return bind(el, event, handler, options);\n        });\n        element.addEventListener(event, handler, options);\n\n        self._handlers.push({\n          element: element,\n          event: event,\n          handler: handler\n        });\n      }\n\n      function onClick(handler) {\n        return function (evt) {\n          evt.which === 1 && handler(evt);\n        };\n      }\n\n      function triggerChange() {\n        triggerEvent(\"onChange\");\n      }\n\n      function bindEvents() {\n        if (self.config.wrap) {\n          [\"open\", \"close\", \"toggle\", \"clear\"].forEach(function (evt) {\n            Array.prototype.forEach.call(self.element.querySelectorAll(\"[data-\" + evt + \"]\"), function (el) {\n              return bind(el, \"click\", self[evt]);\n            });\n          });\n        }\n\n        if (self.isMobile) {\n          setupMobile();\n          return;\n        }\n\n        var debouncedResize = debounce(onResize, 50);\n        self._debouncedChange = debounce(triggerChange, DEBOUNCED_CHANGE_MS);\n        if (self.daysContainer && !/iPhone|iPad|iPod/i.test(navigator.userAgent)) bind(self.daysContainer, \"mouseover\", function (e) {\n          if (self.config.mode === \"range\") onMouseOver(e.target);\n        });\n        bind(window.document.body, \"keydown\", onKeyDown);\n        if (!self.config.static) bind(self._input, \"keydown\", onKeyDown);\n        if (!self.config.inline && !self.config.static) bind(window, \"resize\", debouncedResize);\n        if (window.ontouchstart !== undefined) bind(window.document, \"touchstart\", documentClick);\n        bind(window.document, \"mousedown\", onClick(documentClick));\n        bind(window.document, \"focus\", documentClick, {\n          capture: true\n        });\n\n        if (self.config.clickOpens === true) {\n          bind(self._input, \"focus\", self.open);\n          bind(self._input, \"mousedown\", onClick(self.open));\n        }\n\n        if (self.daysContainer !== undefined) {\n          bind(self.monthNav, \"mousedown\", onClick(onMonthNavClick));\n          bind(self.monthNav, [\"keyup\", \"increment\"], onYearInput);\n          bind(self.daysContainer, \"mousedown\", onClick(selectDate));\n        }\n\n        if (self.timeContainer !== undefined && self.minuteElement !== undefined && self.hourElement !== undefined) {\n          var selText = function selText(e) {\n            return e.target.select();\n          };\n\n          bind(self.timeContainer, [\"input\", \"increment\"], updateTime);\n          bind(self.timeContainer, \"mousedown\", onClick(timeIncrement));\n          bind(self.timeContainer, [\"input\", \"increment\"], self._debouncedChange, {\n            passive: true\n          });\n          bind([self.hourElement, self.minuteElement], [\"focus\", \"click\"], selText);\n          if (self.secondElement !== undefined) bind(self.secondElement, \"focus\", function () {\n            return self.secondElement && self.secondElement.select();\n          });\n\n          if (self.amPM !== undefined) {\n            bind(self.amPM, \"mousedown\", onClick(function (e) {\n              updateTime(e);\n              triggerChange();\n            }));\n          }\n        }\n      }\n\n      function jumpToDate(jumpDate) {\n        var jumpTo = jumpDate !== undefined ? self.parseDate(jumpDate) : self.latestSelectedDateObj || (self.config.minDate && self.config.minDate > self.now ? self.config.minDate : self.config.maxDate && self.config.maxDate < self.now ? self.config.maxDate : self.now);\n\n        try {\n          if (jumpTo !== undefined) {\n            self.currentYear = jumpTo.getFullYear();\n            self.currentMonth = jumpTo.getMonth();\n          }\n        } catch (e) {\n          e.message = \"Invalid date supplied: \" + jumpTo;\n          self.config.errorHandler(e);\n        }\n\n        self.redraw();\n      }\n\n      function timeIncrement(e) {\n        if (~e.target.className.indexOf(\"arrow\")) incrementNumInput(e, e.target.classList.contains(\"arrowUp\") ? 1 : -1);\n      }\n\n      function incrementNumInput(e, delta, inputElem) {\n        var target = e && e.target;\n        var input = inputElem || target && target.parentNode && target.parentNode.firstChild;\n        var event = createEvent(\"increment\");\n        event.delta = delta;\n        input && input.dispatchEvent(event);\n      }\n\n      function build() {\n        var fragment = window.document.createDocumentFragment();\n        self.calendarContainer = createElement(\"div\", \"flatpickr-calendar\");\n        self.calendarContainer.tabIndex = -1;\n\n        if (!self.config.noCalendar) {\n          fragment.appendChild(buildMonthNav());\n          self.innerContainer = createElement(\"div\", \"flatpickr-innerContainer\");\n\n          if (self.config.weekNumbers) {\n            var _buildWeeks = buildWeeks(),\n                weekWrapper = _buildWeeks.weekWrapper,\n                weekNumbers = _buildWeeks.weekNumbers;\n\n            self.innerContainer.appendChild(weekWrapper);\n            self.weekNumbers = weekNumbers;\n            self.weekWrapper = weekWrapper;\n          }\n\n          self.rContainer = createElement(\"div\", \"flatpickr-rContainer\");\n          self.rContainer.appendChild(buildWeekdays());\n\n          if (!self.daysContainer) {\n            self.daysContainer = createElement(\"div\", \"flatpickr-days\");\n            self.daysContainer.tabIndex = -1;\n          }\n\n          buildDays();\n          self.rContainer.appendChild(self.daysContainer);\n          self.innerContainer.appendChild(self.rContainer);\n          fragment.appendChild(self.innerContainer);\n        }\n\n        if (self.config.enableTime) {\n          fragment.appendChild(buildTime());\n        }\n\n        toggleClass(self.calendarContainer, \"rangeMode\", self.config.mode === \"range\");\n        toggleClass(self.calendarContainer, \"animate\", self.config.animate === true);\n        toggleClass(self.calendarContainer, \"multiMonth\", self.config.showMonths > 1);\n        self.calendarContainer.appendChild(fragment);\n        var customAppend = self.config.appendTo !== undefined && self.config.appendTo.nodeType !== undefined;\n\n        if (self.config.inline || self.config.static) {\n          self.calendarContainer.classList.add(self.config.inline ? \"inline\" : \"static\");\n\n          if (self.config.inline) {\n            if (!customAppend && self.element.parentNode) self.element.parentNode.insertBefore(self.calendarContainer, self._input.nextSibling);else if (self.config.appendTo !== undefined) self.config.appendTo.appendChild(self.calendarContainer);\n          }\n\n          if (self.config.static) {\n            var wrapper = createElement(\"div\", \"flatpickr-wrapper\");\n            if (self.element.parentNode) self.element.parentNode.insertBefore(wrapper, self.element);\n            wrapper.appendChild(self.element);\n            if (self.altInput) wrapper.appendChild(self.altInput);\n            wrapper.appendChild(self.calendarContainer);\n          }\n        }\n\n        if (!self.config.static && !self.config.inline) (self.config.appendTo !== undefined ? self.config.appendTo : window.document.body).appendChild(self.calendarContainer);\n      }\n\n      function createDay(className, date, dayNumber, i) {\n        var dateIsEnabled = isEnabled(date, true),\n            dayElement = createElement(\"span\", \"flatpickr-day \" + className, date.getDate().toString());\n        dayElement.dateObj = date;\n        dayElement.$i = i;\n        dayElement.setAttribute(\"aria-label\", self.formatDate(date, self.config.ariaDateFormat));\n\n        if (compareDates(date, self.now) === 0) {\n          self.todayDateElem = dayElement;\n          dayElement.classList.add(\"today\");\n        }\n\n        if (dateIsEnabled) {\n          dayElement.tabIndex = -1;\n\n          if (isDateSelected(date)) {\n            dayElement.classList.add(\"selected\");\n            self.selectedDateElem = dayElement;\n\n            if (self.config.mode === \"range\") {\n              toggleClass(dayElement, \"startRange\", self.selectedDates[0] && compareDates(date, self.selectedDates[0], true) === 0);\n              toggleClass(dayElement, \"endRange\", self.selectedDates[1] && compareDates(date, self.selectedDates[1], true) === 0);\n              if (className === \"nextMonthDay\") dayElement.classList.add(\"inRange\");\n            }\n          }\n        } else {\n          dayElement.classList.add(\"disabled\");\n        }\n\n        if (self.config.mode === \"range\") {\n          if (isDateInRange(date) && !isDateSelected(date)) dayElement.classList.add(\"inRange\");\n        }\n\n        if (self.weekNumbers && self.config.showMonths === 1 && className !== \"prevMonthDay\" && dayNumber % 7 === 1) {\n          self.weekNumbers.insertAdjacentHTML(\"beforeend\", \"<span class='flatpickr-day'>\" + self.config.getWeek(date) + \"</span>\");\n        }\n\n        triggerEvent(\"onDayCreate\", dayElement);\n        return dayElement;\n      }\n\n      function focusOnDay(currentInd, offset) {\n        var currentIndex = currentInd !== undefined ? currentInd : document.activeElement.$i;\n        var newIndex = (currentIndex || 0) + offset || 0,\n            targetNode = Array.prototype.find.call(self.days.children, function (c, i) {\n          return i >= newIndex && c.className.indexOf(\"MonthDay\") === -1 && isEnabled(c.dateObj);\n        });\n\n        if (targetNode !== undefined) {\n          targetNode.focus();\n          if (self.config.mode === \"range\") onMouseOver(targetNode);\n        }\n      }\n\n      function buildMonthDays(year, month) {\n        var firstOfMonth = (new Date(year, month, 1).getDay() - self.l10n.firstDayOfWeek + 7) % 7;\n        var prevMonthDays = self.utils.getDaysInMonth((month - 1 + 12) % 12);\n        var daysInMonth = self.utils.getDaysInMonth(month),\n            days = window.document.createDocumentFragment();\n        var dayNumber = prevMonthDays + 1 - firstOfMonth,\n            dayIndex = 0;\n\n        for (; dayNumber <= prevMonthDays; dayNumber++, dayIndex++) {\n          days.appendChild(createDay(\"prevMonthDay\", new Date(year, month - 1, dayNumber), dayNumber, dayIndex));\n        }\n\n        for (dayNumber = 1; dayNumber <= daysInMonth; dayNumber++, dayIndex++) {\n          days.appendChild(createDay(\"\", new Date(year, month, dayNumber), dayNumber, dayIndex));\n        }\n\n        for (var dayNum = daysInMonth + 1; dayNum <= 42 - firstOfMonth && (self.config.showMonths === 1 || dayIndex % 7 !== 0); dayNum++, dayIndex++) {\n          days.appendChild(createDay(\"nextMonthDay\", new Date(year, month + 1, dayNum % daysInMonth), dayNum, dayIndex));\n        }\n\n        var dayContainer = createElement(\"div\", \"dayContainer\");\n        dayContainer.appendChild(days);\n        return dayContainer;\n      }\n\n      function buildDays() {\n        if (self.daysContainer === undefined) {\n          return;\n        }\n\n        clearNode(self.daysContainer);\n        if (self.weekNumbers) clearNode(self.weekNumbers);\n        var frag = document.createDocumentFragment();\n\n        for (var i = 0; i < self.config.showMonths; i++) {\n          var d = new Date(self.currentYear, self.currentMonth, 1);\n          d.setMonth(self.currentMonth + i);\n          frag.appendChild(buildMonthDays(d.getFullYear(), d.getMonth()));\n        }\n\n        self.daysContainer.appendChild(frag);\n        self.days = self.daysContainer.firstChild;\n      }\n\n      function buildMonth() {\n        var container = createElement(\"div\", \"flatpickr-month\");\n        var monthNavFragment = window.document.createDocumentFragment();\n        var monthElement = createElement(\"span\", \"cur-month\");\n        monthElement.title = self.l10n.scrollTitle;\n        var yearInput = createNumberInput(\"cur-year\", {\n          tabindex: \"-1\"\n        });\n        var yearElement = yearInput.childNodes[0];\n        yearElement.title = self.l10n.scrollTitle;\n        yearElement.setAttribute(\"aria-label\", self.l10n.yearAriaLabel);\n        if (self.config.minDate) yearElement.setAttribute(\"data-min\", self.config.minDate.getFullYear().toString());\n\n        if (self.config.maxDate) {\n          yearElement.setAttribute(\"data-max\", self.config.maxDate.getFullYear().toString());\n          yearElement.disabled = !!self.config.minDate && self.config.minDate.getFullYear() === self.config.maxDate.getFullYear();\n        }\n\n        var currentMonth = createElement(\"div\", \"flatpickr-current-month\");\n        currentMonth.appendChild(monthElement);\n        currentMonth.appendChild(yearInput);\n        monthNavFragment.appendChild(currentMonth);\n        container.appendChild(monthNavFragment);\n        return {\n          container: container,\n          yearElement: yearElement,\n          monthElement: monthElement\n        };\n      }\n\n      function buildMonthNav() {\n        self.monthNav = createElement(\"div\", \"flatpickr-months\");\n        self.yearElements = [];\n        self.monthElements = [];\n        self.prevMonthNav = createElement(\"span\", \"flatpickr-prev-month\");\n        self.prevMonthNav.innerHTML = self.config.prevArrow;\n        self.nextMonthNav = createElement(\"span\", \"flatpickr-next-month\");\n        self.nextMonthNav.innerHTML = self.config.nextArrow;\n        self.monthNav.appendChild(self.prevMonthNav);\n\n        for (var m = self.config.showMonths; m--;) {\n          var month = buildMonth();\n          self.yearElements.push(month.yearElement);\n          self.monthElements.push(month.monthElement);\n          self.monthNav.appendChild(month.container);\n        }\n\n        self.monthNav.appendChild(self.nextMonthNav);\n        Object.defineProperty(self, \"_hidePrevMonthArrow\", {\n          get: function get() {\n            return self.__hidePrevMonthArrow;\n          },\n          set: function set(bool) {\n            if (self.__hidePrevMonthArrow !== bool) {\n              toggleClass(self.prevMonthNav, \"disabled\", bool);\n              self.__hidePrevMonthArrow = bool;\n            }\n          }\n        });\n        Object.defineProperty(self, \"_hideNextMonthArrow\", {\n          get: function get() {\n            return self.__hideNextMonthArrow;\n          },\n          set: function set(bool) {\n            if (self.__hideNextMonthArrow !== bool) {\n              toggleClass(self.nextMonthNav, \"disabled\", bool);\n              self.__hideNextMonthArrow = bool;\n            }\n          }\n        });\n        self.currentYearElement = self.yearElements[0];\n        updateNavigationCurrentMonth();\n        return self.monthNav;\n      }\n\n      function buildTime() {\n        self.calendarContainer.classList.add(\"hasTime\");\n        if (self.config.noCalendar) self.calendarContainer.classList.add(\"noCalendar\");\n        self.timeContainer = createElement(\"div\", \"flatpickr-time\");\n        self.timeContainer.tabIndex = -1;\n        var separator = createElement(\"span\", \"flatpickr-time-separator\", \":\");\n        var hourInput = createNumberInput(\"flatpickr-hour\");\n        self.hourElement = hourInput.childNodes[0];\n        var minuteInput = createNumberInput(\"flatpickr-minute\");\n        self.minuteElement = minuteInput.childNodes[0];\n        self.hourElement.tabIndex = self.minuteElement.tabIndex = -1;\n        self.hourElement.value = pad(self.latestSelectedDateObj ? self.latestSelectedDateObj.getHours() : self.config.time_24hr ? self.config.defaultHour : military2ampm(self.config.defaultHour));\n        self.minuteElement.value = pad(self.latestSelectedDateObj ? self.latestSelectedDateObj.getMinutes() : self.config.defaultMinute);\n        self.hourElement.setAttribute(\"data-step\", self.config.hourIncrement.toString());\n        self.minuteElement.setAttribute(\"data-step\", self.config.minuteIncrement.toString());\n        self.hourElement.setAttribute(\"data-min\", self.config.time_24hr ? \"0\" : \"1\");\n        self.hourElement.setAttribute(\"data-max\", self.config.time_24hr ? \"23\" : \"12\");\n        self.minuteElement.setAttribute(\"data-min\", \"0\");\n        self.minuteElement.setAttribute(\"data-max\", \"59\");\n        self.timeContainer.appendChild(hourInput);\n        self.timeContainer.appendChild(separator);\n        self.timeContainer.appendChild(minuteInput);\n        if (self.config.time_24hr) self.timeContainer.classList.add(\"time24hr\");\n\n        if (self.config.enableSeconds) {\n          self.timeContainer.classList.add(\"hasSeconds\");\n          var secondInput = createNumberInput(\"flatpickr-second\");\n          self.secondElement = secondInput.childNodes[0];\n          self.secondElement.value = pad(self.latestSelectedDateObj ? self.latestSelectedDateObj.getSeconds() : self.config.defaultSeconds);\n          self.secondElement.setAttribute(\"data-step\", self.minuteElement.getAttribute(\"data-step\"));\n          self.secondElement.setAttribute(\"data-min\", self.minuteElement.getAttribute(\"data-min\"));\n          self.secondElement.setAttribute(\"data-max\", self.minuteElement.getAttribute(\"data-max\"));\n          self.timeContainer.appendChild(createElement(\"span\", \"flatpickr-time-separator\", \":\"));\n          self.timeContainer.appendChild(secondInput);\n        }\n\n        if (!self.config.time_24hr) {\n          self.amPM = createElement(\"span\", \"flatpickr-am-pm\", self.l10n.amPM[int((self.latestSelectedDateObj ? self.hourElement.value : self.config.defaultHour) > 11)]);\n          self.amPM.title = self.l10n.toggleTitle;\n          self.amPM.tabIndex = -1;\n          self.timeContainer.appendChild(self.amPM);\n        }\n\n        return self.timeContainer;\n      }\n\n      function buildWeekdays() {\n        if (!self.weekdayContainer) self.weekdayContainer = createElement(\"div\", \"flatpickr-weekdays\");\n\n        for (var i = self.config.showMonths; i--;) {\n          var container = createElement(\"div\", \"flatpickr-weekdaycontainer\");\n          self.weekdayContainer.appendChild(container);\n        }\n\n        updateWeekdays();\n        return self.weekdayContainer;\n      }\n\n      function updateWeekdays() {\n        var firstDayOfWeek = self.l10n.firstDayOfWeek;\n        var weekdays = self.l10n.weekdays.shorthand.concat();\n\n        if (firstDayOfWeek > 0 && firstDayOfWeek < weekdays.length) {\n          weekdays = weekdays.splice(firstDayOfWeek, weekdays.length).concat(weekdays.splice(0, firstDayOfWeek));\n        }\n\n        for (var i = self.config.showMonths; i--;) {\n          self.weekdayContainer.children[i].innerHTML = \"\\n      <span class=flatpickr-weekday>\\n        \" + weekdays.join(\"</span><span class=flatpickr-weekday>\") + \"\\n      </span>\\n      \";\n        }\n      }\n\n      function buildWeeks() {\n        self.calendarContainer.classList.add(\"hasWeeks\");\n        var weekWrapper = createElement(\"div\", \"flatpickr-weekwrapper\");\n        weekWrapper.appendChild(createElement(\"span\", \"flatpickr-weekday\", self.l10n.weekAbbreviation));\n        var weekNumbers = createElement(\"div\", \"flatpickr-weeks\");\n        weekWrapper.appendChild(weekNumbers);\n        return {\n          weekWrapper: weekWrapper,\n          weekNumbers: weekNumbers\n        };\n      }\n\n      function changeMonth(value, is_offset, from_keyboard) {\n        if (is_offset === void 0) {\n          is_offset = true;\n        }\n\n        if (from_keyboard === void 0) {\n          from_keyboard = false;\n        }\n\n        var delta = is_offset ? value : value - self.currentMonth;\n        if (delta < 0 && self._hidePrevMonthArrow === true || delta > 0 && self._hideNextMonthArrow === true) return;\n        self.currentMonth += delta;\n\n        if (self.currentMonth < 0 || self.currentMonth > 11) {\n          self.currentYear += self.currentMonth > 11 ? 1 : -1;\n          self.currentMonth = (self.currentMonth + 12) % 12;\n          triggerEvent(\"onYearChange\");\n        }\n\n        buildDays();\n        triggerEvent(\"onMonthChange\");\n        updateNavigationCurrentMonth();\n\n        if (from_keyboard === true) {\n          focusOnDay(undefined, 0);\n        }\n      }\n\n      function clear(triggerChangeEvent) {\n        if (triggerChangeEvent === void 0) {\n          triggerChangeEvent = true;\n        }\n\n        self.input.value = \"\";\n        if (self.altInput !== undefined) self.altInput.value = \"\";\n        if (self.mobileInput !== undefined) self.mobileInput.value = \"\";\n        self.selectedDates = [];\n        self.latestSelectedDateObj = undefined;\n        self.showTimeInput = false;\n\n        if (self.config.enableTime === true) {\n          if (self.config.minDate !== undefined) setHoursFromDate(self.config.minDate);else setHours(self.config.defaultHour, self.config.defaultMinute, self.config.defaultSeconds);\n        }\n\n        self.redraw();\n        if (triggerChangeEvent) triggerEvent(\"onChange\");\n      }\n\n      function close() {\n        self.isOpen = false;\n\n        if (!self.isMobile) {\n          self.calendarContainer.classList.remove(\"open\");\n\n          self._input.classList.remove(\"active\");\n        }\n\n        triggerEvent(\"onClose\");\n      }\n\n      function destroy() {\n        if (self.config !== undefined) triggerEvent(\"onDestroy\");\n\n        for (var i = self._handlers.length; i--;) {\n          var h = self._handlers[i];\n          h.element.removeEventListener(h.event, h.handler);\n        }\n\n        self._handlers = [];\n\n        if (self.mobileInput) {\n          if (self.mobileInput.parentNode) self.mobileInput.parentNode.removeChild(self.mobileInput);\n          self.mobileInput = undefined;\n        } else if (self.calendarContainer && self.calendarContainer.parentNode) self.calendarContainer.parentNode.removeChild(self.calendarContainer);\n\n        if (self.altInput) {\n          self.input.type = \"text\";\n          if (self.altInput.parentNode) self.altInput.parentNode.removeChild(self.altInput);\n          delete self.altInput;\n        }\n\n        if (self.input) {\n          self.input.type = self.input._type;\n          self.input.classList.remove(\"flatpickr-input\");\n          self.input.removeAttribute(\"readonly\");\n          self.input.value = \"\";\n        }\n\n        [\"_showTimeInput\", \"latestSelectedDateObj\", \"_hideNextMonthArrow\", \"_hidePrevMonthArrow\", \"__hideNextMonthArrow\", \"__hidePrevMonthArrow\", \"isMobile\", \"isOpen\", \"selectedDateElem\", \"minDateHasTime\", \"maxDateHasTime\", \"days\", \"daysContainer\", \"_input\", \"_positionElement\", \"innerContainer\", \"rContainer\", \"monthNav\", \"todayDateElem\", \"calendarContainer\", \"weekdayContainer\", \"prevMonthNav\", \"nextMonthNav\", \"currentMonthElement\", \"currentYearElement\", \"navigationCurrentMonth\", \"selectedDateElem\", \"config\"].forEach(function (k) {\n          try {\n            delete self[k];\n          } catch (_) {}\n        });\n      }\n\n      function isCalendarElem(elem) {\n        if (self.config.appendTo && self.config.appendTo.contains(elem)) return true;\n        return self.calendarContainer.contains(elem);\n      }\n\n      function documentClick(e) {\n        if (self.isOpen && !self.config.inline) {\n          var isCalendarElement = isCalendarElem(e.target);\n          var isInput = e.target === self.input || e.target === self.altInput || self.element.contains(e.target) || e.path && e.path.indexOf && (~e.path.indexOf(self.input) || ~e.path.indexOf(self.altInput));\n          var lostFocus = e.type === \"blur\" ? isInput && e.relatedTarget && !isCalendarElem(e.relatedTarget) : !isInput && !isCalendarElement;\n          var isIgnored = !self.config.ignoredFocusElements.some(function (elem) {\n            return elem.contains(e.target);\n          });\n\n          if (lostFocus && isIgnored) {\n            self.close();\n\n            if (self.config.mode === \"range\" && self.selectedDates.length === 1) {\n              self.clear(false);\n              self.redraw();\n            }\n          }\n        }\n      }\n\n      function changeYear(newYear) {\n        if (!newYear || self.config.minDate && newYear < self.config.minDate.getFullYear() || self.config.maxDate && newYear > self.config.maxDate.getFullYear()) return;\n        var newYearNum = newYear,\n            isNewYear = self.currentYear !== newYearNum;\n        self.currentYear = newYearNum || self.currentYear;\n\n        if (self.config.maxDate && self.currentYear === self.config.maxDate.getFullYear()) {\n          self.currentMonth = Math.min(self.config.maxDate.getMonth(), self.currentMonth);\n        } else if (self.config.minDate && self.currentYear === self.config.minDate.getFullYear()) {\n          self.currentMonth = Math.max(self.config.minDate.getMonth(), self.currentMonth);\n        }\n\n        if (isNewYear) {\n          self.redraw();\n          triggerEvent(\"onYearChange\");\n        }\n      }\n\n      function isEnabled(date, timeless) {\n        if (timeless === void 0) {\n          timeless = true;\n        }\n\n        var dateToCheck = self.parseDate(date, undefined, timeless);\n        if (self.config.minDate && dateToCheck && compareDates(dateToCheck, self.config.minDate, timeless !== undefined ? timeless : !self.minDateHasTime) < 0 || self.config.maxDate && dateToCheck && compareDates(dateToCheck, self.config.maxDate, timeless !== undefined ? timeless : !self.maxDateHasTime) > 0) return false;\n        if (self.config.enable.length === 0 && self.config.disable.length === 0) return true;\n        if (dateToCheck === undefined) return false;\n        var bool = self.config.enable.length > 0,\n            array = bool ? self.config.enable : self.config.disable;\n\n        for (var i = 0, d; i < array.length; i++) {\n          d = array[i];\n          if (typeof d === \"function\" && d(dateToCheck)) return bool;else if (d instanceof Date && dateToCheck !== undefined && d.getTime() === dateToCheck.getTime()) return bool;else if (typeof d === \"string\" && dateToCheck !== undefined) {\n            var parsed = self.parseDate(d, undefined, true);\n            return parsed && parsed.getTime() === dateToCheck.getTime() ? bool : !bool;\n          } else if (typeof d === \"object\" && dateToCheck !== undefined && d.from && d.to && dateToCheck.getTime() >= d.from.getTime() && dateToCheck.getTime() <= d.to.getTime()) return bool;\n        }\n\n        return !bool;\n      }\n\n      function onKeyDown(e) {\n        var isInput = e.target === self._input;\n        var calendarElem = isCalendarElem(e.target);\n        var allowInput = self.config.allowInput;\n        var allowKeydown = self.isOpen && (!allowInput || !isInput);\n        var allowInlineKeydown = self.config.inline && isInput && !allowInput;\n\n        if (e.keyCode === 13 && isInput) {\n          if (allowInput) {\n            self.setDate(self._input.value, true, e.target === self.altInput ? self.config.altFormat : self.config.dateFormat);\n            return e.target.blur();\n          } else self.open();\n        } else if (calendarElem || allowKeydown || allowInlineKeydown) {\n          var isTimeObj = !!self.timeContainer && self.timeContainer.contains(e.target);\n\n          switch (e.keyCode) {\n            case 13:\n              if (isTimeObj) updateValue();else selectDate(e);\n              break;\n\n            case 27:\n              e.preventDefault();\n              focusAndClose();\n              break;\n\n            case 8:\n            case 46:\n              if (isInput && !self.config.allowInput) {\n                e.preventDefault();\n                self.clear();\n              }\n\n              break;\n\n            case 37:\n            case 39:\n              if (!isTimeObj) {\n                e.preventDefault();\n\n                if (self.daysContainer) {\n                  var _delta = isInput ? 0 : e.keyCode === 39 ? 1 : -1;\n\n                  if (!e.ctrlKey) focusOnDay(undefined, _delta);else changeMonth(_delta, true, true);\n                }\n              } else if (self.hourElement) self.hourElement.focus();\n\n              break;\n\n            case 38:\n            case 40:\n              e.preventDefault();\n              var delta = e.keyCode === 40 ? 1 : -1;\n\n              if (self.daysContainer && e.target.$i !== undefined) {\n                if (e.ctrlKey) {\n                  changeYear(self.currentYear - delta);\n                  focusOnDay(e.target.$i, 0);\n                } else if (!isTimeObj) focusOnDay(e.target.$i, delta * 7);\n              } else if (self.config.enableTime) {\n                if (!isTimeObj && self.hourElement) self.hourElement.focus();\n                updateTime(e);\n\n                self._debouncedChange();\n              }\n\n              break;\n\n            case 9:\n              if (e.target === self.hourElement) {\n                e.preventDefault();\n                self.minuteElement.select();\n              } else if (e.target === self.minuteElement && (self.secondElement || self.amPM)) {\n                e.preventDefault();\n                if (self.secondElement !== undefined) self.secondElement.focus();else if (self.amPM !== undefined) self.amPM.focus();\n              } else if (e.target === self.secondElement && self.amPM) {\n                e.preventDefault();\n                self.amPM.focus();\n              }\n\n              break;\n\n            default:\n              break;\n          }\n\n          switch (e.key) {\n            case self.l10n.amPM[0].charAt(0):\n            case self.l10n.amPM[0].charAt(0).toLowerCase():\n              if (self.amPM !== undefined && e.target === self.amPM) {\n                self.amPM.textContent = self.l10n.amPM[0];\n                setHoursFromInputs();\n                updateValue();\n              }\n\n              break;\n\n            case self.l10n.amPM[1].charAt(0):\n            case self.l10n.amPM[1].charAt(0).toLowerCase():\n              if (self.amPM !== undefined && e.target === self.amPM) {\n                self.amPM.textContent = self.l10n.amPM[1];\n                setHoursFromInputs();\n                updateValue();\n              }\n\n              break;\n\n            default:\n              break;\n          }\n\n          triggerEvent(\"onKeyDown\", e);\n        }\n      }\n\n      function onMouseOver(elem) {\n        if (self.selectedDates.length !== 1 || !elem.classList.contains(\"flatpickr-day\") || elem.classList.contains(\"disabled\")) return;\n        var hoverDate = elem.dateObj.getTime(),\n            initialDate = self.parseDate(self.selectedDates[0], undefined, true).getTime(),\n            rangeStartDate = Math.min(hoverDate, self.selectedDates[0].getTime()),\n            rangeEndDate = Math.max(hoverDate, self.selectedDates[0].getTime());\n        var months = self.daysContainer.children,\n            firstDay = months[0].children[0].dateObj.getTime(),\n            lastDay = months[months.length - 1].lastChild.dateObj.getTime();\n        var containsDisabled = false;\n        var minRange = 0,\n            maxRange = 0;\n\n        for (var t = firstDay; t < lastDay; t += duration.DAY) {\n          if (!isEnabled(new Date(t), true)) {\n            containsDisabled = containsDisabled || t > rangeStartDate && t < rangeEndDate;\n            if (t < initialDate && (!minRange || t > minRange)) minRange = t;else if (t > initialDate && (!maxRange || t < maxRange)) maxRange = t;\n          }\n        }\n\n        for (var m = 0; m < self.config.showMonths; m++) {\n          var month = self.daysContainer.children[m];\n          var prevMonth = self.daysContainer.children[m - 1];\n\n          var _loop = function _loop(i, l) {\n            var dayElem = month.children[i],\n                date = dayElem.dateObj;\n            var timestamp = date.getTime();\n            var outOfRange = minRange > 0 && timestamp < minRange || maxRange > 0 && timestamp > maxRange;\n\n            if (outOfRange) {\n              dayElem.classList.add(\"notAllowed\");\n              [\"inRange\", \"startRange\", \"endRange\"].forEach(function (c) {\n                dayElem.classList.remove(c);\n              });\n              return \"continue\";\n            } else if (containsDisabled && !outOfRange) return \"continue\";\n\n            [\"startRange\", \"inRange\", \"endRange\", \"notAllowed\"].forEach(function (c) {\n              dayElem.classList.remove(c);\n            });\n            elem.classList.add(hoverDate < self.selectedDates[0].getTime() ? \"startRange\" : \"endRange\");\n\n            if (month.contains(elem) || !(m > 0 && prevMonth && prevMonth.lastChild.dateObj.getTime() >= timestamp)) {\n              if (initialDate < hoverDate && timestamp === initialDate) dayElem.classList.add(\"startRange\");else if (initialDate > hoverDate && timestamp === initialDate) dayElem.classList.add(\"endRange\");\n              if (timestamp >= minRange && (maxRange === 0 || timestamp <= maxRange) && isBetween(timestamp, initialDate, hoverDate)) dayElem.classList.add(\"inRange\");\n            }\n          };\n\n          for (var i = 0, l = month.children.length; i < l; i++) {\n            var _ret = _loop(i, l);\n\n            if (_ret === \"continue\") continue;\n          }\n        }\n      }\n\n      function onResize() {\n        if (self.isOpen && !self.config.static && !self.config.inline) positionCalendar();\n      }\n\n      function open(e, positionElement) {\n        if (positionElement === void 0) {\n          positionElement = self._input;\n        }\n\n        if (self.isMobile === true) {\n          if (e) {\n            e.preventDefault();\n            e.target && e.target.blur();\n          }\n\n          setTimeout(function () {\n            self.mobileInput !== undefined && self.mobileInput.click();\n          }, 0);\n          triggerEvent(\"onOpen\");\n          return;\n        }\n\n        if (self._input.disabled || self.config.inline) return;\n        var wasOpen = self.isOpen;\n        self.isOpen = true;\n\n        if (!wasOpen) {\n          self.calendarContainer.classList.add(\"open\");\n\n          self._input.classList.add(\"active\");\n\n          triggerEvent(\"onOpen\");\n          positionCalendar(positionElement);\n        }\n\n        if (self.config.enableTime === true && self.config.noCalendar === true) {\n          if (self.selectedDates.length === 0) {\n            self.setDate(self.config.minDate !== undefined ? new Date(self.config.minDate.getTime()) : new Date().setHours(self.config.defaultHour, self.config.defaultMinute, self.config.defaultSeconds, 0), false);\n            setHoursFromInputs();\n            updateValue();\n          }\n\n          setTimeout(function () {\n            return self.hourElement.select();\n          }, 50);\n        }\n      }\n\n      function minMaxDateSetter(type) {\n        return function (date) {\n          var dateObj = self.config[\"_\" + type + \"Date\"] = self.parseDate(date, self.config.dateFormat);\n          var inverseDateObj = self.config[\"_\" + (type === \"min\" ? \"max\" : \"min\") + \"Date\"];\n\n          if (dateObj !== undefined) {\n            self[type === \"min\" ? \"minDateHasTime\" : \"maxDateHasTime\"] = dateObj.getHours() > 0 || dateObj.getMinutes() > 0 || dateObj.getSeconds() > 0;\n          }\n\n          if (self.selectedDates) {\n            self.selectedDates = self.selectedDates.filter(function (d) {\n              return isEnabled(d);\n            });\n            if (!self.selectedDates.length && type === \"min\") setHoursFromDate(dateObj);\n            updateValue();\n          }\n\n          if (self.daysContainer) {\n            redraw();\n            if (dateObj !== undefined) self.currentYearElement[type] = dateObj.getFullYear().toString();else self.currentYearElement.removeAttribute(type);\n            self.currentYearElement.disabled = !!inverseDateObj && dateObj !== undefined && inverseDateObj.getFullYear() === dateObj.getFullYear();\n          }\n        };\n      }\n\n      function parseConfig() {\n        var boolOpts = [\"wrap\", \"weekNumbers\", \"allowInput\", \"clickOpens\", \"time_24hr\", \"enableTime\", \"noCalendar\", \"altInput\", \"shorthandCurrentMonth\", \"inline\", \"static\", \"enableSeconds\", \"disableMobile\"];\n        var hooks = [\"onChange\", \"onClose\", \"onDayCreate\", \"onDestroy\", \"onKeyDown\", \"onMonthChange\", \"onOpen\", \"onParseConfig\", \"onReady\", \"onValueUpdate\", \"onYearChange\", \"onPreCalendarPosition\"];\n        var userConfig = Object.assign({}, instanceConfig, JSON.parse(JSON.stringify(element.dataset || {})));\n        var formats$$1 = {};\n        self.config.parseDate = userConfig.parseDate;\n        self.config.formatDate = userConfig.formatDate;\n        Object.defineProperty(self.config, \"enable\", {\n          get: function get() {\n            return self.config._enable;\n          },\n          set: function set(dates) {\n            self.config._enable = parseDateRules(dates);\n          }\n        });\n        Object.defineProperty(self.config, \"disable\", {\n          get: function get() {\n            return self.config._disable;\n          },\n          set: function set(dates) {\n            self.config._disable = parseDateRules(dates);\n          }\n        });\n\n        if (!userConfig.dateFormat && userConfig.enableTime) {\n          formats$$1.dateFormat = userConfig.noCalendar ? \"H:i\" + (userConfig.enableSeconds ? \":S\" : \"\") : flatpickr.defaultConfig.dateFormat + \" H:i\" + (userConfig.enableSeconds ? \":S\" : \"\");\n        }\n\n        if (userConfig.altInput && userConfig.enableTime && !userConfig.altFormat) {\n          formats$$1.altFormat = userConfig.noCalendar ? \"h:i\" + (userConfig.enableSeconds ? \":S K\" : \" K\") : flatpickr.defaultConfig.altFormat + (\" h:i\" + (userConfig.enableSeconds ? \":S\" : \"\") + \" K\");\n        }\n\n        Object.defineProperty(self.config, \"minDate\", {\n          get: function get() {\n            return self.config._minDate;\n          },\n          set: minMaxDateSetter(\"min\")\n        });\n        Object.defineProperty(self.config, \"maxDate\", {\n          get: function get() {\n            return self.config._maxDate;\n          },\n          set: minMaxDateSetter(\"max\")\n        });\n\n        var minMaxTimeSetter = function minMaxTimeSetter(type) {\n          return function (val) {\n            self.config[type === \"min\" ? \"_minTime\" : \"_maxTime\"] = self.parseDate(val, \"H:i\");\n          };\n        };\n\n        Object.defineProperty(self.config, \"minTime\", {\n          get: function get() {\n            return self.config._minTime;\n          },\n          set: minMaxTimeSetter(\"min\")\n        });\n        Object.defineProperty(self.config, \"maxTime\", {\n          get: function get() {\n            return self.config._maxTime;\n          },\n          set: minMaxTimeSetter(\"max\")\n        });\n        Object.assign(self.config, formats$$1, userConfig);\n\n        for (var i = 0; i < boolOpts.length; i++) {\n          self.config[boolOpts[i]] = self.config[boolOpts[i]] === true || self.config[boolOpts[i]] === \"true\";\n        }\n\n        for (var _i = hooks.length; _i--;) {\n          if (self.config[hooks[_i]] !== undefined) {\n            self.config[hooks[_i]] = arrayify(self.config[hooks[_i]] || []).map(bindToInstance);\n          }\n        }\n\n        if (self.config.mode === \"time\") {\n          self.config.noCalendar = true;\n          self.config.enableTime = true;\n        }\n\n        for (var _i2 = 0; _i2 < self.config.plugins.length; _i2++) {\n          var pluginConf = self.config.plugins[_i2](self) || {};\n\n          for (var key in pluginConf) {\n            if (~hooks.indexOf(key)) {\n              self.config[key] = arrayify(pluginConf[key]).map(bindToInstance).concat(self.config[key]);\n            } else if (typeof userConfig[key] === \"undefined\") self.config[key] = pluginConf[key];\n          }\n        }\n\n        self.isMobile = !self.config.disableMobile && !self.config.inline && self.config.mode === \"single\" && !self.config.disable.length && !self.config.enable.length && !self.config.weekNumbers && /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\n        triggerEvent(\"onParseConfig\");\n      }\n\n      function setupLocale() {\n        if (typeof self.config.locale !== \"object\" && typeof flatpickr.l10ns[self.config.locale] === \"undefined\") self.config.errorHandler(new Error(\"flatpickr: invalid locale \" + self.config.locale));\n        self.l10n = Object.assign({}, flatpickr.l10ns.default, typeof self.config.locale === \"object\" ? self.config.locale : self.config.locale !== \"default\" ? flatpickr.l10ns[self.config.locale] : undefined);\n        tokenRegex.K = \"(\" + self.l10n.amPM[0] + \"|\" + self.l10n.amPM[1] + \"|\" + self.l10n.amPM[0].toLowerCase() + \"|\" + self.l10n.amPM[1].toLowerCase() + \")\";\n        self.formatDate = createDateFormatter(self);\n      }\n\n      function positionCalendar(customPositionElement) {\n        if (self.calendarContainer === undefined) return;\n        triggerEvent(\"onPreCalendarPosition\");\n        var positionElement = customPositionElement || self._positionElement;\n        var calendarHeight = Array.prototype.reduce.call(self.calendarContainer.children, function (acc, child) {\n          return acc + child.offsetHeight;\n        }, 0),\n            calendarWidth = self.calendarContainer.offsetWidth,\n            configPos = self.config.position,\n            inputBounds = positionElement.getBoundingClientRect(),\n            distanceFromBottom = window.innerHeight - inputBounds.bottom,\n            showOnTop = configPos === \"above\" || configPos !== \"below\" && distanceFromBottom < calendarHeight && inputBounds.top > calendarHeight;\n        var top = window.pageYOffset + inputBounds.top + (!showOnTop ? positionElement.offsetHeight + 2 : -calendarHeight - 2);\n        toggleClass(self.calendarContainer, \"arrowTop\", !showOnTop);\n        toggleClass(self.calendarContainer, \"arrowBottom\", showOnTop);\n        if (self.config.inline) return;\n        var left = window.pageXOffset + inputBounds.left;\n        var right = window.document.body.offsetWidth - inputBounds.right;\n        var rightMost = left + calendarWidth > window.document.body.offsetWidth;\n        toggleClass(self.calendarContainer, \"rightMost\", rightMost);\n        if (self.config.static) return;\n        self.calendarContainer.style.top = top + \"px\";\n\n        if (!rightMost) {\n          self.calendarContainer.style.left = left + \"px\";\n          self.calendarContainer.style.right = \"auto\";\n        } else {\n          self.calendarContainer.style.left = \"auto\";\n          self.calendarContainer.style.right = right + \"px\";\n        }\n      }\n\n      function redraw() {\n        if (self.config.noCalendar || self.isMobile) return;\n        updateWeekdays();\n        updateNavigationCurrentMonth();\n        buildDays();\n      }\n\n      function focusAndClose() {\n        self._input.focus();\n\n        if (window.navigator.userAgent.indexOf(\"MSIE\") !== -1 || navigator.msMaxTouchPoints !== undefined) {\n          setTimeout(self.close, 0);\n        } else {\n          self.close();\n        }\n      }\n\n      function selectDate(e) {\n        e.preventDefault();\n        e.stopPropagation();\n\n        var isSelectable = function isSelectable(day) {\n          return day.classList && day.classList.contains(\"flatpickr-day\") && !day.classList.contains(\"disabled\") && !day.classList.contains(\"notAllowed\");\n        };\n\n        var t = findParent(e.target, isSelectable);\n        if (t === undefined) return;\n        var target = t;\n        var selectedDate = self.latestSelectedDateObj = new Date(target.dateObj.getTime());\n        var shouldChangeMonth = (selectedDate.getMonth() < self.currentMonth || selectedDate.getMonth() > self.currentMonth + self.config.showMonths - 1) && self.config.mode !== \"range\";\n        self.selectedDateElem = target;\n        if (self.config.mode === \"single\") self.selectedDates = [selectedDate];else if (self.config.mode === \"multiple\") {\n          var selectedIndex = isDateSelected(selectedDate);\n          if (selectedIndex) self.selectedDates.splice(parseInt(selectedIndex), 1);else self.selectedDates.push(selectedDate);\n        } else if (self.config.mode === \"range\") {\n          if (self.selectedDates.length === 2) self.clear(false);\n          self.selectedDates.push(selectedDate);\n          if (compareDates(selectedDate, self.selectedDates[0], true) !== 0) self.selectedDates.sort(function (a, b) {\n            return a.getTime() - b.getTime();\n          });\n        }\n        setHoursFromInputs();\n\n        if (shouldChangeMonth) {\n          var isNewYear = self.currentYear !== selectedDate.getFullYear();\n          self.currentYear = selectedDate.getFullYear();\n          self.currentMonth = selectedDate.getMonth();\n          if (isNewYear) triggerEvent(\"onYearChange\");\n          triggerEvent(\"onMonthChange\");\n        }\n\n        updateNavigationCurrentMonth();\n        buildDays();\n        if (self.config.minDate && self.minDateHasTime && self.config.enableTime && compareDates(selectedDate, self.config.minDate) === 0) setHoursFromDate(self.config.minDate);\n        updateValue();\n        if (self.config.enableTime) setTimeout(function () {\n          return self.showTimeInput = true;\n        }, 50);\n\n        if (self.config.mode === \"range\") {\n          if (self.selectedDates.length === 1) {\n            onMouseOver(target);\n          } else updateNavigationCurrentMonth();\n        }\n\n        if (!shouldChangeMonth && self.config.mode !== \"range\" && self.config.showMonths === 1) focusOnDay(target.$i, 0);else self.selectedDateElem && self.selectedDateElem.focus();\n        if (self.hourElement !== undefined) setTimeout(function () {\n          return self.hourElement !== undefined && self.hourElement.select();\n        }, 451);\n\n        if (self.config.closeOnSelect) {\n          var single = self.config.mode === \"single\" && !self.config.enableTime;\n          var range = self.config.mode === \"range\" && self.selectedDates.length === 2 && !self.config.enableTime;\n\n          if (single || range) {\n            focusAndClose();\n          }\n        }\n\n        triggerChange();\n      }\n\n      var CALLBACKS = {\n        locale: [setupLocale]\n      };\n\n      function set(option, value) {\n        if (option !== null && typeof option === \"object\") Object.assign(self.config, option);else {\n          self.config[option] = value;\n          if (CALLBACKS[option] !== undefined) CALLBACKS[option].forEach(function (x) {\n            return x();\n          });\n        }\n        self.redraw();\n        jumpToDate();\n      }\n\n      function setSelectedDate(inputDate, format) {\n        var dates = [];\n        if (inputDate instanceof Array) dates = inputDate.map(function (d) {\n          return self.parseDate(d, format);\n        });else if (inputDate instanceof Date || typeof inputDate === \"number\") dates = [self.parseDate(inputDate, format)];else if (typeof inputDate === \"string\") {\n          switch (self.config.mode) {\n            case \"single\":\n              dates = [self.parseDate(inputDate, format)];\n              break;\n\n            case \"multiple\":\n              dates = inputDate.split(self.config.conjunction).map(function (date) {\n                return self.parseDate(date, format);\n              });\n              break;\n\n            case \"range\":\n              dates = inputDate.split(self.l10n.rangeSeparator).map(function (date) {\n                return self.parseDate(date, format);\n              });\n              break;\n\n            default:\n              break;\n          }\n        } else self.config.errorHandler(new Error(\"Invalid date supplied: \" + JSON.stringify(inputDate)));\n        self.selectedDates = dates.filter(function (d) {\n          return d instanceof Date && isEnabled(d, false);\n        });\n        if (self.config.mode === \"range\") self.selectedDates.sort(function (a, b) {\n          return a.getTime() - b.getTime();\n        });\n      }\n\n      function setDate(date, triggerChange, format) {\n        if (triggerChange === void 0) {\n          triggerChange = false;\n        }\n\n        if (format === void 0) {\n          format = self.config.dateFormat;\n        }\n\n        if (date !== 0 && !date) return self.clear(triggerChange);\n        setSelectedDate(date, format);\n        self.showTimeInput = self.selectedDates.length > 0;\n        self.latestSelectedDateObj = self.selectedDates[0];\n        self.redraw();\n        jumpToDate();\n        setHoursFromDate();\n        updateValue(triggerChange);\n        if (triggerChange) triggerEvent(\"onChange\");\n      }\n\n      function parseDateRules(arr) {\n        return arr.map(function (rule) {\n          if (typeof rule === \"string\" || typeof rule === \"number\" || rule instanceof Date) {\n            return self.parseDate(rule, undefined, true);\n          } else if (rule && typeof rule === \"object\" && rule.from && rule.to) return {\n            from: self.parseDate(rule.from, undefined),\n            to: self.parseDate(rule.to, undefined)\n          };\n\n          return rule;\n        }).filter(function (x) {\n          return x;\n        });\n      }\n\n      function setupDates() {\n        self.selectedDates = [];\n        self.now = self.parseDate(self.config.now) || new Date();\n        var preloadedDate = self.config.defaultDate || self.input.value;\n        if (preloadedDate) setSelectedDate(preloadedDate, self.config.dateFormat);\n        var initialDate = self.selectedDates.length > 0 ? self.selectedDates[0] : self.config.minDate && self.config.minDate.getTime() > self.now.getTime() ? self.config.minDate : self.config.maxDate && self.config.maxDate.getTime() < self.now.getTime() ? self.config.maxDate : self.now;\n        self.currentYear = initialDate.getFullYear();\n        self.currentMonth = initialDate.getMonth();\n        if (self.selectedDates.length > 0) self.latestSelectedDateObj = self.selectedDates[0];\n        if (self.config.minTime !== undefined) self.config.minTime = self.parseDate(self.config.minTime, \"H:i\");\n        if (self.config.maxTime !== undefined) self.config.maxTime = self.parseDate(self.config.maxTime, \"H:i\");\n        self.minDateHasTime = !!self.config.minDate && (self.config.minDate.getHours() > 0 || self.config.minDate.getMinutes() > 0 || self.config.minDate.getSeconds() > 0);\n        self.maxDateHasTime = !!self.config.maxDate && (self.config.maxDate.getHours() > 0 || self.config.maxDate.getMinutes() > 0 || self.config.maxDate.getSeconds() > 0);\n        Object.defineProperty(self, \"showTimeInput\", {\n          get: function get() {\n            return self._showTimeInput;\n          },\n          set: function set(bool) {\n            self._showTimeInput = bool;\n            if (self.calendarContainer) toggleClass(self.calendarContainer, \"showTimeInput\", bool);\n            self.isOpen && positionCalendar();\n          }\n        });\n      }\n\n      function setupInputs() {\n        self.input = self.config.wrap ? element.querySelector(\"[data-input]\") : element;\n\n        if (!self.input) {\n          self.config.errorHandler(new Error(\"Invalid input element specified\"));\n          return;\n        }\n\n        self.input._type = self.input.type;\n        self.input.type = \"text\";\n        self.input.classList.add(\"flatpickr-input\");\n        self._input = self.input;\n\n        if (self.config.altInput) {\n          self.altInput = createElement(self.input.nodeName, self.input.className + \" \" + self.config.altInputClass);\n          self._input = self.altInput;\n          self.altInput.placeholder = self.input.placeholder;\n          self.altInput.disabled = self.input.disabled;\n          self.altInput.required = self.input.required;\n          self.altInput.tabIndex = self.input.tabIndex;\n          self.altInput.type = \"text\";\n          self.input.type = \"hidden\";\n          if (!self.config.static && self.input.parentNode) self.input.parentNode.insertBefore(self.altInput, self.input.nextSibling);\n        }\n\n        if (!self.config.allowInput) self._input.setAttribute(\"readonly\", \"readonly\");\n        self._positionElement = self.config.positionElement || self._input;\n      }\n\n      function setupMobile() {\n        var inputType = self.config.enableTime ? self.config.noCalendar ? \"time\" : \"datetime-local\" : \"date\";\n        self.mobileInput = createElement(\"input\", self.input.className + \" flatpickr-mobile\");\n        self.mobileInput.step = self.input.getAttribute(\"step\") || \"any\";\n        self.mobileInput.tabIndex = 1;\n        self.mobileInput.type = inputType;\n        self.mobileInput.disabled = self.input.disabled;\n        self.mobileInput.required = self.input.required;\n        self.mobileInput.placeholder = self.input.placeholder;\n        self.mobileFormatStr = inputType === \"datetime-local\" ? \"Y-m-d\\\\TH:i:S\" : inputType === \"date\" ? \"Y-m-d\" : \"H:i:S\";\n\n        if (self.selectedDates.length > 0) {\n          self.mobileInput.defaultValue = self.mobileInput.value = self.formatDate(self.selectedDates[0], self.mobileFormatStr);\n        }\n\n        if (self.config.minDate) self.mobileInput.min = self.formatDate(self.config.minDate, \"Y-m-d\");\n        if (self.config.maxDate) self.mobileInput.max = self.formatDate(self.config.maxDate, \"Y-m-d\");\n        self.input.type = \"hidden\";\n        if (self.altInput !== undefined) self.altInput.type = \"hidden\";\n\n        try {\n          if (self.input.parentNode) self.input.parentNode.insertBefore(self.mobileInput, self.input.nextSibling);\n        } catch (_a) {}\n\n        bind(self.mobileInput, \"change\", function (e) {\n          self.setDate(e.target.value, false, self.mobileFormatStr);\n          triggerEvent(\"onChange\");\n          triggerEvent(\"onClose\");\n        });\n      }\n\n      function toggle() {\n        if (self.isOpen) return self.close();\n        self.open();\n      }\n\n      function triggerEvent(event, data) {\n        var hooks = self.config[event];\n\n        if (hooks !== undefined && hooks.length > 0) {\n          for (var i = 0; hooks[i] && i < hooks.length; i++) {\n            hooks[i](self.selectedDates, self.input.value, self, data);\n          }\n        }\n\n        if (event === \"onChange\") {\n          self.input.dispatchEvent(createEvent(\"change\"));\n          self.input.dispatchEvent(createEvent(\"input\"));\n        }\n      }\n\n      function createEvent(name) {\n        var e = document.createEvent(\"Event\");\n        e.initEvent(name, true, true);\n        return e;\n      }\n\n      function isDateSelected(date) {\n        for (var i = 0; i < self.selectedDates.length; i++) {\n          if (compareDates(self.selectedDates[i], date) === 0) return \"\" + i;\n        }\n\n        return false;\n      }\n\n      function isDateInRange(date) {\n        if (self.config.mode !== \"range\" || self.selectedDates.length < 2) return false;\n        return compareDates(date, self.selectedDates[0]) >= 0 && compareDates(date, self.selectedDates[1]) <= 0;\n      }\n\n      function updateNavigationCurrentMonth() {\n        if (self.config.noCalendar || self.isMobile || !self.monthNav) return;\n        self.yearElements.forEach(function (yearElement, i) {\n          var d = new Date(self.currentYear, self.currentMonth, 1);\n          d.setMonth(self.currentMonth + i);\n          self.monthElements[i].textContent = monthToStr(d.getMonth(), self.config.shorthandCurrentMonth, self.l10n) + \" \";\n          yearElement.value = d.getFullYear().toString();\n        });\n        self._hidePrevMonthArrow = self.config.minDate !== undefined && (self.currentYear === self.config.minDate.getFullYear() ? self.currentMonth <= self.config.minDate.getMonth() : self.currentYear < self.config.minDate.getFullYear());\n        self._hideNextMonthArrow = self.config.maxDate !== undefined && (self.currentYear === self.config.maxDate.getFullYear() ? self.currentMonth + 1 > self.config.maxDate.getMonth() : self.currentYear > self.config.maxDate.getFullYear());\n      }\n\n      function updateValue(triggerChange) {\n        if (triggerChange === void 0) {\n          triggerChange = true;\n        }\n\n        if (self.selectedDates.length === 0) return self.clear(triggerChange);\n\n        if (self.mobileInput !== undefined && self.mobileFormatStr) {\n          self.mobileInput.value = self.latestSelectedDateObj !== undefined ? self.formatDate(self.latestSelectedDateObj, self.mobileFormatStr) : \"\";\n        }\n\n        var joinChar = self.config.mode !== \"range\" ? self.config.conjunction : self.l10n.rangeSeparator;\n        self.input.value = self.selectedDates.map(function (dObj) {\n          return self.formatDate(dObj, self.config.dateFormat);\n        }).join(joinChar);\n\n        if (self.altInput !== undefined) {\n          self.altInput.value = self.selectedDates.map(function (dObj) {\n            return self.formatDate(dObj, self.config.altFormat);\n          }).join(joinChar);\n        }\n\n        if (triggerChange !== false) triggerEvent(\"onValueUpdate\");\n      }\n\n      function onMonthNavClick(e) {\n        var isPrevMonth = self.prevMonthNav.contains(e.target);\n        var isNextMonth = self.nextMonthNav.contains(e.target);\n\n        if (isPrevMonth || isNextMonth) {\n          changeMonth(isPrevMonth ? -1 : 1);\n        } else if (self.yearElements.indexOf(e.target) >= 0) {\n          e.preventDefault();\n          e.target.select();\n        } else if (e.target.classList.contains(\"arrowUp\")) {\n          self.changeYear(self.currentYear + 1);\n        } else if (e.target.classList.contains(\"arrowDown\")) {\n          self.changeYear(self.currentYear - 1);\n        }\n      }\n\n      function timeWrapper(e) {\n        e.preventDefault();\n        var isKeyDown = e.type === \"keydown\",\n            input = e.target;\n\n        if (self.amPM !== undefined && e.target === self.amPM) {\n          self.amPM.textContent = self.l10n.amPM[int(self.amPM.textContent === self.l10n.amPM[0])];\n        }\n\n        var min = parseFloat(input.getAttribute(\"data-min\")),\n            max = parseFloat(input.getAttribute(\"data-max\")),\n            step = parseFloat(input.getAttribute(\"data-step\")),\n            curValue = parseInt(input.value, 10),\n            delta = e.delta || (isKeyDown ? e.which === 38 ? 1 : -1 : 0);\n        var newValue = curValue + step * delta;\n\n        if (typeof input.value !== \"undefined\" && input.value.length === 2) {\n          var isHourElem = input === self.hourElement,\n              isMinuteElem = input === self.minuteElement;\n\n          if (newValue < min) {\n            newValue = max + newValue + int(!isHourElem) + (int(isHourElem) && int(!self.amPM));\n            if (isMinuteElem) incrementNumInput(undefined, -1, self.hourElement);\n          } else if (newValue > max) {\n            newValue = input === self.hourElement ? newValue - max - int(!self.amPM) : min;\n            if (isMinuteElem) incrementNumInput(undefined, 1, self.hourElement);\n          }\n\n          if (self.amPM && isHourElem && (step === 1 ? newValue + curValue === 23 : Math.abs(newValue - curValue) > step)) {\n            self.amPM.textContent = self.l10n.amPM[int(self.amPM.textContent === self.l10n.amPM[0])];\n          }\n\n          input.value = pad(newValue);\n        }\n      }\n\n      init();\n      return self;\n    }\n\n    function _flatpickr(nodeList, config) {\n      var nodes = Array.prototype.slice.call(nodeList);\n      var instances = [];\n\n      for (var i = 0; i < nodes.length; i++) {\n        var node = nodes[i];\n\n        try {\n          if (node.getAttribute(\"data-fp-omit\") !== null) continue;\n\n          if (node._flatpickr !== undefined) {\n            node._flatpickr.destroy();\n\n            node._flatpickr = undefined;\n          }\n\n          node._flatpickr = FlatpickrInstance(node, config || {});\n          instances.push(node._flatpickr);\n        } catch (e) {\n          console.error(e);\n        }\n      }\n\n      return instances.length === 1 ? instances[0] : instances;\n    }\n\n    if (typeof HTMLElement !== \"undefined\") {\n      HTMLCollection.prototype.flatpickr = NodeList.prototype.flatpickr = function (config) {\n        return _flatpickr(this, config);\n      };\n\n      HTMLElement.prototype.flatpickr = function (config) {\n        return _flatpickr([this], config);\n      };\n    }\n\n    var flatpickr = function flatpickr(selector, config) {\n      if (selector instanceof NodeList) return _flatpickr(selector, config);else if (typeof selector === \"string\") return _flatpickr(window.document.querySelectorAll(selector), config);\n      return _flatpickr([selector], config);\n    };\n\n    flatpickr.defaultConfig = defaults;\n    flatpickr.l10ns = {\n      en: Object.assign({}, english),\n      default: Object.assign({}, english)\n    };\n\n    flatpickr.localize = function (l10n) {\n      flatpickr.l10ns.default = Object.assign({}, flatpickr.l10ns.default, l10n);\n    };\n\n    flatpickr.setDefaults = function (config) {\n      flatpickr.defaultConfig = Object.assign({}, flatpickr.defaultConfig, config);\n    };\n\n    flatpickr.parseDate = createDateParser({});\n    flatpickr.formatDate = createDateFormatter({});\n    flatpickr.compareDates = compareDates;\n\n    if (typeof jQuery !== \"undefined\") {\n      jQuery.fn.flatpickr = function (config) {\n        return _flatpickr(this, config);\n      };\n    }\n\n    Date.prototype.fp_incr = function (days) {\n      return new Date(this.getFullYear(), this.getMonth(), this.getDate() + (typeof days === \"string\" ? parseInt(days, 10) : days));\n    };\n\n    return flatpickr;\n\n})));\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 32 */
/***/ (function(module, exports) {

	eval("var promiseCancel = function(promise, options) {\n\toptions = options || {};\n\tvar timeout = options.timeout;\n\tvar canceled = false;\n\n\tvar cancelResolve;\n\tvar dummyRequest = new Promise(function(resolve, reject) {\n\t\tcancelResolve = resolve;\n\t});\n\n\tvar race = Promise.race([dummyRequest, promise])\n\t.then(function(data) {\n\t\tif(canceled) {\n\t\t\tvar error = new Error('User cancelled promise.');\n\t\t\terror.type = 'cancel';\n\n\t\t\treturn Promise.reject(error);\n\t\t}\n\t\telse if(timeout) {\n\t\t\tvar error = new Error('Promise timeout');\n\t\t\terror.type = 'timeout';\n\n\t\t\treturn Promise.reject(error);\n\t\t}\n\t\telse {\n\t\t\treturn Promise.resolve(data);\n\t\t}\n\t});\n\n\tif(options.timeout) {\n\t\tsetTimeout(function() {\n\t\t\ttimeout = true;\n\t\t\tcancelResolve();\n\t\t}, +options.timeout);\n\t}\n\n\tfunction cancel() {\n\t\tcanceled = true;\n\t\tcancelResolve();\n\t}\n\n\treturn {\n\t\tpromise: race,\n\t\tcancel: cancel,\n\t\tabort: cancel\n\t};\n};\n\nmodule.exports = promiseCancel;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3Byb21pc2UtY2FuY2VsL2luZGV4LmpzP2UyYzAiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwiZmlsZSI6IjMyLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIHByb21pc2VDYW5jZWwgPSBmdW5jdGlvbihwcm9taXNlLCBvcHRpb25zKSB7XG5cdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXHR2YXIgdGltZW91dCA9IG9wdGlvbnMudGltZW91dDtcblx0dmFyIGNhbmNlbGVkID0gZmFsc2U7XG5cblx0dmFyIGNhbmNlbFJlc29sdmU7XG5cdHZhciBkdW1teVJlcXVlc3QgPSBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcblx0XHRjYW5jZWxSZXNvbHZlID0gcmVzb2x2ZTtcblx0fSk7XG5cblx0dmFyIHJhY2UgPSBQcm9taXNlLnJhY2UoW2R1bW15UmVxdWVzdCwgcHJvbWlzZV0pXG5cdC50aGVuKGZ1bmN0aW9uKGRhdGEpIHtcblx0XHRpZihjYW5jZWxlZCkge1xuXHRcdFx0dmFyIGVycm9yID0gbmV3IEVycm9yKCdVc2VyIGNhbmNlbGxlZCBwcm9taXNlLicpO1xuXHRcdFx0ZXJyb3IudHlwZSA9ICdjYW5jZWwnO1xuXG5cdFx0XHRyZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuXHRcdH1cblx0XHRlbHNlIGlmKHRpbWVvdXQpIHtcblx0XHRcdHZhciBlcnJvciA9IG5ldyBFcnJvcignUHJvbWlzZSB0aW1lb3V0Jyk7XG5cdFx0XHRlcnJvci50eXBlID0gJ3RpbWVvdXQnO1xuXG5cdFx0XHRyZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuXHRcdH1cblx0XHRlbHNlIHtcblx0XHRcdHJldHVybiBQcm9taXNlLnJlc29sdmUoZGF0YSk7XG5cdFx0fVxuXHR9KTtcblxuXHRpZihvcHRpb25zLnRpbWVvdXQpIHtcblx0XHRzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuXHRcdFx0dGltZW91dCA9IHRydWU7XG5cdFx0XHRjYW5jZWxSZXNvbHZlKCk7XG5cdFx0fSwgK29wdGlvbnMudGltZW91dCk7XG5cdH1cblxuXHRmdW5jdGlvbiBjYW5jZWwoKSB7XG5cdFx0Y2FuY2VsZWQgPSB0cnVlO1xuXHRcdGNhbmNlbFJlc29sdmUoKTtcblx0fVxuXG5cdHJldHVybiB7XG5cdFx0cHJvbWlzZTogcmFjZSxcblx0XHRjYW5jZWw6IGNhbmNlbCxcblx0XHRhYm9ydDogY2FuY2VsXG5cdH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHByb21pc2VDYW5jZWw7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3Byb21pc2UtY2FuY2VsL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSAzMlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _EE = __webpack_require__(1);\n\nvar _EE2 = _interopRequireDefault(_EE);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Launcher = function () {\n    function Launcher() {\n        var position = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'bottom_left';\n\n        _classCallCheck(this, Launcher);\n\n        this.position = position;\n\n        this.render();\n    }\n\n    _createClass(Launcher, [{\n        key: 'render',\n        value: function render() {\n            var wrapper = document.createElement('div');\n            wrapper.classList.add('fred--launcher', 'fred--launcher_' + this.position);\n\n            var fred = document.createElement('button');\n            fred.classList.add('fred--launcher_btn', 'fred--launcher_btn_fred');\n            fred.setAttribute('role', 'button');\n            fred.addEventListener('click', function (e) {\n                e.preventDefault();\n                _EE2.default.emit('fred-sidebar-toggle');\n            });\n\n            var save = document.createElement('button');\n            save.classList.add('fred--launcher_btn', 'fred--launcher_btn_save');\n            save.setAttribute('role', 'button');\n            save.addEventListener('click', function (e) {\n                e.preventDefault();\n                _EE2.default.emit('fred-save');\n            });\n\n            var undo = document.createElement('button');\n            undo.classList.add('fred--launcher_btn', 'fred--launcher_btn_undo');\n            undo.setAttribute('role', 'button');\n            undo.addEventListener('click', function (e) {\n                e.preventDefault();\n                _EE2.default.emit('fred-undo');\n            });\n\n            wrapper.appendChild(fred);\n            wrapper.appendChild(save);\n            wrapper.appendChild(undo);\n\n            _EE2.default.emit('fred-wrapper-insert', wrapper);\n        }\n    }]);\n\n    return Launcher;\n}();\n\nexports.default = Launcher;\nmodule.exports = exports['default'];\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9fYnVpbGQvYXNzZXRzL2pzL0xhdW5jaGVyLmpzPzUxZDkiXSwibmFtZXMiOlsiTGF1bmNoZXIiLCJwb3NpdGlvbiIsInJlbmRlciIsIndyYXBwZXIiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJjbGFzc0xpc3QiLCJhZGQiLCJmcmVkIiwic2V0QXR0cmlidXRlIiwiYWRkRXZlbnRMaXN0ZW5lciIsImUiLCJwcmV2ZW50RGVmYXVsdCIsImVtaXQiLCJzYXZlIiwidW5kbyIsImFwcGVuZENoaWxkIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBOzs7Ozs7OztJQUVxQkEsUTtBQUNqQix3QkFBc0M7QUFBQSxZQUExQkMsUUFBMEIsdUVBQWYsYUFBZTs7QUFBQTs7QUFDbEMsYUFBS0EsUUFBTCxHQUFnQkEsUUFBaEI7O0FBRUEsYUFBS0MsTUFBTDtBQUNIOzs7O2lDQUVRO0FBQ0wsZ0JBQU1DLFVBQVVDLFNBQVNDLGFBQVQsQ0FBdUIsS0FBdkIsQ0FBaEI7QUFDQUYsb0JBQVFHLFNBQVIsQ0FBa0JDLEdBQWxCLENBQXNCLGdCQUF0QixzQkFBMEQsS0FBS04sUUFBL0Q7O0FBRUEsZ0JBQU1PLE9BQU9KLFNBQVNDLGFBQVQsQ0FBdUIsUUFBdkIsQ0FBYjtBQUNBRyxpQkFBS0YsU0FBTCxDQUFlQyxHQUFmLENBQW1CLG9CQUFuQixFQUF5Qyx5QkFBekM7QUFDQUMsaUJBQUtDLFlBQUwsQ0FBa0IsTUFBbEIsRUFBMEIsUUFBMUI7QUFDQUQsaUJBQUtFLGdCQUFMLENBQXNCLE9BQXRCLEVBQStCLGFBQUs7QUFDaENDLGtCQUFFQyxjQUFGO0FBQ0EsNkJBQVFDLElBQVIsQ0FBYSxxQkFBYjtBQUNILGFBSEQ7O0FBS0EsZ0JBQU1DLE9BQU9WLFNBQVNDLGFBQVQsQ0FBdUIsUUFBdkIsQ0FBYjtBQUNBUyxpQkFBS1IsU0FBTCxDQUFlQyxHQUFmLENBQW1CLG9CQUFuQixFQUF5Qyx5QkFBekM7QUFDQU8saUJBQUtMLFlBQUwsQ0FBa0IsTUFBbEIsRUFBMEIsUUFBMUI7QUFDQUssaUJBQUtKLGdCQUFMLENBQXNCLE9BQXRCLEVBQStCLGFBQUs7QUFDaENDLGtCQUFFQyxjQUFGO0FBQ0EsNkJBQVFDLElBQVIsQ0FBYSxXQUFiO0FBQ0gsYUFIRDs7QUFLQSxnQkFBTUUsT0FBT1gsU0FBU0MsYUFBVCxDQUF1QixRQUF2QixDQUFiO0FBQ0FVLGlCQUFLVCxTQUFMLENBQWVDLEdBQWYsQ0FBbUIsb0JBQW5CLEVBQXlDLHlCQUF6QztBQUNBUSxpQkFBS04sWUFBTCxDQUFrQixNQUFsQixFQUEwQixRQUExQjtBQUNBTSxpQkFBS0wsZ0JBQUwsQ0FBc0IsT0FBdEIsRUFBK0IsYUFBSztBQUNoQ0Msa0JBQUVDLGNBQUY7QUFDQSw2QkFBUUMsSUFBUixDQUFhLFdBQWI7QUFDSCxhQUhEOztBQUtBVixvQkFBUWEsV0FBUixDQUFvQlIsSUFBcEI7QUFDQUwsb0JBQVFhLFdBQVIsQ0FBb0JGLElBQXBCO0FBQ0FYLG9CQUFRYSxXQUFSLENBQW9CRCxJQUFwQjs7QUFFQSx5QkFBUUYsSUFBUixDQUFhLHFCQUFiLEVBQW9DVixPQUFwQztBQUNIOzs7Ozs7a0JBeENnQkgsUSIsImZpbGUiOiIzMy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBlbWl0dGVyIGZyb20gJy4vRUUnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBMYXVuY2hlciB7XG4gICAgY29uc3RydWN0b3IocG9zaXRpb24gPSAnYm90dG9tX2xlZnQnKSB7XG4gICAgICAgIHRoaXMucG9zaXRpb24gPSBwb3NpdGlvbjtcblxuICAgICAgICB0aGlzLnJlbmRlcigpO1xuICAgIH1cbiAgICBcbiAgICByZW5kZXIoKSB7XG4gICAgICAgIGNvbnN0IHdyYXBwZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgd3JhcHBlci5jbGFzc0xpc3QuYWRkKCdmcmVkLS1sYXVuY2hlcicsIGBmcmVkLS1sYXVuY2hlcl8ke3RoaXMucG9zaXRpb259YCk7XG5cbiAgICAgICAgY29uc3QgZnJlZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICAgICAgICBmcmVkLmNsYXNzTGlzdC5hZGQoJ2ZyZWQtLWxhdW5jaGVyX2J0bicsICdmcmVkLS1sYXVuY2hlcl9idG5fZnJlZCcpO1xuICAgICAgICBmcmVkLnNldEF0dHJpYnV0ZSgncm9sZScsICdidXR0b24nKTtcbiAgICAgICAgZnJlZC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGUgPT4ge1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgZW1pdHRlci5lbWl0KCdmcmVkLXNpZGViYXItdG9nZ2xlJyk7XG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgY29uc3Qgc2F2ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICAgICAgICBzYXZlLmNsYXNzTGlzdC5hZGQoJ2ZyZWQtLWxhdW5jaGVyX2J0bicsICdmcmVkLS1sYXVuY2hlcl9idG5fc2F2ZScpO1xuICAgICAgICBzYXZlLnNldEF0dHJpYnV0ZSgncm9sZScsICdidXR0b24nKTtcbiAgICAgICAgc2F2ZS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGUgPT4ge1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgZW1pdHRlci5lbWl0KCdmcmVkLXNhdmUnKTtcbiAgICAgICAgfSk7XG4gICAgICAgIFxuICAgICAgICBjb25zdCB1bmRvID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG4gICAgICAgIHVuZG8uY2xhc3NMaXN0LmFkZCgnZnJlZC0tbGF1bmNoZXJfYnRuJywgJ2ZyZWQtLWxhdW5jaGVyX2J0bl91bmRvJyk7XG4gICAgICAgIHVuZG8uc2V0QXR0cmlidXRlKCdyb2xlJywgJ2J1dHRvbicpO1xuICAgICAgICB1bmRvLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZSA9PiB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBlbWl0dGVyLmVtaXQoJ2ZyZWQtdW5kbycpO1xuICAgICAgICB9KTtcblxuICAgICAgICB3cmFwcGVyLmFwcGVuZENoaWxkKGZyZWQpO1xuICAgICAgICB3cmFwcGVyLmFwcGVuZENoaWxkKHNhdmUpO1xuICAgICAgICB3cmFwcGVyLmFwcGVuZENoaWxkKHVuZG8pO1xuXG4gICAgICAgIGVtaXR0ZXIuZW1pdCgnZnJlZC13cmFwcGVyLWluc2VydCcsIHdyYXBwZXIpO1xuICAgIH1cbn1cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9fYnVpbGQvYXNzZXRzL2pzL0xhdW5jaGVyLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.ElementSettings = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _EE = __webpack_require__(1);\n\nvar _EE2 = _interopRequireDefault(_EE);\n\nvar _isomorphicFetch = __webpack_require__(6);\n\nvar _isomorphicFetch2 = _interopRequireDefault(_isomorphicFetch);\n\nvar _Utils = __webpack_require__(35);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar ElementSettings = exports.ElementSettings = function () {\n    function ElementSettings() {\n        _classCallCheck(this, ElementSettings);\n\n        this.el = null;\n        this.settings = {};\n        this.originalValues = {};\n        this.wrapper = null;\n\n        this.render();\n\n        _EE2.default.on('fred-element-settings-open', this.openSettings.bind(this));\n    }\n\n    _createClass(ElementSettings, [{\n        key: 'render',\n        value: function render() {\n            this.wrapper = document.createElement('div');\n            this.wrapper.classList.add('fred--panel', 'fred--panel_element', 'fred--hidden');\n\n            _EE2.default.emit('fred-wrapper-insert', this.wrapper);\n        }\n    }, {\n        key: 'openSettings',\n        value: function openSettings(el) {\n            this.el = el;\n            this.settings = el.options.settings;\n            this.originalValues = {};\n            this.remote = el.options.remote || false;\n            this.debouncedRender = (0, _Utils.debounce)(200, this.el.render);\n\n            this.wrapper.innerHTML = '';\n            this.wrapper.appendChild(this.renderSettings());\n\n            this.open();\n        }\n    }, {\n        key: 'renderSettings',\n        value: function renderSettings() {\n            var _this = this;\n\n            var form = document.createElement('form');\n            var fieldSet = document.createElement('fieldset');\n\n            var legend = document.createElement('legend');\n            legend.innerHTML = 'Element Settings';\n\n            fieldSet.appendChild(legend);\n\n            this.settings.forEach(function (setting) {\n                if (setting.group && setting.settings) {\n                    fieldSet.appendChild(_this.renderSettingsGroup(setting));\n                } else {\n                    var defaultValue = _this.el.settings[setting.name] || setting.value;\n                    _this.originalValues[setting.name] = defaultValue;\n                    fieldSet.appendChild(_this.renderSetting(setting, defaultValue));\n                }\n            });\n\n            var apply = document.createElement('button');\n            apply.classList.add('fred--btn-panel', 'fred--btn-apply');\n            apply.innerHTML = 'Apply';\n            apply.addEventListener('click', function (e) {\n                e.preventDefault();\n                _this.apply();\n            });\n\n            var cancel = document.createElement('button');\n            cancel.classList.add('fred--btn-panel');\n            cancel.innerHTML = 'Cancel';\n            cancel.addEventListener('click', function (e) {\n                e.preventDefault();\n                _this.cancel(cancel);\n            });\n\n            fieldSet.appendChild(apply);\n            fieldSet.appendChild(cancel);\n\n            form.appendChild(fieldSet);\n\n            return form;\n        }\n    }, {\n        key: 'renderSettingsGroup',\n        value: function renderSettingsGroup(group) {\n            var _this2 = this;\n\n            var content = document.createElement('dl');\n\n            var dt = document.createElement('dt');\n            dt.setAttribute('role', 'tab');\n            dt.setAttribute('tabindex', '1');\n            dt.innerHTML = group.group;\n\n            var dd = document.createElement('dd');\n            group.settings.forEach(function (setting) {\n                var defaultValue = _this2.el.settings[setting.name] || setting.value;\n                _this2.originalValues[setting.name] = defaultValue;\n                dd.appendChild(_this2.renderSetting(setting, defaultValue));\n            });\n\n            content.appendChild(dt);\n            content.appendChild(dd);\n\n            return content;\n        }\n    }, {\n        key: 'renderSetting',\n        value: function renderSetting(setting, defaultValue) {\n\n            switch (setting.type) {\n                case 'select':\n                    return this.buildSelectInput(setting, defaultValue);\n                case 'toggle':\n                    return this.buildToggleInput(setting, defaultValue);\n                default:\n                    return this.buildTextInput(setting, defaultValue);\n            }\n        }\n    }, {\n        key: 'buildTextInput',\n        value: function buildTextInput(setting, defaultValue) {\n            var _this3 = this;\n\n            var label = document.createElement('label');\n            label.innerHTML = setting.label || setting.name;\n\n            var input = document.createElement('input');\n            input.setAttribute('type', 'text');\n            input.value = defaultValue;\n\n            input.addEventListener('keyup', function (e) {\n                _this3.setSetting(setting.name, input.value);\n            });\n\n            label.appendChild(input);\n\n            return label;\n        }\n    }, {\n        key: 'buildSelectInput',\n        value: function buildSelectInput(setting, defaultValue) {\n            var _this4 = this;\n\n            var label = document.createElement('label');\n            label.innerHTML = setting.label || setting.name;\n\n            var select = document.createElement('select');\n\n            if (setting.options) {\n                for (var value in setting.options) {\n                    if (setting.options.hasOwnProperty(value)) {\n                        var option = document.createElement('option');\n                        option.innerHTML = setting.options[value];\n                        option.value = value;\n\n                        if (value === defaultValue) {\n                            option.setAttribute('selected', 'selected');\n                        }\n\n                        select.appendChild(option);\n                    }\n                }\n            }\n\n            select.addEventListener('change', function (e) {\n                if (setting.options[select.value]) {\n                    _this4.setSetting(setting.name, select.value);\n                }\n            });\n\n            label.appendChild(select);\n\n            return label;\n        }\n    }, {\n        key: 'buildToggleInput',\n        value: function buildToggleInput(setting, defaultValue) {\n            var _this5 = this;\n\n            var label = document.createElement('label');\n            label.classList.add('fred--toggle');\n            label.innerHTML = setting.label || setting.name;\n\n            var input = document.createElement('input');\n            input.setAttribute('type', 'checkbox');\n            if (defaultValue === true) {\n                input.setAttribute('checked', 'checked');\n            }\n\n            input.addEventListener('change', function (e) {\n                _this5.setSetting(setting.name, e.target.checked);\n            });\n\n            var span = document.createElement('span');\n\n            label.appendChild(input);\n            label.appendChild(span);\n\n            return label;\n        }\n    }, {\n        key: 'setSetting',\n        value: function setSetting(name, value) {\n            this.el.settings[name] = value;\n\n            if (this.remote === false) {\n                this.el.render();\n            } else {\n                this.debouncedRender();\n            }\n        }\n    }, {\n        key: 'apply',\n        value: function apply() {\n            this.el.render();\n            this.close();\n        }\n    }, {\n        key: 'settingChanged',\n        value: function settingChanged() {\n            for (var name in this.el.settings) {\n                if (this.el.settings.hasOwnProperty(name)) {\n                    if (!(this.originalValues[name] && this.originalValues[name] === this.el.settings[name])) {\n                        return true;\n                    }\n                }\n            }\n\n            return false;\n        }\n    }, {\n        key: 'cancel',\n        value: function cancel(btn) {\n            if (this.settingChanged() && btn.confirmed !== true) {\n                btn.innerHTML = 'There are unsaved changes, are you sure?';\n                btn.confirmed = true;\n                return;\n            }\n\n            this.realCancel();\n        }\n    }, {\n        key: 'realCancel',\n        value: function realCancel() {\n            this.el.settings = this.originalValues;\n            this.el.render();\n            this.close();\n        }\n    }, {\n        key: 'open',\n        value: function open() {\n            this.wrapper.classList.remove('fred--hidden');\n        }\n    }, {\n        key: 'close',\n        value: function close() {\n            this.wrapper.classList.add('fred--hidden');\n        }\n    }]);\n\n    return ElementSettings;\n}();\n\nexports.default = ElementSettings;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 35 */
/***/ (function(module, exports) {

	eval("\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nvar debounce = exports.debounce = function debounce(delay, fn) {\n    var timerId = void 0;\n\n    return function () {\n        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n        }\n\n        if (timerId) {\n            clearTimeout(timerId);\n        }\n        timerId = setTimeout(function () {\n            fn.apply(undefined, args);\n            timerId = null;\n        }, delay);\n    };\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9fYnVpbGQvYXNzZXRzL2pzL1V0aWxzLmpzP2QzZjMiXSwibmFtZXMiOlsiZGVib3VuY2UiLCJkZWxheSIsImZuIiwidGltZXJJZCIsImFyZ3MiLCJjbGVhclRpbWVvdXQiLCJzZXRUaW1lb3V0Il0sIm1hcHBpbmdzIjoiOzs7OztBQUFPLElBQU1BLDhCQUFXLFNBQVhBLFFBQVcsQ0FBQ0MsS0FBRCxFQUFRQyxFQUFSLEVBQWU7QUFDbkMsUUFBSUMsZ0JBQUo7O0FBRUEsV0FBTyxZQUFtQjtBQUFBLDBDQUFOQyxJQUFNO0FBQU5BLGdCQUFNO0FBQUE7O0FBQ3RCLFlBQUlELE9BQUosRUFBYTtBQUNURSx5QkFBYUYsT0FBYjtBQUNIO0FBQ0RBLGtCQUFVRyxXQUFXLFlBQU07QUFDdkJKLGdDQUFNRSxJQUFOO0FBQ0FELHNCQUFVLElBQVY7QUFDSCxTQUhTLEVBR1BGLEtBSE8sQ0FBVjtBQUlILEtBUkQ7QUFTSCxDQVpNIiwiZmlsZSI6IjM1LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IGRlYm91bmNlID0gKGRlbGF5LCBmbikgPT4ge1xuICAgIGxldCB0aW1lcklkO1xuICAgIFxuICAgIHJldHVybiBmdW5jdGlvbiAoLi4uYXJncykge1xuICAgICAgICBpZiAodGltZXJJZCkge1xuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVySWQpO1xuICAgICAgICB9XG4gICAgICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIGZuKC4uLmFyZ3MpO1xuICAgICAgICAgICAgdGltZXJJZCA9IG51bGw7XG4gICAgICAgIH0sIGRlbGF5KTtcbiAgICB9O1xufTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9fYnVpbGQvYXNzZXRzL2pzL1V0aWxzLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _modxlink = __webpack_require__(37);\n\nvar _modxlink2 = _interopRequireDefault(_modxlink);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar registerPlugins = function registerPlugins(fred) {\n    tinymce.PluginManager.add('modxlink', (0, _modxlink2.default)(fred));\n};\n\nexports.default = registerPlugins;\nmodule.exports = exports['default'];\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9fYnVpbGQvYXNzZXRzL2pzL1RpbnlNQ0UvUmVnaXN0ZXJQbHVnaW5zLmpzPzkzNjMiXSwibmFtZXMiOlsicmVnaXN0ZXJQbHVnaW5zIiwidGlueW1jZSIsIlBsdWdpbk1hbmFnZXIiLCJhZGQiLCJmcmVkIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTs7Ozs7O0FBRUEsSUFBTUEsa0JBQWtCLFNBQWxCQSxlQUFrQixPQUFRO0FBQzVCQyxZQUFRQyxhQUFSLENBQXNCQyxHQUF0QixDQUEwQixVQUExQixFQUFzQyx3QkFBU0MsSUFBVCxDQUF0QztBQUVILENBSEQ7O2tCQUtlSixlIiwiZmlsZSI6IjM2LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IG1vZHhsaW5rIGZyb20gJy4vUGx1Z2lucy9tb2R4bGluay9tb2R4bGluayc7XG5cbmNvbnN0IHJlZ2lzdGVyUGx1Z2lucyA9IGZyZWQgPT4ge1xuICAgIHRpbnltY2UuUGx1Z2luTWFuYWdlci5hZGQoJ21vZHhsaW5rJywgbW9keGxpbmsoZnJlZCkpO1xuXG59O1xuXG5leHBvcnQgZGVmYXVsdCByZWdpc3RlclBsdWdpbnM7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vX2J1aWxkL2Fzc2V0cy9qcy9UaW55TUNFL1JlZ2lzdGVyUGx1Z2lucy5qcyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _choices = __webpack_require__(8);\n\nvar _choices2 = _interopRequireDefault(_choices);\n\nvar _isomorphicFetch = __webpack_require__(6);\n\nvar _isomorphicFetch2 = _interopRequireDefault(_isomorphicFetch);\n\nvar _ElementHelper = __webpack_require__(38);\n\nvar _ElementHelper2 = _interopRequireDefault(_ElementHelper);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = function (fred) {\n    return function (editor, url) {\n        // Add a button that opens a window\n\n        editor.addButton('modxlink', {\n            icon: 'link',\n            onclick: function onclick() {\n\n                var elm = void 0;\n                var activeTab = 0;\n\n                var data = {\n                    link_text: editor.selection.getContent(),\n                    link_title: '',\n                    classes: '',\n                    new_window: false,\n                    page: {\n                        page: '',\n                        url: '',\n                        anchor: ''\n                    },\n                    url: {\n                        url: ''\n                    },\n                    email: {\n                        to: '',\n                        subject: '',\n                        body: ''\n                    },\n                    phone: {},\n                    file: {}\n                };\n\n                elm = editor.dom.getParent(editor.selection.getStart(), 'a[href]');\n                if (elm) {\n                    editor.selection.select(elm);\n\n                    var parsedData = _ElementHelper2.default.getData(elm, data);\n\n                    data = _extends({}, data, parsedData.data);\n\n                    switch (parsedData.tab) {\n                        case 'page':\n                            activeTab = 0;\n                            break;\n                        case 'url':\n                            activeTab = 1;\n                            break;\n                        case 'email':\n                            activeTab = 2;\n                            break;\n                    }\n                }\n\n                console.log(data);\n\n                var tabPanel = new tinymce.ui.TabPanel({\n                    type: 'tabpanel',\n                    classes: 'fred--modxlink-panel',\n                    activeTab: activeTab,\n                    items: [{\n                        title: 'Page',\n                        id: 'page',\n                        type: 'form',\n                        items: [{\n                            type: 'form',\n                            layout: 'grid',\n                            padding: 0,\n                            columns: 2,\n                            items: [{\n                                type: 'selectbox',\n                                label: 'Page',\n                                id: 'page_url',\n                                value: data.page.page\n                            }, {\n                                type: 'textbox',\n                                label: 'Block on \\'' + fred.config.pageSettings.pagetitle + '\\'',\n                                id: 'page_anchor',\n                                value: data.page.anchor,\n                                onkeyup: function onkeyup() {\n                                    data.page.anchor = this.value();\n                                }\n                            }]\n                        }]\n                    }, {\n                        title: 'URL',\n                        id: 'url',\n                        type: 'form',\n                        items: [{\n                            type: 'textbox',\n                            label: 'URL',\n                            value: data.url.url,\n                            onkeyup: function onkeyup() {\n                                data.url.url = this.value();\n                            }\n                        }]\n                    }, {\n                        title: 'Email',\n                        id: 'email',\n                        type: 'form',\n                        items: [{\n                            type: 'textbox',\n                            label: 'To',\n                            value: data.email.to,\n                            onkeyup: function onkeyup() {\n                                data.email.to = this.value();\n                            }\n                        }, {\n                            type: 'textbox',\n                            label: 'Subject',\n                            value: data.email.subject,\n                            onkeyup: function onkeyup() {\n                                data.email.subject = this.value();\n                            }\n                        }, {\n                            type: 'textbox',\n                            multiline: true,\n                            label: 'Body',\n                            value: data.email.body,\n                            onkeyup: function onkeyup() {\n                                data.email.body = this.value();\n                            }\n                        }]\n                    }, {\n                        title: 'Phone',\n                        id: 'phone',\n                        type: 'form',\n                        items: []\n                    }, {\n                        title: 'File',\n                        id: 'file',\n                        type: 'form',\n                        items: []\n                    }]\n                });\n\n                // Open window\n                var win = editor.windowManager.open({\n                    title: 'Link to',\n                    classes: 'fred--modxlink',\n                    data: data,\n                    body: [{\n                        type: 'textbox',\n                        label: 'Link Text',\n                        name: 'link_text',\n                        onkeyup: function onkeyup() {\n                            data.link_text = this.value();\n                        }\n                    }, {\n                        type: 'form',\n                        layout: 'grid',\n                        padding: 0,\n                        columns: 3,\n                        items: [{\n                            type: 'textbox',\n                            name: 'link_title',\n                            label: 'Link Title',\n                            onkeyup: function onkeyup() {\n                                data.link_title = this.value();\n                            }\n                        }, {\n                            type: 'textbox',\n                            name: 'classes',\n                            label: 'Classes',\n                            onkeyup: function onkeyup() {\n                                data.classes = this.value();\n                            }\n                        }, {\n                            type: 'checkbox',\n                            name: 'new_window',\n                            label: 'New Window',\n                            onchange: function onchange() {\n                                data.new_window = this.value();\n                            }\n                        }]\n                    }, tabPanel],\n                    onsubmit: function (tabPanel) {\n                        return function (e) {\n                            var activeTab = tabPanel.items()[tabPanel.activeTabId.slice(1)]._id;\n                            console.log(activeTab);\n                            console.log(data);\n\n                            var elm = editor.dom.getParent(editor.selection.getStart(), 'a[href]');\n\n                            if (activeTab === 'page') {\n                                if (elm) {\n                                    if (!data.page.page && !data.page.anchor) return;\n\n                                    editor.focus();\n                                    editor.dom.removeAllAttribs(elm);\n\n                                    editor.dom.setAttrib(elm, 'data-fred-link-page', data.page.page);\n\n                                    if (data.page.anchor) {\n                                        editor.dom.setAttrib(elm, 'data-fred-link-anchor', data.page.anchor);\n                                        editor.dom.setAttrib(elm, 'href', data.page.url + '#' + data.page.anchor);\n                                    } else {\n                                        editor.dom.setAttrib(elm, 'href', data.page.url);\n                                    }\n\n                                    if (data.link_title) {\n                                        editor.dom.setAttrib(elm, 'title', data.link_title);\n                                    }\n\n                                    if (data.new_window) {\n                                        editor.dom.setAttrib(elm, 'target', '_blank');\n                                    }\n\n                                    if (data.classes) {\n                                        editor.dom.setAttrib(elm, 'class', data.classes);\n                                    }\n\n                                    elm.innerText = editor.dom.encode(data.link_text);\n                                    editor.selection.select(elm);\n                                    editor.selection.collapse(false);\n                                } else {\n                                    var attrs = {\n                                        href: data.page.url,\n                                        'data-fred-link-page': data.page.page\n                                    };\n\n                                    if (data.page.anchor) {\n                                        attrs['data-fred-link-anchor'] = data.page.anchor;\n                                        attrs.href = data.page.url + '#' + data.page.anchor;\n                                    }\n\n                                    if (data.link_title) {\n                                        attrs.title = data.link_title;\n                                    }\n\n                                    if (data.new_window) {\n                                        attrs.target = '_blank';\n                                    }\n\n                                    if (data.classes) {\n                                        attrs.class = data.classes;\n                                    }\n\n                                    editor.insertContent(editor.dom.createHTML('a', attrs, editor.dom.encode(data.link_text)));\n\n                                    editor.selection.collapse(false);\n                                }\n\n                                return;\n                            }\n\n                            if (activeTab === 'url') {\n                                if (elm) {\n                                    editor.focus();\n                                    editor.dom.removeAllAttribs(elm);\n\n                                    editor.dom.setAttrib(elm, 'href', data.url.url);\n\n                                    if (data.link_title) {\n                                        editor.dom.setAttrib(elm, 'title', data.link_title);\n                                    }\n\n                                    if (data.new_window) {\n                                        editor.dom.setAttrib(elm, 'target', '_blank');\n                                    }\n\n                                    if (data.classes) {\n                                        editor.dom.setAttrib(elm, 'class', data.classes);\n                                    }\n\n                                    elm.innerText = editor.dom.encode(data.link_text);\n                                    editor.selection.select(elm);\n                                    editor.selection.collapse(false);\n                                } else {\n                                    var _attrs = {\n                                        href: data.url.url\n                                    };\n\n                                    if (data.link_title) {\n                                        _attrs.title = data.link_title;\n                                    }\n\n                                    if (data.new_window) {\n                                        _attrs.target = '_blank';\n                                    }\n\n                                    if (data.classes) {\n                                        _attrs.class = data.classes;\n                                    }\n\n                                    editor.insertContent(editor.dom.createHTML('a', _attrs, editor.dom.encode(data.link_text)));\n\n                                    editor.selection.collapse(false);\n                                }\n                            }\n\n                            if (activeTab === 'email') {\n                                if (elm) {\n                                    editor.focus();\n                                    editor.dom.removeAllAttribs(elm);\n\n                                    var href = 'mailto:' + data.email.to;\n                                    var mailAttrs = [];\n\n                                    if (data.email.subject) {\n                                        mailAttrs.push('subject=' + encodeURI(data.email.subject));\n                                    }\n\n                                    if (data.email.body) {\n                                        mailAttrs.push('body=' + encodeURI(data.email.body));\n                                    }\n\n                                    if (mailAttrs.length > 0) {\n                                        href += '?' + mailAttrs.join('&');\n                                    }\n\n                                    editor.dom.setAttrib(elm, 'href', href);\n\n                                    if (data.link_title) {\n                                        editor.dom.setAttrib(elm, 'title', data.link_title);\n                                    }\n\n                                    if (data.new_window) {\n                                        editor.dom.setAttrib(elm, 'target', '_blank');\n                                    }\n\n                                    if (data.classes) {\n                                        editor.dom.setAttrib(elm, 'class', data.classes);\n                                    }\n\n                                    elm.innerText = editor.dom.encode(data.link_text);\n                                    editor.selection.select(elm);\n                                    editor.selection.collapse(false);\n                                } else {\n                                    var _href = 'mailto:' + data.email.to;\n                                    var _mailAttrs = [];\n\n                                    if (data.email.subject) {\n                                        _mailAttrs.push('subject=' + encodeURI(data.email.subject));\n                                    }\n\n                                    if (data.email.body) {\n                                        _mailAttrs.push('body=' + encodeURI(data.email.body));\n                                    }\n\n                                    if (_mailAttrs.length > 0) {\n                                        _href += '?' + _mailAttrs.join('&');\n                                    }\n\n                                    var _attrs2 = {\n                                        href: _href\n                                    };\n\n                                    if (data.link_title) {\n                                        _attrs2.title = data.link_title;\n                                    }\n\n                                    if (data.new_window) {\n                                        _attrs2.target = '_blank';\n                                    }\n\n                                    if (data.classes) {\n                                        _attrs2.class = data.classes;\n                                    }\n\n                                    editor.insertContent(editor.dom.createHTML('a', _attrs2, editor.dom.encode(data.link_text)));\n\n                                    editor.selection.collapse(false);\n                                }\n                            }\n                        };\n                    }(tabPanel)\n                });\n\n                var input = document.querySelector('#page_url');\n                // const wrapper = document.createElement('div');\n                // wrapper.classList.add('choices__inner');\n                //\n                // input.parentNode.replaceChild(wrapper, input);\n                // wrapper.appendChild(input);\n\n                var lookupTimeout = null;\n                var lookupCache = {};\n                var initData = [];\n\n                var templateInputChoices = new _choices2.default(input);\n                templateInputChoices.ajax(function (callback) {\n                    (0, _isomorphicFetch2.default)(fred.config.assetsUrl + 'endpoints/ajax.php?action=rte-get-resources').then(function (response) {\n                        return response.json();\n                    }).then(function (data) {\n                        initData = data.data.resources;\n                        callback(data.data.resources, 'value', 'pagetitle');\n                    }).catch(function (error) {\n                        console.log(error);\n                    });\n                });\n\n                var populateOptions = function populateOptions(options) {\n                    var toRemove = [];\n\n                    templateInputChoices.currentState.items.forEach(function (item) {\n                        if (item.active) {\n                            toRemove.push(item.value);\n                        }\n                    });\n\n                    var toKeep = [];\n                    options.forEach(function (option) {\n                        if (toRemove.indexOf(option.id) === -1) {\n                            toKeep.push(option);\n                        }\n                    });\n\n                    templateInputChoices.setChoices(toKeep, 'value', 'pagetitle', true);\n                };\n\n                var serverLookup = function serverLookup() {\n                    var query = templateInputChoices.input.value;\n                    if (query in lookupCache) {\n                        populateOptions(lookupCache[query]);\n                    } else {\n                        (0, _isomorphicFetch2.default)(fred.config.assetsUrl + 'endpoints/ajax.php?action=rte-get-resources&query=' + query).then(function (response) {\n                            return response.json();\n                        }).then(function (data) {\n                            lookupCache[query] = data.data.resources;\n                            populateOptions(data.data.resources);\n                        }).catch(function (error) {\n                            console.log(error);\n                        });\n                    }\n                };\n\n                templateInputChoices.passedElement.addEventListener('search', function (event) {\n                    clearTimeout(lookupTimeout);\n                    lookupTimeout = setTimeout(serverLookup, 200);\n                });\n\n                templateInputChoices.passedElement.addEventListener('choice', function (event) {\n                    templateInputChoices.setChoices(initData, 'value', 'pagetitle', true);\n                    data.page.page = event.detail.choice.value;\n                    data.page.url = event.detail.choice.customProperties.url;\n\n                    var pageAnchorEl = document.getElementById('page_anchor-l');\n                    if (pageAnchorEl) {\n                        pageAnchorEl.innerText = 'Block on \\'' + event.detail.choice.label + '\\'';\n                    }\n                });\n            },\n            stateSelector: 'a[href]'\n        });\n\n        return {\n            getMetadata: function getMetadata() {\n                return {\n                    name: \"Example plugin\",\n                    url: \"http://exampleplugindocsurl.com\"\n                };\n            }\n        };\n    };\n};\n\nmodule.exports = exports['default'];\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 38 */
/***/ (function(module, exports) {

	eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar ElementHelper = function () {\n    function ElementHelper() {\n        _classCallCheck(this, ElementHelper);\n    }\n\n    _createClass(ElementHelper, null, [{\n        key: 'getData',\n        value: function getData(el, initData) {\n            var data = {\n                global: {\n                    link_text: '',\n                    link_title: '',\n                    classes: '',\n                    new_window: false\n                },\n                page: _extends({}, initData.page),\n                url: _extends({}, initData.url),\n                email: _extends({}, initData.email)\n            };\n\n            data.global.link_title = el.getAttribute('title');\n            data.global.classes = el.getAttribute('class');\n            data.global.new_window = el.getAttribute('target') === '_blank';\n            data.global.link_text = el.innerText;\n\n            var url = el.getAttribute('href') || '';\n\n            data.page.page = el.getAttribute('data-fred-link-page');\n            data.page.anchor = el.getAttribute('data-fred-link-anchor');\n\n            if (data.page.page || data.page.anchor) {\n                data.page.url = url.replace('#' + data.page.anchor, '');\n\n                return {\n                    tab: 'page',\n                    data: _extends({}, data.global, {\n                        page: _extends({}, data.page)\n                    })\n                };\n            }\n\n            if (url.slice(0, 7) === 'mailto:') {\n                url = url.slice(7);\n                url = url.split('?');\n\n                data.email.to = url[0];\n                if (url[1]) {\n                    var components = url[1].split('&');\n                    components.forEach(function (component) {\n                        component = component.split('=');\n                        if (component[0] === 'subject') {\n                            data.email.subject = decodeURI(component[1]);\n                        }\n\n                        if (component[0] === 'body') {\n                            data.email.body = decodeURI(component[1]);\n                        }\n                    });\n                }\n\n                return {\n                    tab: 'email',\n                    data: _extends({}, data.global, {\n                        email: _extends({}, data.email)\n                    })\n                };\n            }\n\n            data.url.url = url;\n\n            return {\n                tab: 'url',\n                data: _extends({}, data.global, {\n                    url: _extends({}, data.url)\n                })\n            };\n        }\n    }]);\n\n    return ElementHelper;\n}();\n\nexports.default = ElementHelper;\nmodule.exports = exports['default'];\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9fYnVpbGQvYXNzZXRzL2pzL1RpbnlNQ0UvUGx1Z2lucy9tb2R4bGluay9FbGVtZW50SGVscGVyLmpzPzU1Y2EiXSwibmFtZXMiOlsiRWxlbWVudEhlbHBlciIsImVsIiwiaW5pdERhdGEiLCJkYXRhIiwiZ2xvYmFsIiwibGlua190ZXh0IiwibGlua190aXRsZSIsImNsYXNzZXMiLCJuZXdfd2luZG93IiwicGFnZSIsInVybCIsImVtYWlsIiwiZ2V0QXR0cmlidXRlIiwiaW5uZXJUZXh0IiwiYW5jaG9yIiwicmVwbGFjZSIsInRhYiIsInNsaWNlIiwic3BsaXQiLCJ0byIsImNvbXBvbmVudHMiLCJmb3JFYWNoIiwiY29tcG9uZW50Iiwic3ViamVjdCIsImRlY29kZVVSSSIsImJvZHkiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztJQUFxQkEsYTs7Ozs7OztnQ0FDRkMsRSxFQUFJQyxRLEVBQVU7QUFDekIsZ0JBQU1DLE9BQU87QUFDVEMsd0JBQVE7QUFDSkMsK0JBQVcsRUFEUDtBQUVKQyxnQ0FBWSxFQUZSO0FBR0pDLDZCQUFTLEVBSEw7QUFJSkMsZ0NBQVk7QUFKUixpQkFEQztBQU9UQyxtQ0FDUVAsU0FBU08sSUFEakIsQ0FQUztBQVVUQyxrQ0FDUVIsU0FBU1EsR0FEakIsQ0FWUztBQWFUQyxvQ0FDUVQsU0FBU1MsS0FEakI7QUFiUyxhQUFiOztBQWtCQVIsaUJBQUtDLE1BQUwsQ0FBWUUsVUFBWixHQUF5QkwsR0FBR1csWUFBSCxDQUFnQixPQUFoQixDQUF6QjtBQUNBVCxpQkFBS0MsTUFBTCxDQUFZRyxPQUFaLEdBQXNCTixHQUFHVyxZQUFILENBQWdCLE9BQWhCLENBQXRCO0FBQ0FULGlCQUFLQyxNQUFMLENBQVlJLFVBQVosR0FBMEJQLEdBQUdXLFlBQUgsQ0FBZ0IsUUFBaEIsTUFBOEIsUUFBeEQ7QUFDQVQsaUJBQUtDLE1BQUwsQ0FBWUMsU0FBWixHQUF3QkosR0FBR1ksU0FBM0I7O0FBRUEsZ0JBQUlILE1BQU1ULEdBQUdXLFlBQUgsQ0FBZ0IsTUFBaEIsS0FBMkIsRUFBckM7O0FBRUFULGlCQUFLTSxJQUFMLENBQVVBLElBQVYsR0FBaUJSLEdBQUdXLFlBQUgsQ0FBZ0IscUJBQWhCLENBQWpCO0FBQ0FULGlCQUFLTSxJQUFMLENBQVVLLE1BQVYsR0FBbUJiLEdBQUdXLFlBQUgsQ0FBZ0IsdUJBQWhCLENBQW5COztBQUVBLGdCQUFJVCxLQUFLTSxJQUFMLENBQVVBLElBQVYsSUFBa0JOLEtBQUtNLElBQUwsQ0FBVUssTUFBaEMsRUFBd0M7QUFDcENYLHFCQUFLTSxJQUFMLENBQVVDLEdBQVYsR0FBZ0JBLElBQUlLLE9BQUosQ0FBYSxNQUFNWixLQUFLTSxJQUFMLENBQVVLLE1BQTdCLEVBQXNDLEVBQXRDLENBQWhCOztBQUVBLHVCQUFPO0FBQ0hFLHlCQUFLLE1BREY7QUFFSGIsdUNBQ1FBLEtBQUtDLE1BRGI7QUFFSUssMkNBQ1FOLEtBQUtNLElBRGI7QUFGSjtBQUZHLGlCQUFQO0FBU0g7O0FBRUQsZ0JBQUlDLElBQUlPLEtBQUosQ0FBVSxDQUFWLEVBQVksQ0FBWixNQUFtQixTQUF2QixFQUFrQztBQUM5QlAsc0JBQU1BLElBQUlPLEtBQUosQ0FBVSxDQUFWLENBQU47QUFDQVAsc0JBQU1BLElBQUlRLEtBQUosQ0FBVSxHQUFWLENBQU47O0FBRUFmLHFCQUFLUSxLQUFMLENBQVdRLEVBQVgsR0FBZ0JULElBQUksQ0FBSixDQUFoQjtBQUNBLG9CQUFJQSxJQUFJLENBQUosQ0FBSixFQUFZO0FBQ1Isd0JBQU1VLGFBQWFWLElBQUksQ0FBSixFQUFPUSxLQUFQLENBQWEsR0FBYixDQUFuQjtBQUNBRSwrQkFBV0MsT0FBWCxDQUFtQixxQkFBYTtBQUM1QkMsb0NBQVlBLFVBQVVKLEtBQVYsQ0FBZ0IsR0FBaEIsQ0FBWjtBQUNBLDRCQUFJSSxVQUFVLENBQVYsTUFBaUIsU0FBckIsRUFBZ0M7QUFDNUJuQixpQ0FBS1EsS0FBTCxDQUFXWSxPQUFYLEdBQXFCQyxVQUFVRixVQUFVLENBQVYsQ0FBVixDQUFyQjtBQUNIOztBQUVELDRCQUFJQSxVQUFVLENBQVYsTUFBaUIsTUFBckIsRUFBNkI7QUFDekJuQixpQ0FBS1EsS0FBTCxDQUFXYyxJQUFYLEdBQWtCRCxVQUFVRixVQUFVLENBQVYsQ0FBVixDQUFsQjtBQUNIO0FBQ0oscUJBVEQ7QUFVSDs7QUFFRCx1QkFBTztBQUNITix5QkFBSyxPQURGO0FBRUhiLHVDQUNRQSxLQUFLQyxNQURiO0FBRUlPLDRDQUNRUixLQUFLUSxLQURiO0FBRko7QUFGRyxpQkFBUDtBQVNIOztBQUVEUixpQkFBS08sR0FBTCxDQUFTQSxHQUFULEdBQWVBLEdBQWY7O0FBRUEsbUJBQU87QUFDSE0scUJBQUssS0FERjtBQUVIYixtQ0FDUUEsS0FBS0MsTUFEYjtBQUVJTSxzQ0FDUVAsS0FBS08sR0FEYjtBQUZKO0FBRkcsYUFBUDtBQVNIOzs7Ozs7a0JBckZnQlYsYSIsImZpbGUiOiIzOC5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGNsYXNzIEVsZW1lbnRIZWxwZXIge1xuICAgIHN0YXRpYyBnZXREYXRhKGVsLCBpbml0RGF0YSkge1xuICAgICAgICBjb25zdCBkYXRhID0ge1xuICAgICAgICAgICAgZ2xvYmFsOiB7XG4gICAgICAgICAgICAgICAgbGlua190ZXh0OiAnJyxcbiAgICAgICAgICAgICAgICBsaW5rX3RpdGxlOiAnJyxcbiAgICAgICAgICAgICAgICBjbGFzc2VzOiAnJyxcbiAgICAgICAgICAgICAgICBuZXdfd2luZG93OiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHBhZ2U6IHtcbiAgICAgICAgICAgICAgICAuLi4oaW5pdERhdGEucGFnZSlcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB1cmw6IHtcbiAgICAgICAgICAgICAgICAuLi4oaW5pdERhdGEudXJsKVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVtYWlsOiB7XG4gICAgICAgICAgICAgICAgLi4uKGluaXREYXRhLmVtYWlsKVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGRhdGEuZ2xvYmFsLmxpbmtfdGl0bGUgPSBlbC5nZXRBdHRyaWJ1dGUoJ3RpdGxlJyk7XG4gICAgICAgIGRhdGEuZ2xvYmFsLmNsYXNzZXMgPSBlbC5nZXRBdHRyaWJ1dGUoJ2NsYXNzJyk7XG4gICAgICAgIGRhdGEuZ2xvYmFsLm5ld193aW5kb3cgPSAoZWwuZ2V0QXR0cmlidXRlKCd0YXJnZXQnKSA9PT0gJ19ibGFuaycpO1xuICAgICAgICBkYXRhLmdsb2JhbC5saW5rX3RleHQgPSBlbC5pbm5lclRleHQ7XG4gICAgICAgIFxuICAgICAgICBsZXQgdXJsID0gZWwuZ2V0QXR0cmlidXRlKCdocmVmJykgfHwgJyc7XG5cbiAgICAgICAgZGF0YS5wYWdlLnBhZ2UgPSBlbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtZnJlZC1saW5rLXBhZ2UnKTtcbiAgICAgICAgZGF0YS5wYWdlLmFuY2hvciA9IGVsLmdldEF0dHJpYnV0ZSgnZGF0YS1mcmVkLWxpbmstYW5jaG9yJyk7XG4gICAgICAgIFxuICAgICAgICBpZiAoZGF0YS5wYWdlLnBhZ2UgfHwgZGF0YS5wYWdlLmFuY2hvcikge1xuICAgICAgICAgICAgZGF0YS5wYWdlLnVybCA9IHVybC5yZXBsYWNlKCgnIycgKyBkYXRhLnBhZ2UuYW5jaG9yKSwgJycpO1xuXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHRhYjogJ3BhZ2UnLFxuICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgLi4uKGRhdGEuZ2xvYmFsKSxcbiAgICAgICAgICAgICAgICAgICAgcGFnZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgLi4uKGRhdGEucGFnZSlcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodXJsLnNsaWNlKDAsNykgPT09ICdtYWlsdG86Jykge1xuICAgICAgICAgICAgdXJsID0gdXJsLnNsaWNlKDcpO1xuICAgICAgICAgICAgdXJsID0gdXJsLnNwbGl0KCc/Jyk7XG5cbiAgICAgICAgICAgIGRhdGEuZW1haWwudG8gPSB1cmxbMF07XG4gICAgICAgICAgICBpZiAodXJsWzFdKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY29tcG9uZW50cyA9IHVybFsxXS5zcGxpdCgnJicpO1xuICAgICAgICAgICAgICAgIGNvbXBvbmVudHMuZm9yRWFjaChjb21wb25lbnQgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb21wb25lbnQgPSBjb21wb25lbnQuc3BsaXQoJz0nKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbXBvbmVudFswXSA9PT0gJ3N1YmplY3QnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhLmVtYWlsLnN1YmplY3QgPSBkZWNvZGVVUkkoY29tcG9uZW50WzFdKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmIChjb21wb25lbnRbMF0gPT09ICdib2R5Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5lbWFpbC5ib2R5ID0gZGVjb2RlVVJJKGNvbXBvbmVudFsxXSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB0YWI6ICdlbWFpbCcsXG4gICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICAuLi4oZGF0YS5nbG9iYWwpLFxuICAgICAgICAgICAgICAgICAgICBlbWFpbDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgLi4uKGRhdGEuZW1haWwpXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gXG5cbiAgICAgICAgZGF0YS51cmwudXJsID0gdXJsO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0YWI6ICd1cmwnLFxuICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgIC4uLihkYXRhLmdsb2JhbCksXG4gICAgICAgICAgICAgICAgdXJsOiB7XG4gICAgICAgICAgICAgICAgICAgIC4uLihkYXRhLnVybClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxufVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL19idWlsZC9hc3NldHMvanMvVGlueU1DRS9QbHVnaW5zL21vZHhsaW5rL0VsZW1lbnRIZWxwZXIuanMiXSwic291cmNlUm9vdCI6IiJ9");

/***/ })
/******/ ])
});
;